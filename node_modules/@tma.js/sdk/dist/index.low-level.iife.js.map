{"version":3,"file":"index.low-level.iife.js","sources":["../src/misc/createSingleton.ts","../src/bridge/events/listening/unsubscribe.ts","../src/bridge/events/listening/subscribe.ts","../src/logger/Logger.ts","../src/debug/debug.ts","../src/events/event-emitter/EventEmitter.ts","../src/events/onWindow.ts","../src/misc/createCleanup.ts","../src/errors/SDKError.ts","../src/errors/createError.ts","../src/errors/errors.ts","../src/parsing/createTypeError.ts","../src/parsing/ValueParser/ValueParser.ts","../src/parsing/createValueParserGenerator.ts","../src/parsing/parsers/boolean.ts","../src/parsing/parseBySchema.ts","../src/parsing/toRecord.ts","../src/parsing/parsers/json.ts","../src/parsing/parsers/number.ts","../src/parsing/parsers/string.ts","../src/bridge/parseMessage.ts","../src/bridge/events/event-handlers/cleanupEventHandlers.ts","../src/bridge/events/event-handlers/emitMiniAppsEvent.ts","../src/bridge/events/event-handlers/defineEventHandlers.ts","../src/bridge/events/event-emitter/createMiniAppsEventEmitter.ts","../src/bridge/events/event-emitter/singleton.ts","../src/bridge/events/listening/off.ts","../src/bridge/events/listening/on.ts","../src/misc/isRecord.ts","../src/version/compareVersions.ts","../src/supports/supports.ts","../src/env/hasExternalNotify.ts","../src/env/hasWebviewProxy.ts","../src/env/isIframe.ts","../src/bridge/target-origin.ts","../src/bridge/methods/postEvent.ts","../src/bridge/methods/createPostEvent.ts","../src/bridge/captureSameReq.ts","../src/timeout/createTimeoutError.ts","../src/timeout/withTimeout.ts","../src/bridge/request.ts","../src/bridge/invokeCustomMethod.ts","../src/env/isTMA.ts","../src/errors/isSDKError.ts","../src/errors/isSDKErrorOfType.ts","../src/env/initWeb.ts","../src/parsing/parsers/date.ts","../src/parsing/parsers/searchParams.ts","../src/components/InitData/parsers/chat.ts","../src/components/InitData/parsers/user.ts","../src/components/InitData/parsers/initData.ts","../src/colors/isRGB.ts","../src/colors/isRGBShort.ts","../src/colors/toRGB.ts","../src/parsing/parsers/rgb.ts","../src/components/ThemeParams/keys.ts","../src/components/ThemeParams/parsing/themeParams.ts","../src/launch-params/parseLaunchParams.ts","../src/launch-params/retrieveFromUrl.ts","../src/launch-params/retrieveFromLocation.ts","../src/navigation/getFirstNavigationEntry.ts","../src/launch-params/retrieveFromPerformance.ts","../src/storage/storage.ts","../src/launch-params/retrieveFromStorage.ts","../src/components/ThemeParams/parsing/serializeThemeParams.ts","../src/launch-params/serializeLaunchParams.ts","../src/launch-params/saveToStorage.ts","../src/launch-params/retrieveLaunchParams.ts"],"sourcesContent":["/**\n * Creates resettable singleton. We mostly need it for test purposes.\n * @param create - function which creates singleton entity.\n * @param onReset - function which will be called in case, singleton was reset.\n */\nexport function createSingleton<T>(\n  create: (reset: () => void) => T,\n  onReset?: (entity: T) => void,\n): [\n  /**\n   * Returns singleton entity.\n   */\n  get: () => T,\n  /**\n   * Resets last stored entity.\n   */\n  reset: () => void,\n] {\n  let cached: T | undefined;\n  const reset = () => {\n    cached !== undefined && onReset && onReset(cached);\n    cached = undefined;\n  };\n\n  return [() => (cached === undefined ? cached = create(reset) : cached), reset];\n}\n","import { miniAppsEventEmitter, resetMiniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Removes global event listener.\n * @param listener - event listener.\n */\nexport function unsubscribe(listener: MiniAppsSubscribeListener): void {\n  const ee = miniAppsEventEmitter();\n  const { count } = ee;\n  ee.unsubscribe(listener);\n\n  // If event emitter now has no listeners, we can make a cleanup.\n  if (count && !ee.count) {\n    resetMiniAppsEventEmitter();\n  }\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport { unsubscribe } from '../listening/unsubscribe.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Subscribes to all events sent from the native Telegram application.\n * @param listener - event listener to bind.\n * @returns Function to remove bound event listener.\n */\nexport function subscribe(listener: MiniAppsSubscribeListener): RemoveEventListenerFn {\n  miniAppsEventEmitter().subscribe(listener);\n  return () => unsubscribe(listener);\n}\n","/**\n * Message log level.\n */\nexport type LogLevel = 'log' | 'error';\n\nexport interface LoggerOptions {\n  bgColor?: string;\n  textColor?: string;\n}\n\nexport class Logger implements Pick<Console, 'log' | 'error'> {\n  constructor(\n    private readonly scope: string,\n    private readonly options: LoggerOptions = {},\n  ) {\n  }\n\n  /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */\n  private print(level: LogLevel, ...args: any[]): void {\n    const now = new Date();\n    const date = Intl\n      .DateTimeFormat('en-GB', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        fractionalSecondDigits: 3,\n        timeZone: 'UTC',\n      })\n      .format(now);\n\n    const { textColor, bgColor } = this.options;\n    const commonCss = 'font-weight: bold;padding: 0 5px;border-radius:5px';\n\n    console[level](\n      `%c${date}%c / %c${this.scope}`,\n      `${commonCss};background-color: lightblue;color:black`,\n      '',\n      `${commonCss};${textColor ? `color:${textColor};` : ''}${bgColor ? `background-color:${bgColor}` : ''}`,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      ...args,\n    );\n  }\n\n  /**\n   * Prints error message into a console.\n   * @param args\n   */\n  error(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('error', ...args);\n  }\n\n  /**\n   * Prints log message into a console.\n   * @param args\n   */\n  log(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('log', ...args);\n  }\n}\n","import { subscribe } from '@/bridge/events/listening/subscribe.js';\nimport { unsubscribe } from '@/bridge/events/listening/unsubscribe.js';\nimport { Logger } from '@/logger/Logger.js';\nimport type { MiniAppsSubscribeListener } from '@/bridge/events/types.js';\n\nexport const logger = new Logger('SDK', {\n  bgColor: 'forestgreen',\n  textColor: 'white',\n});\n\nlet debugEnabled = false;\n\nconst onEvent: MiniAppsSubscribeListener = ({ name, payload }) => {\n  logger.log('Event received:', payload ? { name, payload } : { name });\n};\n\n/**\n * Sets new debug mode. Enabling debug mode leads to printing additional messages in the console,\n * related to the processes inside the package.\n * @param enable - should debug be enabled.\n */\nexport function setDebug(enable: boolean): void {\n  if (debugEnabled !== enable) {\n    debugEnabled = enable;\n    enable ? subscribe(onEvent) : unsubscribe(onEvent);\n  }\n}\n\n/**\n * Logs info message into the console.\n * @param args - additional arguments.\n */\nexport function log(...args: any[]): void {\n  if (debugEnabled) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    logger.log(...args);\n  }\n}\n","import type { RemoveEventListenerFn } from '../types.js';\nimport type {\n  EmptyEventName,\n  EventListener,\n  EventName,\n  EventParams,\n  NonEmptyEventName,\n  SubscribeListener,\n} from './types.js';\n\nexport class EventEmitter<Schema> {\n  private readonly listeners: Map<\n    string,\n    [listener: EventListener<any>, once?: boolean][]\n  > = new Map();\n\n  private listenersCount = 0;\n\n  private subscribeListeners: SubscribeListener<Schema>[] = [];\n\n  /**\n   * Removes all event listeners.\n   */\n  clear() {\n    this.listeners.clear();\n    this.subscribeListeners = [];\n  }\n\n  /**\n   * Returns count of bound listeners.\n   */\n  get count(): number {\n    return this.listenersCount + this.subscribeListeners.length;\n  }\n\n  /**\n   * Emits known event which has no parameters.\n   * @param event - event name.\n   */\n  emit<E extends EmptyEventName<Schema>>(event: E): void;\n\n  /**\n   * Emits known event which has parameters.\n   * @param event - event name.\n   * @param args - list of event listener arguments.\n   */\n  emit<E extends NonEmptyEventName<Schema>>(event: E, ...args: EventParams<Schema[E]>): void;\n\n  emit(event: EventName<Schema>, ...args: any[]): void {\n    this.subscribeListeners.forEach((l) => l({\n      event,\n      args: args as EventParams<Schema[EventName<Schema>]>,\n    }));\n\n    const listeners = this.listeners.get(event) || [];\n\n    listeners.forEach(([listener, once]) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      listener(...args);\n      if (once) {\n        this.off(event, listener);\n      }\n    });\n  }\n\n  /**\n   * Adds new event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener be called only once.\n   * @returns Function to remove bound event listener.\n   */\n  on<E extends EventName<Schema>>(\n    event: E,\n    listener: EventListener<Schema[E]>,\n    once?: boolean,\n  ): RemoveEventListenerFn {\n    let listeners = this.listeners.get(event);\n    if (!listeners) {\n      this.listeners.set(event, listeners = []);\n    }\n\n    listeners.push([listener, once]);\n    this.listenersCount += 1;\n\n    return () => this.off(event, listener);\n  }\n\n  /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */\n  off<E extends EventName<Schema>>(event: E, listener: EventListener<Schema[E]>): void {\n    const listeners = this.listeners.get(event) || [];\n    for (let i = 0; i < listeners.length; i += 1) {\n      if (listener === listeners[i][0]) {\n        listeners.splice(i, 1);\n        this.listenersCount -= 1;\n        return;\n      }\n    }\n  }\n\n  /**\n   * Adds a new event listener for all events.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */\n  subscribe(listener: SubscribeListener<Schema>): RemoveEventListenerFn {\n    this.subscribeListeners.push(listener);\n    return () => this.unsubscribe(listener);\n  }\n\n  /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - event listener.\n   */\n  unsubscribe(listener: SubscribeListener<Schema>): void {\n    for (let i = 0; i < this.subscribeListeners.length; i += 1) {\n      if (this.subscribeListeners[i] === listener) {\n        this.subscribeListeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n}\n","import type { RemoveEventListenerFn } from './types.js';\n\n/**\n * Adds new event listener using window.addEventListener.\n * @param type - event name.\n * @param listener - event listener.\n * @param options - listening options.\n * @returns Function to remove event listener.\n */\nexport function onWindow<K extends keyof WindowEventMap>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): RemoveEventListenerFn {\n  window.addEventListener(type, listener, options);\n  return () => window.removeEventListener(type, listener, options);\n}\n","import { CleanupFn } from '@/types/index.js';\n\n/**\n * Returns a tuple, containing function to add cleanup, call cleanup, and flag showing whether\n * cleanup was called. Cleanup will not be performed in case, it was done before.\n */\nexport function createCleanup(...fns: (CleanupFn | CleanupFn[])[]): [\n  add: (fn: CleanupFn) => void,\n  cleanup: () => void,\n  cleanedUp: boolean,\n] {\n  let cleanedUp = false;\n  const cache = fns.flat(1);\n\n  return [\n    (fn) => !cleanedUp && cache.push(fn),\n    () => {\n      if (!cleanedUp) {\n        cleanedUp = true;\n        cache.forEach(clean => clean());\n      }\n    },\n    cleanedUp,\n  ];\n}","import type { ErrorType } from './errors.js';\n\n/**\n * Error used across the SDK.\n */\nexport class SDKError extends Error {\n  constructor(public readonly type: ErrorType, message?: string, cause?: unknown) {\n    super(message, { cause });\n    Object.setPrototypeOf(this, SDKError.prototype);\n  }\n}\n","import { SDKError } from './SDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Creates new error using specified type and message.\n * @param type - error code.\n * @param message - error message.\n * @param cause - original error.\n */\nexport function createError(type: ErrorType, message: string, cause?: unknown): SDKError {\n  return new SDKError(type, message, cause);\n}\n","/**\n * Specified Mini Apps method is unsupported.\n */\nexport const ERR_METHOD_UNSUPPORTED = 'ERR_METHOD_UNSUPPORTED';\n\n/**\n * Specified Mini Apps method parameter is unsupported.\n */\nexport const ERR_METHOD_PARAMETER_UNSUPPORTED = 'ERR_METHOD_PARAMETER_UNSUPPORTED';\n\n/**\n * Current environment is not Telegram application.\n */\nexport const ERR_UNKNOWN_ENV = 'ERR_UNKNOWN_ENV';\n\n/**\n * Telegram application returned and error while invoking custom method.\n */\nexport const ERR_INVOKE_CUSTOM_METHOD_RESPONSE = 'ERR_INVOKE_CUSTOM_METHOD_RESPONSE';\n\n/**\n * Timeout reached.\n */\nexport const ERR_TIMED_OUT = 'ERR_TIMED_OUT';\n\n/**\n * Value has unexpected type.\n */\nexport const ERR_UNEXPECTED_TYPE = 'ERR_UNEXPECTED_TYPE';\n\n/**\n * Something went wrong during value parsing.\n */\nexport const ERR_PARSE = 'ERR_PARSE';\n\n/**\n * Navigation entries list is empty.\n */\nexport const ERR_NAVIGATION_HISTORY_EMPTY = 'ERR_NAVIGATION_LIST_EMPTY';\n\n/**\n * Navigation entries cursor is invalid.\n */\nexport const ERR_NAVIGATION_INDEX_INVALID = 'ERR_NAVIGATION_CURSOR_INVALID';\n\n/**\n * Navigation entries item is invalid.\n */\nexport const ERR_NAVIGATION_ITEM_INVALID = 'ERR_NAVIGATION_ITEM_INVALID';\n\n/**\n * SSR component initialization failed.\n */\nexport const ERR_SSR_INIT = 'ERR_SSR_INIT';\n\n/**\n * Path starts from the invalid base.\n */\nexport const ERR_INVALID_PATH_BASE = 'ERR_INVALID_PATH_BASE';\n\nexport type ErrorType =\n  | typeof ERR_METHOD_UNSUPPORTED\n  | typeof ERR_METHOD_PARAMETER_UNSUPPORTED\n  | typeof ERR_UNKNOWN_ENV\n  | typeof ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n  | typeof ERR_TIMED_OUT\n  | typeof ERR_PARSE\n  | typeof ERR_UNEXPECTED_TYPE\n  | typeof ERR_NAVIGATION_HISTORY_EMPTY\n  | typeof ERR_NAVIGATION_INDEX_INVALID\n  | typeof ERR_NAVIGATION_ITEM_INVALID\n  | typeof ERR_SSR_INIT\n  | typeof ERR_INVALID_PATH_BASE;\n","import { createError } from '@/errors/createError.js';\nimport { ERR_UNEXPECTED_TYPE } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates instance of TypeError stating, that value has unexpected type.\n */\nexport function createTypeError(): SDKError {\n  return createError(ERR_UNEXPECTED_TYPE, 'Value has unexpected type');\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser } from '../types.js';\nimport type { ValueParserOptionalResult, ValueParserParseResult } from './types.js';\n\nexport class ValueParser<ResultType, IsOptional extends boolean> {\n  constructor(\n    protected parser: Parser<ResultType>,\n    protected isOptional: IsOptional,\n    protected type?: string,\n  ) {\n  }\n\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(value: unknown): ValueParserParseResult<ResultType, IsOptional> {\n    // In case, parsing result is specified as optional, and passed value is considered as empty,\n    // we can return undefined. Otherwise, pass to parser.\n    if (this.isOptional && value === undefined) {\n      return undefined as ValueParserParseResult<ResultType, IsOptional>;\n    }\n\n    try {\n      return this.parser(value) as ValueParserParseResult<ResultType, IsOptional>;\n    } catch (cause) {\n      throw createError(\n        ERR_PARSE,\n        `Unable to parse value${this.type ? ` as ${this.type}` : ''}`,\n        cause,\n      );\n    }\n  }\n\n  optional(): ValueParserOptionalResult<this, ResultType> {\n    this.isOptional = true as IsOptional;\n    return this as ValueParserOptionalResult<this, ResultType>;\n  }\n}\n","import { ValueParser } from './ValueParser/ValueParser.js';\nimport type { Parser } from './types.js';\n\nexport type ValueParserGenerator<T> = () => ValueParser<T, false>;\n\n/**\n * Creates function which generates new scalar value parser based on the specified one.\n * @param parser - parser to use as basic.\n * @param type - type name.\n */\nexport function createValueParserGenerator<T>(\n  parser: Parser<T>,\n  type?: string,\n): ValueParserGenerator<T> {\n  return () => new ValueParser(parser, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as boolean.\n */\nexport const boolean: ValueParserGenerator<boolean> = createValueParserGenerator((value) => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  const asString = String(value);\n\n  if (asString === '1' || asString === 'true') {\n    return true;\n  }\n\n  if (asString === '0' || asString === 'false') {\n    return false;\n  }\n\n  throw createTypeError();\n}, 'boolean');\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser, Schema } from './types.js';\n\n/**\n * Parses external value by specified schema. Functions iterates over each schema field\n * and uses getField function to get its value from the external source.\n * @param schema - object schema.\n * @param getField - function which gets external value by its field name.\n */\nexport function parseBySchema<T>(\n  schema: Schema<T>,\n  getField: (field: string) => unknown,\n): T {\n  const result = {} as T;\n\n  for (const field in schema) {\n    const definition = schema[field];\n    if (!definition) {\n      continue;\n    }\n\n    let from: string;\n    let parser: Parser<any>;\n\n    // In case, definition has \"type\" property, then SchemaFieldDetailed was passed.\n    if (typeof definition === 'function' || 'parse' in definition) {\n      // Otherwise we are working with either parser function or instance.\n      from = field;\n      parser = typeof definition === 'function' ? definition : definition.parse.bind(definition);\n    } else {\n      const { type: definitionType } = definition;\n\n      from = definition.from || field;\n      parser = typeof definitionType === 'function'\n        ? definitionType\n        : definitionType.parse.bind(definitionType);\n    }\n\n    try {\n      const parsedValue = parser(getField(from));\n      if (parsedValue !== undefined) {\n        (result as any)[field] = parsedValue;\n      }\n    } catch (error) {\n      throw createError(ERR_PARSE, `Unable to parse field \"${field}\"`, error);\n    }\n  }\n\n  return result;\n}\n","import { createTypeError } from './createTypeError.js';\n\n/**\n * Converts value to record.\n * @param value - value to convert.\n * @throws {Error} Value passed as a string does not represent JSON object.\n * @throws {Error} Value is not convertable.\n */\nexport function toRecord(value: unknown): Record<string, unknown> {\n  let formattedValue: any = value;\n\n  // Convert value to JSON in case, it is string. We expect value to be JSON string.\n  if (typeof formattedValue === 'string') {\n    formattedValue = JSON.parse(formattedValue);\n  }\n\n  // We expect json to be usual object.\n  if (\n    typeof formattedValue !== 'object'\n    || formattedValue === null\n    || Array.isArray(formattedValue)\n  ) {\n    throw createTypeError();\n  }\n\n  return formattedValue as Record<string, unknown>;\n}\n","import { parseBySchema } from '../parseBySchema.js';\nimport { toRecord } from '../toRecord.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new Json parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function json<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    const record = toRecord(value);\n    return parseBySchema(schema, (field) => record[field]);\n  }, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as number.\n */\nexport const number: ValueParserGenerator<number> = createValueParserGenerator((value) => {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    const num = Number(value);\n\n    if (!Number.isNaN(num)) {\n      return num;\n    }\n  }\n\n  throw createTypeError();\n}, 'number');\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as string.\n */\nexport const string: ValueParserGenerator<string> = createValueParserGenerator((value) => {\n  if (typeof value === 'string' || typeof value === 'number') {\n    return value.toString();\n  }\n  throw createTypeError();\n}, 'string');\n","import { json } from '@/parsing/parsers/json.js';\nimport { string } from '@/parsing/parsers/string.js';\n\n/**\n * Message format used in communication between client and Telegram applications.\n */\nexport interface MiniAppsMessage {\n  /**\n   * Event name.\n   */\n  eventType: string;\n  /**\n   * Event parameters.\n   */\n  eventData?: unknown;\n}\n\n/**\n * Parses value as a message between client and Telegram applications.\n * @param value - value to parse.\n */\nexport function parseMessage(value: unknown): MiniAppsMessage {\n  return json({\n    eventType: string(),\n    eventData: (v) => v,\n  }).parse(value);\n}\n","/**\n * Removes global event handlers, used by the package.\n */\nexport function cleanupEventHandlers(): void {\n  ['TelegramGameProxy_receiveEvent', 'TelegramGameProxy', 'Telegram'].forEach((prop) => {\n    delete window[prop as keyof Window];\n  });\n}\n","/**\n * Emits event sent from Telegram native application like it was sent in\n * default web environment between 2 iframes. It dispatches new MessageEvent\n * and expects it to be handled via `window.addEventListener('message', ...)`\n * as developer would do it to handle messages sent from the parent iframe.\n * @param eventType - event name.\n * @param eventData - event payload.\n */\nexport function emitMiniAppsEvent(eventType: string, eventData: unknown): void {\n  window.dispatchEvent(new MessageEvent('message', {\n    data: JSON.stringify({ eventType, eventData }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent,\n  }));\n}\n","import { emitMiniAppsEvent } from './emitMiniAppsEvent.js';\n\n/**\n * Defines special handlers by known paths, which are recognized by\n * Telegram as ports to receive events. This function also sets special\n * function in global window object to prevent duplicate declaration.\n */\nexport function defineEventHandlers() {\n  // Iterate over each path, where \"receiveEvent\" function should be\n  // defined. This function is called by external environment in case,\n  // it wants to emit some event.\n  [\n    ['TelegramGameProxy_receiveEvent'], // Windows Phone.\n    ['TelegramGameProxy', 'receiveEvent'], // Desktop.\n    ['Telegram', 'WebView', 'receiveEvent'], // Android and iOS.\n  ].forEach((path) => {\n    // Path starts from the \"window\" object.\n    let pointer = window as any;\n\n    path.forEach((item, idx, arr) => {\n      // We are on the last iteration, where function property name is passed.\n      if (idx === arr.length - 1) {\n        pointer[item] = emitMiniAppsEvent;\n        return;\n      }\n\n      if (!(item in pointer)) {\n        pointer[item] = {};\n      }\n      pointer = pointer[item];\n    });\n  });\n}\n","import { logger } from '@/debug/debug.js';\nimport { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { onWindow } from '@/events/onWindow.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport { type MiniAppsMessage, parseMessage } from '../../parseMessage.js';\nimport { cleanupEventHandlers } from '../event-handlers/cleanupEventHandlers.js';\nimport { defineEventHandlers } from '../event-handlers/defineEventHandlers.js';\nimport type {\n  MiniAppsEventName,\n  MiniAppsEventPayload,\n  MiniAppsEventEmitter,\n  MiniAppsEvents,\n} from '../types.js';\n\n/**\n * Parsers for problematic Mini Apps events.\n */\nconst parsers: {\n  [E in MiniAppsEventName]?: {\n    parse(value: unknown): MiniAppsEventPayload<E>;\n  }\n} = {\n  clipboard_text_received: json({\n    req_id: string(),\n    data: (value) => (value === null ? value : string().optional().parse(value)),\n  }),\n  custom_method_invoked: json({\n    req_id: string(),\n    result: (value) => value,\n    error: string().optional(),\n  }),\n  popup_closed: {\n    parse(value) {\n      return json({\n        button_id: (value) => (\n          value === null || value === undefined\n            ? undefined\n            : string().parse(value)\n        ),\n      }).parse(value ?? {});\n    },\n  },\n  viewport_changed: json({\n    height: number(),\n    width: (value) => (\n      value === null || value === undefined\n        ? window.innerWidth\n        : number().parse(value)\n    ),\n    is_state_stable: boolean(),\n    is_expanded: boolean(),\n  }),\n};\n\n/**\n * Creates new event emitter, which handles events from the Telegram application.\n */\nexport function createMiniAppsEventEmitter(): [\n  /**\n   * Created event emitter.\n   */\n  emitter: MiniAppsEventEmitter,\n  /**\n   * Function to dispose created emitter.\n   */\n  dispose: () => void,\n] {\n  // We use this event emitter for better developer experience, using the subscribe method.\n  const subEmitter = new EventEmitter<{ event: any[] }>();\n\n  // Event emitter processing all the incoming events.\n  const mainEmitter = new EventEmitter<MiniAppsEvents>();\n\n  mainEmitter.subscribe(event => {\n    subEmitter.emit('event', { name: event.event, payload: event.args[0] });\n  });\n\n  // Define event handles, which will proxy native method calls to their web version.\n  defineEventHandlers();\n\n  // List of cleanup functions, which should be called on dispose.\n  const [, cleanup] = createCleanup(\n    // Don't forget to remove created handlers.\n    cleanupEventHandlers,\n    // Add \"resize\" event listener to make sure, we always have fresh viewport information.\n    // Desktop version of Telegram is sometimes not sending the viewport_changed\n    // event. For example, when the MainButton is shown. That's why we should\n    // add our own listener to make sure, viewport information is always fresh.\n    // Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/10\n    onWindow('resize', () => {\n      mainEmitter.emit('viewport_changed', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: true,\n        is_expanded: true,\n      });\n    }),\n    // Add listener, which handles events sent from the Telegram web application and also events\n    // generated by the local emitEvent function.\n    onWindow('message', (event) => {\n      // Ignore non-parent window messages.\n      if (event.source !== window.parent) {\n        return;\n      }\n\n      // Parse incoming event data.\n      let message: MiniAppsMessage;\n      try {\n        message = parseMessage(event.data);\n      } catch {\n        // We ignore incorrect messages as they could be generated by any other code.\n        return;\n      }\n\n      const { eventType, eventData } = message;\n      const parser = parsers[eventType as keyof typeof parsers];\n\n      try {\n        const data = parser ? parser.parse(eventData) : eventData;\n        mainEmitter.emit(...(data ? [eventType, data] : [eventType]) as [any, any]);\n      } catch (cause) {\n        logger.error(\n          `An error occurred processing the \"${eventType}\" event from the Telegram application.\\nPlease, file an issue here:\\nhttps://github.com/Telegram-Mini-Apps/tma.js/issues/new/choose`,\n          message,\n          cause,\n        );\n      }\n    }),\n    // Clear emitters.\n    () => subEmitter.clear(),\n    () => mainEmitter.clear(),\n  );\n\n  return [{\n    on: mainEmitter.on.bind(mainEmitter),\n    off: mainEmitter.off.bind(mainEmitter),\n    subscribe(listener) {\n      return subEmitter.on('event', listener);\n    },\n    unsubscribe(listener) {\n      subEmitter.off('event', listener);\n    },\n    get count() {\n      return mainEmitter.count + subEmitter.count;\n    },\n  }, cleanup];\n}\n","import { createSingleton } from '@/misc/createSingleton.js';\n\nimport { createMiniAppsEventEmitter } from './createMiniAppsEventEmitter.js';\nimport type { MiniAppsEventEmitter } from '../types.js';\n\nconst [get, resetMiniAppsEventEmitter] = createSingleton(\n  (reset) => {\n    const [emitter, cleanup] = createMiniAppsEventEmitter();\n\n    // Rewire \"off\" method and make it reset singleton if no event listeners left.\n    const off = emitter.off.bind(emitter);\n    emitter.off = (event, listener) => {\n      const { count } = emitter;\n      off(event, listener);\n\n      // If event emitter now has no listeners, we can perform a reset.\n      if (count && !emitter.count) {\n        reset();\n      }\n    };\n\n    return [emitter, cleanup] as const;\n  },\n  ([, cleanup]) => cleanup(),\n);\n\n/**\n * Returns Mini Apps event emitter singleton.\n */\nexport function miniAppsEventEmitter(): MiniAppsEventEmitter {\n  return get()[0];\n}\n\nexport { resetMiniAppsEventEmitter };\n","import { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Removes listener from specified event.\n * @param event - event to listen.\n * @param listener - event listener to remove.\n */\nexport function off<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n): void {\n  miniAppsEventEmitter().off(event, listener);\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Adds new listener to the specified event. Returns handler\n * which allows to stop listening to event.\n * @param event - event name.\n * @param listener - event listener.\n * @param once - should listener be called only once.\n * @returns Function to remove bound event listener.\n */\nexport function on<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n  once?: boolean,\n): RemoveEventListenerFn {\n  return miniAppsEventEmitter().on(event, listener, once);\n}\n","/**\n * States that passed value is Record and not Array.\n * @param value - value to check.\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n","import type { Version } from './types.js';\n\n/**\n * Returns 1 in case, version \"a\" is greater than \"b\".\n * Returns 0 in case, version \"a\" equal to \"b\".\n * Returns -1 in case, version \"a\" is lower than \"b\".\n * @param a - first version.\n * @param b - second version.\n */\nexport function compareVersions(a: Version, b: Version): number {\n  // Split both of the version by dot.\n  const aParts = a.split('.');\n  const bParts = b.split('.');\n\n  // Compute maximum length.\n  const len = Math.max(aParts.length, bParts.length);\n\n  // Iterate over each part of version and compare them. In case, part is\n  // missing, assume its value is equal to 0.\n  for (let i = 0; i < len; i += 1) {\n    const aVal = parseInt(aParts[i] || '0', 10);\n    const bVal = parseInt(bParts[i] || '0', 10);\n\n    if (aVal === bVal) {\n      continue;\n    }\n    return aVal > bVal ? 1 : -1;\n  }\n  return 0;\n}\n","import { compareVersions } from '@/version/compareVersions.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodVersionedParams,\n  MiniAppsMethodWithVersionedParams,\n} from '@/bridge/methods/types/methods.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * Returns true if \"a\" version is less than or equal to \"b\" version.\n * @param a\n * @param b\n */\nfunction versionLessOrEqual(a: Version, b: Version): boolean {\n  return compareVersions(a, b) <= 0;\n}\n\n/**\n * Returns true in case, passed parameter in specified method is supported.\n * @param method - method name\n * @param param - method parameter\n * @param inVersion - platform version.\n */\nexport function supports<M extends MiniAppsMethodWithVersionedParams>(\n  method: M,\n  param: MiniAppsMethodVersionedParams<M>,\n  inVersion: Version,\n): boolean;\n\n/**\n * Returns true in case, specified method is supported in passed version.\n * @param method - method name.\n * @param inVersion - platform version.\n */\nexport function supports(method: MiniAppsMethodName, inVersion: Version): boolean;\n\nexport function supports(\n  method: MiniAppsMethodName,\n  paramOrVersion: Version | string,\n  inVersion?: string,\n): boolean {\n  // Method name, parameter, target version.\n  if (typeof inVersion === 'string') {\n    if (method === 'web_app_open_link') {\n      if (paramOrVersion === 'try_instant_view') {\n        return versionLessOrEqual('6.4', inVersion);\n      }\n      if (paramOrVersion === 'try_browser') {\n        return versionLessOrEqual('7.6', inVersion);\n      }\n    }\n\n    if (method === 'web_app_set_header_color') {\n      if (paramOrVersion === 'color') {\n        return versionLessOrEqual('6.9', inVersion);\n      }\n    }\n\n    if (method === 'web_app_close' && paramOrVersion === 'return_back') {\n      return versionLessOrEqual('7.6', inVersion);\n    }\n  }\n\n  switch (method) {\n    case 'web_app_open_tg_link':\n    case 'web_app_open_invoice':\n    case 'web_app_setup_back_button':\n    case 'web_app_set_background_color':\n    case 'web_app_set_header_color':\n    case 'web_app_trigger_haptic_feedback':\n      return versionLessOrEqual('6.1', paramOrVersion);\n    case 'web_app_open_popup':\n      return versionLessOrEqual('6.2', paramOrVersion);\n    case 'web_app_close_scan_qr_popup':\n    case 'web_app_open_scan_qr_popup':\n    case 'web_app_read_text_from_clipboard':\n      return versionLessOrEqual('6.4', paramOrVersion);\n    case 'web_app_switch_inline_query':\n      return versionLessOrEqual('6.7', paramOrVersion);\n    case 'web_app_invoke_custom_method':\n    case 'web_app_request_write_access':\n    case 'web_app_request_phone':\n      return versionLessOrEqual('6.9', paramOrVersion);\n    case 'web_app_setup_settings_button':\n      return versionLessOrEqual('6.10', paramOrVersion);\n    case 'web_app_biometry_get_info':\n    case 'web_app_biometry_open_settings':\n    case 'web_app_biometry_request_access':\n    case 'web_app_biometry_request_auth':\n    case 'web_app_biometry_update_token':\n      return versionLessOrEqual('7.2', paramOrVersion);\n    default:\n      return [\n        'iframe_ready',\n        'iframe_will_reload',\n        'web_app_close',\n        'web_app_data_send',\n        'web_app_expand',\n        'web_app_open_link',\n        'web_app_ready',\n        'web_app_request_theme',\n        'web_app_request_viewport',\n        'web_app_setup_main_button',\n        'web_app_setup_closing_behavior',\n      ].includes(method);\n  }\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `external.notify` property and `notify` is a\n * function.\n * @param value - value to check.\n */\nexport function hasExternalNotify<T extends object>(value: T): value is (\n  T & {\n  external: {\n    notify: (...args: any) => any;\n  };\n}) {\n  return 'external' in value\n    && isRecord(value.external)\n    && 'notify' in value.external\n    && typeof value.external.notify === 'function';\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `TelegramWebviewProxy.postEvent` property and\n * `postEvent` is a function.\n * @param value - value to check.\n */\nexport function hasWebviewProxy<T extends {}>(value: T): value is (\n  T & {\n  TelegramWebviewProxy: {\n    postEvent: (...args: unknown[]) => unknown;\n  }\n}) {\n  return 'TelegramWebviewProxy' in value\n    && isRecord(value.TelegramWebviewProxy)\n    && 'postEvent' in value.TelegramWebviewProxy\n    && typeof value.TelegramWebviewProxy.postEvent === 'function';\n}\n","/**\n * @see https://stackoverflow.com/a/326076\n * @returns True, if current environment is iframe.\n */\nexport function isIframe(): boolean {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return true;\n  }\n}\n","const INITIAL_TARGET_ORIGIN = 'https://web.telegram.org'\n\nlet currentTargetOrigin = INITIAL_TARGET_ORIGIN;\n\n/**\n * Sets a new global targetOrigin, used by the `postEvent` method.\n * The default value is \"https://web.telegram.org\".\n * You don't need to use this method until you know what you are doing.\n *\n * This method could be used for test purposes.\n * @param value - new target origin.\n * @see postEvent\n */\nexport function setTargetOrigin(value: string): void {\n  currentTargetOrigin = value;\n}\n\n/**\n * Sets the initial target origin.\n */\nexport function resetTargetOrigin(): void {\n  setTargetOrigin(INITIAL_TARGET_ORIGIN);\n}\n\n/**\n * Returns current global target origin.\n */\nexport function targetOrigin(): string {\n  return currentTargetOrigin;\n}\n","import { log } from '@/debug/debug.js';\nimport { hasExternalNotify } from '@/env/hasExternalNotify.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\nimport { isIframe } from '@/env/isIframe.js';\nimport { createError } from '@/errors/createError.js';\nimport { ERR_UNKNOWN_ENV } from '@/errors/errors.js';\n\nimport { targetOrigin as targetOriginFn } from '../target-origin.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodParams,\n  MiniAppsMethodWithOptionalParams,\n  MiniAppsMethodWithoutParams,\n  MiniAppsMethodWithRequiredParams,\n} from './types/methods.js';\n\ninterface PostEventOptions {\n  /**\n   * Origin used while posting a message.\n   *\n   * This option is only used if the current environment is browser (Web version of Telegram)\n   * and could be used for test purposes.\n   * @default 'https://web.telegram.org'\n   */\n  targetOrigin?: string;\n}\n\nexport type PostEvent = typeof postEvent;\n\n/**\n * Calls Mini Apps method with optional parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithOptionalParams>(\n  method: Method,\n  params?: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps method without parameters.\n * @param method - method name.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent(\n  method: MiniAppsMethodWithoutParams | MiniAppsMethodWithOptionalParams,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps method with parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithRequiredParams>(\n  method: Method,\n  params: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\nexport function postEvent(\n  eventType: MiniAppsMethodName,\n  paramsOrOptions?: MiniAppsMethodParams<MiniAppsMethodName> | PostEventOptions,\n  options?: PostEventOptions,\n): void {\n  let postOptions: PostEventOptions = {};\n  let eventData: any;\n\n  if (!paramsOrOptions && !options) {\n    // Parameters and options were not passed.\n    postOptions = {};\n  } else if (paramsOrOptions && options) {\n    // Both parameters and options passed.\n    postOptions = options;\n    eventData = paramsOrOptions;\n  } else if (paramsOrOptions) {\n    // Only parameters were passed.\n    if ('targetOrigin' in paramsOrOptions) {\n      postOptions = paramsOrOptions;\n    } else {\n      eventData = paramsOrOptions;\n    }\n  }\n\n  log('Posting event:', eventData\n    ? { event: eventType, data: eventData }\n    : { event: eventType });\n\n  // Telegram Web.\n  if (isIframe()) {\n    return window.parent.postMessage(\n      JSON.stringify({ eventType, eventData }),\n      postOptions.targetOrigin || targetOriginFn(),\n    );\n  }\n\n  // Telegram for Windows Phone or Android.\n  if (hasExternalNotify(window)) {\n    window.external.notify(JSON.stringify({ eventType, eventData }));\n    return;\n  }\n\n  // Telegram for iOS and macOS.\n  if (hasWebviewProxy(window)) {\n    window.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n    return;\n  }\n\n  // Otherwise current environment is unknown, and we are not able to send event.\n  throw createError(\n    ERR_UNKNOWN_ENV,\n    'Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment.',\n  );\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_METHOD_PARAMETER_UNSUPPORTED, ERR_METHOD_UNSUPPORTED } from '@/errors/errors.js';\nimport { isRecord } from '@/misc/isRecord.js';\nimport { supports } from '@/supports/supports.js';\nimport type { Version } from '@/version/types.js';\n\nimport { type PostEvent, postEvent } from './postEvent.js';\n\n/**\n * Creates a function which checks if specified method and parameters are supported.\n *\n * If method or parameters are unsupported, an error will be thrown.\n * @param version - Telegram Mini Apps version.\n * @throws {SDKError} ERR_METHOD_UNSUPPORTED\n * @throws {SDKError} ERR_METHOD_PARAMETER_UNSUPPORTED\n * @see ERR_METHOD_UNSUPPORTED\n * @see ERR_METHOD_PARAMETER_UNSUPPORTED\n */\nexport function createPostEvent(version: Version): PostEvent {\n  return (method: any, params: any) => {\n    // Firstly, check if a method is supported.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    if (!supports(method, version)) {\n      throw createError(ERR_METHOD_UNSUPPORTED, `Method \"${method}\" is unsupported in Mini Apps version ${version}`);\n    }\n\n    // Method could use parameters, which are supported only in specific\n    // versions of Mini Apps.\n    // We are validating only those parameters, which are not backward compatible.\n    if (\n      isRecord(params)\n      && method === 'web_app_set_header_color'\n      && 'color' in params\n      && !supports(method, 'color', version)\n    ) {\n      throw createError(\n        ERR_METHOD_PARAMETER_UNSUPPORTED,\n        `Parameter \"color\" of \"${method}\" method is unsupported in Mini Apps version ${version}`,\n      );\n    }\n\n    return postEvent(method, params);\n  };\n}\n","type CaptureSameReqFn = (payload: { req_id: string }) => boolean;\n\n/**\n * Returns a function which can be used in `request` function `capture` property to capture\n * the event with the same request identifier.\n * @param reqId - request identifier.\n */\nexport function captureSameReq(reqId: string): CaptureSameReqFn {\n  return ({ req_id }) => req_id === reqId;\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_TIMED_OUT } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates new timeout error.\n * @param timeout - timeout in ms.\n */\nexport function createTimeoutError(timeout: number): SDKError {\n  return createError(ERR_TIMED_OUT, `Timeout reached: ${timeout}ms`);\n}\n","import { createTimeoutError } from '@/timeout/createTimeoutError.js';\n\n/**\n * Runs passed function or promise with specified deadline presented via timeout argument.\n * @param funcOrPromise - function to execute or pending promise.\n * @param timeout - completion timeout.\n */\nexport function withTimeout<T>(\n  funcOrPromise: Promise<T> | (() => Promise<T>),\n  timeout: number,\n): Promise<T> {\n  return Promise.race([\n    typeof funcOrPromise === 'function' ? funcOrPromise() : funcOrPromise,\n    new Promise<never>((_, rej) => {\n      setTimeout(() => {\n        rej(createTimeoutError(timeout));\n      }, timeout);\n    }),\n  ]);\n}\n","import { withTimeout } from '@/timeout/withTimeout.js';\nimport type { ExecuteWithOptions, If, IsNever } from '@/types/index.js';\n\nimport { on } from './events/listening/on.js';\nimport { postEvent as defaultPostEvent } from './methods/postEvent.js';\nimport type { MiniAppsEventName, MiniAppsEventPayload } from './events/types.js';\nimport type { MiniAppsMethodName, MiniAppsMethodParams } from './methods/types/index.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\n\n/**\n * Returns all possible payloads for the specified events array.\n */\nexport type RequestEventsPayloads<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? MiniAppsEventPayload<U>\n    : never;\n\nexport type RequestCaptureEventsFn<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? (payload: {\n      [K in U]: If<\n        IsNever<MiniAppsEventPayload<K>>,\n        { event: K },\n        { event: K; payload: MiniAppsEventPayload<K> }\n      >\n    }[U]) => boolean\n    : never;\n\nexport type RequestCaptureEventFn<E extends MiniAppsEventName> = If<\n  IsNever<MiniAppsEventPayload<E>>,\n  () => boolean,\n  (payload: MiniAppsEventPayload<E>) => boolean\n>;\n\n/**\n * `request` method options.\n * @see request\n */\nexport type RequestOptions<M extends MiniAppsMethodName, E, C> = {\n    /**\n     * Mini Apps method name.\n     */\n    method: M;\n    /**\n     * Tracked Mini Apps events.\n     */\n    event: E;\n    /**\n     * Should return true if this event should be captured.\n     * A request will be captured if this property is omitted.\n     */\n    capture?: C;\n  }\n  & ExecuteWithOptions\n  & If<IsNever<MiniAppsMethodParams<M>>, {}, {\n  /**\n   * List of method parameters.\n   */\n  params: MiniAppsMethodParams<M>\n}>;\n\ntype AnyRequestResult =\n  | MiniAppsEventPayload<MiniAppsEventName>\n  | RequestEventsPayloads<MiniAppsEventName[]>;\n\n/**\n * Calls specified Mini Apps method and captures specified event.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName>(\n  options: RequestOptions<M, E, RequestCaptureEventFn<E>>,\n): Promise<MiniAppsEventPayload<E>>;\n\n/**\n * Calls specified Mini Apps method and captures one of the specified events.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the first captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName[]>(\n  options: RequestOptions<M, E, RequestCaptureEventsFn<E>>,\n): Promise<RequestEventsPayloads<E>>;\n\nexport async function request<M extends MiniAppsMethodName>(\n  options:\n    | RequestOptions<M, MiniAppsEventName, RequestCaptureEventFn<MiniAppsEventName>>\n    | RequestOptions<M, MiniAppsEventName[], RequestCaptureEventsFn<MiniAppsEventName[]>>,\n): Promise<AnyRequestResult> {\n  let resolve: (payload: AnyRequestResult) => void;\n  const promise = new Promise<AnyRequestResult>(res => resolve = res);\n\n  const { event, capture, timeout } = options;\n  const [, cleanup] = createCleanup(\n    // We need to iterate over all tracked events, and create their event listeners.\n    (Array.isArray(event) ? event : [event]).map((ev) => {\n      // Each event listener waits for the event to occur.\n      // Then, if the capture function was passed, we should check if the event should be captured.\n      // If the function is omitted, we instantly capture the event.\n      return on(ev, (payload) => {\n        if (!capture || (\n          Array.isArray(event)\n            ? (capture as RequestCaptureEventsFn<MiniAppsEventName[]>)({\n              event: ev,\n              payload: payload as any,\n            })\n            : (capture as RequestCaptureEventFn<MiniAppsEventName>)(payload)\n        )) {\n          resolve(payload);\n        }\n      });\n    }),\n  );\n\n  try {\n    (options.postEvent || defaultPostEvent)(options.method as any, (options as any).params);\n    return await (timeout ? withTimeout(promise, timeout) : promise);\n  } finally {\n    // After promise execution was completed, don't forget to remove all the listeners.\n    cleanup();\n  }\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_INVOKE_CUSTOM_METHOD_RESPONSE } from '@/errors/errors.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { captureSameReq } from './captureSameReq.js';\nimport { request } from './request.js';\nimport type { CustomMethodName, CustomMethodParams } from './methods/types/custom-methods.js';\n\n/**\n * Invokes known custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport async function invokeCustomMethod<M extends CustomMethodName>(\n  method: M,\n  params: CustomMethodParams<M>,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\n/**\n * Invokes unknown custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\nexport async function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options: ExecuteWithOptions = {},\n): Promise<unknown> {\n  const {\n    result,\n    error,\n  } = await request({\n    ...options,\n    method: 'web_app_invoke_custom_method',\n    event: 'custom_method_invoked',\n    params: {\n      method,\n      params,\n      req_id: requestId,\n    },\n    capture: captureSameReq(requestId),\n  });\n\n  if (error) {\n    throw createError(ERR_INVOKE_CUSTOM_METHOD_RESPONSE, error);\n  }\n\n  return result;\n}\n","import { request } from '@/bridge/request.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\n\n/**\n * Returns true in case, current environment is Telegram Mini Apps.\n */\nexport async function isTMA(): Promise<boolean> {\n  if (hasWebviewProxy(window)) {\n    return true;\n  }\n  try {\n    await request({ method: 'web_app_request_theme', event: 'theme_changed', timeout: 100 });\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import { SDKError } from './SDKError.js';\n\n/**\n * @returns True, if passed value is an instance of SDKError.\n * @param value - value to check.\n */\nexport function isSDKError(value: unknown): value is SDKError {\n  return value instanceof SDKError;\n}\n","import { isSDKError } from './isSDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Returns true if passed value is an SDK error of specified type.\n * @param value - value to check.\n * @param type - error type.\n */\nexport function isSDKErrorOfType(value: unknown, type: ErrorType): boolean {\n  return isSDKError(value) && value.type === type;\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { postEvent } from '@/bridge/methods/postEvent.js';\n\ninterface CleanupFn {\n  (): void;\n}\n\n/**\n * Performs initialization process in the web version of Telegram.\n * @returns Function, which performs cleanup removing all created elements and listeners.\n * @param acceptCustomStyles - true if SDK should accept styles sent from the Telegram web\n * application. This option is only used in web versions of Telegram. Default: false.\n */\nexport function initWeb(acceptCustomStyles = true): CleanupFn {\n  const listeners: CleanupFn[] = [\n    on('reload_iframe', () => {\n      postEvent('iframe_will_reload');\n      window.location.reload();\n    }),\n  ];\n  const cleanup: CleanupFn = () => listeners.forEach((l) => l());\n\n  if (acceptCustomStyles) {\n    const style = document.createElement('style');\n    style.id = 'telegram-custom-styles';\n    document.head.appendChild(style);\n\n    listeners.push(\n      on('set_custom_style', (html) => {\n        // It is safe to use innerHTML here as long as style tag has a special behavior related\n        // to the specified content. In case, any script will be passed here, it will not be\n        // executed.\n        style.innerHTML = html;\n      }),\n      () => document.head.removeChild(style),\n    );\n  }\n\n  // Notify Telegram, iframe is ready. This will result in sending style tag html from native\n  // application which is used in catchCustomStyles function. We should call this method also\n  // to start receiving \"reload_iframe\" events from the Telegram application.\n  postEvent('iframe_ready', { reload_supported: true });\n\n  return cleanup;\n}\n","import { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { number } from './number.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as Date.\n */\nexport const date: ValueParserGenerator<Date> = createValueParserGenerator((value) => (\n  value instanceof Date\n    ? value\n    : new Date(number().parse(value) * 1000)\n), 'Date');\n","import { createTypeError } from '../createTypeError.js';\nimport { parseBySchema } from '../parseBySchema.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new search params parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function searchParams<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    if (typeof value !== 'string' && !(value instanceof URLSearchParams)) {\n      throw createTypeError();\n    }\n\n    const params = typeof value === 'string' ? new URLSearchParams(value) : value;\n\n    return parseBySchema(schema, (field) => {\n      const paramValue = params.get(field);\n      return paramValue === null ? undefined : paramValue;\n    });\n  }, false, type);\n}\n","import { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { Chat } from '../types.js';\n\nexport const chat = json<Chat>({\n  id: number(),\n  type: string(),\n  title: string(),\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'Chat')\n  .optional();\n","import { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { User } from '../types.js';\n\nexport const user = json<User>({\n  addedToAttachmentMenu: {\n    type: boolean().optional(),\n    from: 'added_to_attachment_menu',\n  },\n  allowsWriteToPm: {\n    type: boolean().optional(),\n    from: 'allows_write_to_pm',\n  },\n  firstName: {\n    type: string(),\n    from: 'first_name',\n  },\n  id: number(),\n  isBot: {\n    type: boolean().optional(),\n    from: 'is_bot',\n  },\n  isPremium: {\n    type: boolean().optional(),\n    from: 'is_premium',\n  },\n  languageCode: {\n    type: string().optional(),\n    from: 'language_code',\n  },\n  lastName: {\n    type: string().optional(),\n    from: 'last_name',\n  },\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'User')\n  .optional();\n","import { date } from '@/parsing/parsers/date.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { ValueParser } from '@/parsing/ValueParser/ValueParser.js';\n\nimport { chat } from './chat.js';\nimport { user } from './user.js';\nimport type { InitDataParsed } from '../types.js';\n\n/**\n * Returns parser used to parse init data, presented as search params.\n */\nexport function initData(): ValueParser<InitDataParsed, false> {\n  return searchParams<InitDataParsed>({\n    authDate: {\n      type: date(),\n      from: 'auth_date',\n    },\n    canSendAfter: {\n      type: number().optional(),\n      from: 'can_send_after',\n    },\n    chat,\n    chatInstance: {\n      type: string().optional(),\n      from: 'chat_instance',\n    },\n    chatType: {\n      type: string().optional(),\n      from: 'chat_type',\n    },\n    hash: string(),\n    queryId: {\n      type: string().optional(),\n      from: 'query_id',\n    },\n    receiver: user,\n    startParam: {\n      type: string().optional(),\n      from: 'start_param',\n    },\n    user,\n  }, 'InitData');\n}\n","import type { RGB } from './types.js';\n\n/**\n * Returns true in case, passed value has #RRGGBB format.\n * @param value - value to check.\n */\nexport function isRGB(value: string): value is RGB {\n  return /^#[\\da-f]{6}$/i.test(value);\n}\n","import type { RGBShort } from './types.js';\n\n/**\n * Returns true in case, passed value has #RGB format.\n * @param value - value to check.\n */\nexport function isRGBShort(value: string): value is RGBShort {\n  return /^#[\\da-f]{3}$/i.test(value);\n}\n","import { isRGB } from './isRGB.js';\nimport { isRGBShort } from './isRGBShort.js';\nimport type { RGB } from './types.js';\n\n/**\n * Converts passed value to #RRGGBB format. Accepts following color formats:\n * - `#RGB`\n * - `#RRGGBB`\n * - `rgb(1,2,3)`\n * - `rgba(1,2,3,4)`\n * @param value - value to convert.\n * @throws {Error} Passed value does not satisfy any of known RGB formats.\n */\nexport function toRGB(value: string): RGB {\n  // Remove all spaces.\n  const clean = value.replace(/\\s/g, '').toLowerCase();\n\n  // Value already has required format.\n  if (isRGB(clean)) {\n    return clean;\n  }\n\n  // Convert from #RGB.\n  if (isRGBShort(clean)) {\n    let color: RGB = '#';\n    for (let i = 0; i < 3; i += 1) {\n      color += clean[1 + i].repeat(2);\n    }\n    return color;\n  }\n\n  // Example valid values: rgb(0,3,10) rgba(32,114,8,0)\n  const match = clean.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/)\n    || clean.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n\n  // In case, this didn't work as well, we can't extract RGB color from passed\n  // text.\n  if (!match) {\n    throw new Error(`Value \"${value}\" does not satisfy any of known RGB formats.`);\n  }\n\n  // Otherwise, take R, G and B components, convert to hex and create #RRGGBB\n  // string.\n  return match.slice(1).reduce((acc, component) => {\n    const formatted = parseInt(component, 10).toString(16);\n    return acc + (formatted.length === 1 ? '0' : '') + formatted;\n  }, '#') as RGB;\n}\n","import { toRGB } from '@/colors/toRGB.js';\nimport type { RGB } from '@/colors/types.js';\n\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { string } from './string.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as RGB color.\n */\nexport const rgb: ValueParserGenerator<RGB> = createValueParserGenerator((value) => toRGB(string().parse(value)), 'rgb');\n","/**\n * Converts a palette key from the Telegram application to the representation used by the package.\n * @param key - palette key.\n */\nexport function keyToLocal(key: string): string {\n  return key.replace(/_[a-z]/g, (match) => match[1].toUpperCase());\n}\n\n/**\n * Converts palette key from the local representation to the representation sent from the\n * Telegram application.\n * @param key - palette key.\n */\nexport function keyToExternal(key: string): string {\n  return key.replace(/[A-Z]/g, (match) => `_${match.toLowerCase()}`);\n}\n","import { createValueParserGenerator, type ValueParserGenerator } from '@/parsing/createValueParserGenerator.js';\nimport { rgb } from '@/parsing/parsers/rgb.js';\nimport { toRecord } from '@/parsing/toRecord.js';\n\nimport { keyToLocal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\nexport const themeParams: ValueParserGenerator<ThemeParamsParsed> = createValueParserGenerator(\n  (value) => {\n    const rgbOptional = rgb().optional();\n\n    return Object\n      .entries(toRecord(value))\n      .reduce<ThemeParamsParsed>((acc, [k, v]) => {\n        acc[keyToLocal(k)] = rgbOptional.parse(v);\n        return acc;\n      }, {});\n  },\n  'ThemeParams',\n);\n","import { initData } from '@/components/InitData/parsers/initData.js';\nimport { themeParams } from '@/components/ThemeParams/parsing/themeParams.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Parses value as launch parameters.\n * @param value - value to parse.\n */\nexport function parseLaunchParams(value: unknown): LaunchParams {\n  return searchParams({\n    botInline: {\n      type: boolean().optional(),\n      from: 'tgWebAppBotInline',\n    },\n    initData: {\n      type: initData().optional(),\n      from: 'tgWebAppData',\n    },\n    initDataRaw: {\n      type: string().optional(),\n      from: 'tgWebAppData',\n    },\n    platform: {\n      type: string(),\n      from: 'tgWebAppPlatform',\n    },\n    showSettings: {\n      type: boolean().optional(),\n      from: 'tgWebAppShowSettings',\n    },\n    startParam: {\n      type: string().optional(),\n      from: 'tgWebAppStartParam',\n    },\n    themeParams: {\n      type: themeParams(),\n      from: 'tgWebAppThemeParams',\n    },\n    version: {\n      type: string(),\n      from: 'tgWebAppVersion',\n    },\n  }).parse(value);\n}\n","import { parseLaunchParams } from './parseLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @param urlString - URL to extract launch parameters from.\n * @returns Launch parameters from the specified URL.\n * @throws Error if function was unable to extract launch parameters from the passed URL.\n */\nexport function retrieveFromUrl(urlString: string): LaunchParams {\n  return parseLaunchParams(\n    urlString\n      // Replace everything before this first hashtag or question sign.\n      .replace(/^[^?#]*[?#]/, '')\n      // Replace all hashtags and question signs to make it look like some search params.\n      .replace(/[?#]/g, '&'),\n  );\n}\n","import { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from the current window location hash.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromLocation(): LaunchParams {\n  return retrieveFromUrl(window.location.href);\n}\n","/**\n * Returns the first navigation entry from window.performance.\n * @returns First navigation entry or null, in case performance functionality is not supported\n * or navigation entry was not found.\n */\nexport function getFirstNavigationEntry(): PerformanceNavigationTiming | undefined {\n  return performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming | undefined;\n}\n","import { getFirstNavigationEntry } from '@/navigation/getFirstNavigationEntry.js';\n\nimport { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters based on the first navigation entry.\n * @throws Error if function was unable to extract launch parameters from the navigation entry.\n */\nexport function retrieveFromPerformance(): LaunchParams {\n  const navigationEntry = getFirstNavigationEntry();\n  if (!navigationEntry) {\n    throw new Error('Unable to get first navigation entry.');\n  }\n\n  return retrieveFromUrl(navigationEntry.name);\n}\n","import type { BackButtonState } from '@/components/BackButton/types.js';\nimport type { BiometryManagerState } from '@/components/BiometryManager/types.js';\nimport type { ClosingBehaviorState } from '@/components/ClosingBehavior/types.js';\nimport type { MainButtonState } from '@/components/MainButton/types.js';\nimport type { MiniAppState } from '@/components/MiniApp/types.js';\nimport type { SettingsButtonState } from '@/components/SettingsButton/types.js';\nimport type { ThemeParamsParsed } from '@/components/ThemeParams/types.js';\nimport type { ViewportState } from '@/components/Viewport/types.js';\n\n/**\n * Describes storage keys and according values.\n */\nexport interface StorageParams {\n  backButton: BackButtonState;\n  biometryManager: BiometryManagerState;\n  closingBehavior: ClosingBehaviorState;\n  launchParams: string;\n  mainButton: MainButtonState;\n  miniApp: MiniAppState;\n  settingsButton: SettingsButtonState;\n  themeParams: ThemeParamsParsed;\n  viewport: ViewportState;\n}\n\n/**\n * Key which could be used to store data in the storage.\n */\nexport type StorageKey = keyof StorageParams;\n\n/**\n * Type specific to the specified storage key.\n */\nexport type StorageValue<K extends StorageKey> = StorageParams[K];\n\n/**\n * Converts passed storage key to the formatted state.\n * @param key - storage key.\n */\nfunction formatKey(key: StorageKey): string {\n  return `tma.js/${key.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}`;\n}\n\n/**\n * Saves value in the storage.\n * @param key - storage key.\n * @param value - storage value.\n */\nexport function setStorageValue<K extends StorageKey>(key: K, value: StorageValue<K>): void {\n  sessionStorage.setItem(formatKey(key), JSON.stringify(value));\n}\n\n/**\n * Extracts value from the storage.\n * @param key - storage key.\n */\nexport function getStorageValue<K extends StorageKey>(key: K): StorageValue<K> | undefined {\n  const value = sessionStorage.getItem(formatKey(key));\n  try {\n    return value ? JSON.parse(value) as StorageValue<K> : undefined;\n  } catch { /* empty */ }\n}\n","import { parseLaunchParams } from '@/launch-params/parseLaunchParams.js';\nimport { getStorageValue } from '@/storage/storage.js';\nimport type { LaunchParams } from '@/launch-params/types.js';\n\n/**\n * @returns Launch parameters stored in the session storage.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromStorage(): LaunchParams {\n  return parseLaunchParams(getStorageValue('launchParams') || '');\n}\n","import { keyToExternal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\n/**\n * Serializes theme parameters to representation sent from the Telegram application.\n */\nexport function serializeThemeParams(themeParams: ThemeParamsParsed): string {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object\n        .entries(themeParams)\n        .map(([key, value]) => [keyToExternal(key), value]),\n    ),\n  );\n}\n","import { serializeThemeParams } from '@/components/ThemeParams/parsing/serializeThemeParams.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Converts launch parameters to its initial representation.\n * @param value - launch parameters.\n */\nexport function serializeLaunchParams(value: LaunchParams): string {\n  const {\n    initDataRaw,\n    themeParams,\n    platform,\n    version,\n    showSettings,\n    startParam,\n    botInline,\n  } = value;\n\n  const params = new URLSearchParams();\n\n  params.set('tgWebAppPlatform', platform);\n  params.set('tgWebAppThemeParams', serializeThemeParams(themeParams));\n  params.set('tgWebAppVersion', version);\n\n  if (initDataRaw) {\n    params.set('tgWebAppData', initDataRaw);\n  }\n\n  if (startParam) {\n    params.set('tgWebAppStartParam', startParam);\n  }\n\n  if (typeof showSettings === 'boolean') {\n    params.set('tgWebAppShowSettings', showSettings ? '1' : '0');\n  }\n\n  if (typeof botInline === 'boolean') {\n    params.set('tgWebAppBotInline', botInline ? '1' : '0');\n  }\n\n  return params.toString();\n}\n","import { setStorageValue } from '@/storage/storage.js';\n\nimport { serializeLaunchParams } from './serializeLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * Saves specified launch parameters in the session storage.\n * @param value - launch params to save.\n */\nexport function saveToStorage(value: LaunchParams): void {\n  setStorageValue('launchParams', serializeLaunchParams(value));\n}\n","import { retrieveFromLocation } from './retrieveFromLocation.js';\nimport { retrieveFromPerformance } from './retrieveFromPerformance.js';\nimport { retrieveFromStorage } from './retrieveFromStorage.js';\nimport { saveToStorage } from './saveToStorage.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from any known source.\n * @throws Error if extraction was unsuccessful.\n */\nexport function retrieveLaunchParams(): LaunchParams {\n  const errors: unknown[] = [];\n\n  for (const retrieve of [\n    // Try to retrieve launch parameters from the current location. This method can return\n    // nothing in case, location was changed and then page was reloaded.\n    retrieveFromLocation,\n    // Then, try using the lower level API - window.performance.\n    retrieveFromPerformance,\n    // Finally, try to extract launch parameters from the session storage.\n    retrieveFromStorage,\n  ]) {\n    try {\n      const lp = retrieve();\n      saveToStorage(lp);\n      return lp;\n    } catch (e) {\n      errors.push(e);\n    }\n  }\n\n  throw new Error('Unable to retrieve launch parameters from any known source.');\n}\n"],"names":["createSingleton","create","onReset","cached","reset","unsubscribe","listener","ee","miniAppsEventEmitter","count","resetMiniAppsEventEmitter","subscribe","Logger","scope","options","level","args","now","date","textColor","bgColor","commonCss","logger","debugEnabled","onEvent","name","payload","setDebug","enable","log","EventEmitter","__publicField","event","l","once","listeners","i","onWindow","type","createCleanup","fns","cleanedUp","cache","fn","clean","SDKError","message","cause","createError","ERR_METHOD_UNSUPPORTED","ERR_METHOD_PARAMETER_UNSUPPORTED","ERR_UNKNOWN_ENV","ERR_INVOKE_CUSTOM_METHOD_RESPONSE","ERR_TIMED_OUT","ERR_UNEXPECTED_TYPE","ERR_PARSE","ERR_NAVIGATION_HISTORY_EMPTY","ERR_NAVIGATION_INDEX_INVALID","ERR_NAVIGATION_ITEM_INVALID","ERR_SSR_INIT","ERR_INVALID_PATH_BASE","createTypeError","ValueParser","parser","isOptional","value","createValueParserGenerator","boolean","asString","parseBySchema","schema","getField","result","field","definition","from","definitionType","parsedValue","error","toRecord","formattedValue","json","record","number","num","string","parseMessage","v","cleanupEventHandlers","prop","emitMiniAppsEvent","eventType","eventData","defineEventHandlers","path","pointer","item","idx","arr","parsers","createMiniAppsEventEmitter","subEmitter","mainEmitter","cleanup","data","get","emitter","off","on","isRecord","compareVersions","a","b","aParts","bParts","len","aVal","bVal","versionLessOrEqual","supports","method","paramOrVersion","inVersion","hasExternalNotify","hasWebviewProxy","isIframe","currentTargetOrigin","setTargetOrigin","targetOrigin","postEvent","paramsOrOptions","postOptions","targetOriginFn","createPostEvent","version","params","captureSameReq","reqId","req_id","createTimeoutError","timeout","withTimeout","funcOrPromise","_","rej","request","resolve","promise","res","capture","ev","defaultPostEvent","invokeCustomMethod","requestId","isTMA","isSDKError","isSDKErrorOfType","initWeb","acceptCustomStyles","style","html","searchParams","paramValue","chat","user","initData","isRGB","isRGBShort","toRGB","color","match","acc","component","formatted","rgb","keyToLocal","key","keyToExternal","themeParams","rgbOptional","k","parseLaunchParams","retrieveFromUrl","urlString","retrieveFromLocation","getFirstNavigationEntry","retrieveFromPerformance","navigationEntry","formatKey","m","setStorageValue","getStorageValue","retrieveFromStorage","serializeThemeParams","serializeLaunchParams","initDataRaw","platform","showSettings","startParam","botInline","saveToStorage","retrieveLaunchParams","retrieve","lp"],"mappings":"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"}