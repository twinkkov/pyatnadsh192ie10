var Wt = Object.defineProperty;
var Ut = (e, t, s) => t in e ? Wt(e, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : e[t] = s;
var c = (e, t, s) => Ut(e, typeof t != "symbol" ? t + "" : t, s);
function ot(e, t) {
  let s;
  const n = () => {
    s !== void 0 && t && t(s), s = void 0;
  };
  return [() => s === void 0 ? s = e(n) : s, n];
}
function at(e) {
  const t = V(), { count: s } = t;
  t.unsubscribe(e), s && !t.count && ie();
}
function Ht(e) {
  return V().subscribe(e), () => at(e);
}
class Ot {
  constructor(t, s = {}) {
    this.scope = t, this.options = s;
  }
  /**
   * Prints message into a console in case, logger is currently enabled.
   * @param level - log level.
   * @param args - arguments.
   */
  print(t, ...s) {
    const n = /* @__PURE__ */ new Date(), r = Intl.DateTimeFormat("en-GB", {
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      fractionalSecondDigits: 3,
      timeZone: "UTC"
    }).format(n), { textColor: i, bgColor: o } = this.options, a = "font-weight: bold;padding: 0 5px;border-radius:5px";
    console[t](
      `%c${r}%c / %c${this.scope}`,
      `${a};background-color: lightblue;color:black`,
      "",
      `${a};${i ? `color:${i};` : ""}${o ? `background-color:${o}` : ""}`,
      ...s
    );
  }
  /**
   * Prints error message into a console.
   * @param args
   */
  error(...t) {
    this.print("error", ...t);
  }
  /**
   * Prints log message into a console.
   * @param args
   */
  log(...t) {
    this.print("log", ...t);
  }
}
const F = new Ot("SDK", {
  bgColor: "forestgreen",
  textColor: "white"
});
let O = !1;
const st = ({ name: e, payload: t }) => {
  F.log("Event received:", t ? { name: e, payload: t } : { name: e });
};
function Ze(e) {
  O !== e && (O = e, e ? Ht(st) : at(st));
}
function Gt(...e) {
  O && F.log(...e);
}
class T {
  constructor() {
    c(this, "listeners", /* @__PURE__ */ new Map());
    c(this, "listenersCount", 0);
    c(this, "subscribeListeners", []);
  }
  /**
   * Removes all event listeners.
   */
  clear() {
    this.listeners.clear(), this.subscribeListeners = [];
  }
  /**
   * Returns count of bound listeners.
   */
  get count() {
    return this.listenersCount + this.subscribeListeners.length;
  }
  emit(t, ...s) {
    this.subscribeListeners.forEach((r) => r({
      event: t,
      args: s
    })), (this.listeners.get(t) || []).forEach(([r, i]) => {
      r(...s), i && this.off(t, r);
    });
  }
  /**
   * Adds new event listener.
   * @param event - event name.
   * @param listener - event listener.
   * @param once - should listener be called only once.
   * @returns Function to remove bound event listener.
   */
  on(t, s, n) {
    let r = this.listeners.get(t);
    return r || this.listeners.set(t, r = []), r.push([s, n]), this.listenersCount += 1, () => this.off(t, s);
  }
  /**
   * Removes event listener. In case, specified listener was bound several times, it removes
   * only a single one.
   * @param event - event name.
   * @param listener - event listener.
   */
  off(t, s) {
    const n = this.listeners.get(t) || [];
    for (let r = 0; r < n.length; r += 1)
      if (s === n[r][0]) {
        n.splice(r, 1), this.listenersCount -= 1;
        return;
      }
  }
  /**
   * Adds a new event listener for all events.
   * @param listener - event listener.
   * @returns Function to remove event listener.
   */
  subscribe(t) {
    return this.subscribeListeners.push(t), () => this.unsubscribe(t);
  }
  /**
   * Removes global event listener. In case, specified listener was bound several times, it removes
   * only a single one.
   * @param listener - event listener.
   */
  unsubscribe(t) {
    for (let s = 0; s < this.subscribeListeners.length; s += 1)
      if (this.subscribeListeners[s] === t) {
        this.subscribeListeners.splice(s, 1);
        return;
      }
  }
}
function G(e, t, s) {
  return window.addEventListener(e, t, s), () => window.removeEventListener(e, t, s);
}
function J(...e) {
  let t = !1;
  const s = e.flat(1);
  return [
    (n) => !t && s.push(n),
    () => {
      t || (t = !0, s.forEach((n) => n()));
    },
    t
  ];
}
class D extends Error {
  constructor(t, s, n) {
    super(s, { cause: n }), this.type = t, Object.setPrototypeOf(this, D.prototype);
  }
}
function f(e, t, s) {
  return new D(e, t, s);
}
const jt = "ERR_METHOD_UNSUPPORTED", zt = "ERR_METHOD_PARAMETER_UNSUPPORTED", Ft = "ERR_UNKNOWN_ENV", Jt = "ERR_INVOKE_CUSTOM_METHOD_RESPONSE", Qt = "ERR_TIMED_OUT", Yt = "ERR_UNEXPECTED_TYPE", ct = "ERR_PARSE", Zt = "ERR_NAVIGATION_LIST_EMPTY", Kt = "ERR_NAVIGATION_CURSOR_INVALID", Ke = "ERR_NAVIGATION_ITEM_INVALID", Xe = "ERR_SSR_INIT", Xt = "ERR_INVALID_PATH_BASE";
function E() {
  return f(Yt, "Value has unexpected type");
}
class M {
  constructor(t, s, n) {
    this.parser = t, this.isOptional = s, this.type = n;
  }
  /**
   * Attempts to parse passed value
   * @param value - value to parse.
   * @throws {SDKError} ERR_PARSE
   * @see ERR_PARSE
   */
  parse(t) {
    if (!(this.isOptional && t === void 0))
      try {
        return this.parser(t);
      } catch (s) {
        throw f(
          ct,
          `Unable to parse value${this.type ? ` as ${this.type}` : ""}`,
          s
        );
      }
  }
  optional() {
    return this.isOptional = !0, this;
  }
}
function x(e, t) {
  return () => new M(e, !1, t);
}
const w = x((e) => {
  if (typeof e == "boolean")
    return e;
  const t = String(e);
  if (t === "1" || t === "true")
    return !0;
  if (t === "0" || t === "false")
    return !1;
  throw E();
}, "boolean");
function ht(e, t) {
  const s = {};
  for (const n in e) {
    const r = e[n];
    if (!r)
      continue;
    let i, o;
    if (typeof r == "function" || "parse" in r)
      i = n, o = typeof r == "function" ? r : r.parse.bind(r);
    else {
      const { type: a } = r;
      i = r.from || n, o = typeof a == "function" ? a : a.parse.bind(a);
    }
    try {
      const a = o(t(i));
      a !== void 0 && (s[n] = a);
    } catch (a) {
      throw f(ct, `Unable to parse field "${n}"`, a);
    }
  }
  return s;
}
function pt(e) {
  let t = e;
  if (typeof t == "string" && (t = JSON.parse(t)), typeof t != "object" || t === null || Array.isArray(t))
    throw E();
  return t;
}
function g(e, t) {
  return new M((s) => {
    const n = pt(s);
    return ht(e, (r) => n[r]);
  }, !1, t);
}
const y = x((e) => {
  if (typeof e == "number")
    return e;
  if (typeof e == "string") {
    const t = Number(e);
    if (!Number.isNaN(t))
      return t;
  }
  throw E();
}, "number"), p = x((e) => {
  if (typeof e == "string" || typeof e == "number")
    return e.toString();
  throw E();
}, "string");
function ut(e) {
  return g({
    eventType: p(),
    eventData: (t) => t
  }).parse(e);
}
function te() {
  ["TelegramGameProxy_receiveEvent", "TelegramGameProxy", "Telegram"].forEach((e) => {
    delete window[e];
  });
}
function j(e, t) {
  window.dispatchEvent(new MessageEvent("message", {
    data: JSON.stringify({ eventType: e, eventData: t }),
    // We specify window.parent to imitate the case, the parent iframe sent us this event.
    source: window.parent
  }));
}
function ee() {
  [
    ["TelegramGameProxy_receiveEvent"],
    // Windows Phone.
    ["TelegramGameProxy", "receiveEvent"],
    // Desktop.
    ["Telegram", "WebView", "receiveEvent"]
    // Android and iOS.
  ].forEach((e) => {
    let t = window;
    e.forEach((s, n, r) => {
      if (n === r.length - 1) {
        t[s] = j;
        return;
      }
      s in t || (t[s] = {}), t = t[s];
    });
  });
}
const se = {
  clipboard_text_received: g({
    req_id: p(),
    data: (e) => e === null ? e : p().optional().parse(e)
  }),
  custom_method_invoked: g({
    req_id: p(),
    result: (e) => e,
    error: p().optional()
  }),
  popup_closed: {
    parse(e) {
      return g({
        button_id: (t) => t == null ? void 0 : p().parse(t)
      }).parse(e ?? {});
    }
  },
  viewport_changed: g({
    height: y(),
    width: (e) => e == null ? window.innerWidth : y().parse(e),
    is_state_stable: w(),
    is_expanded: w()
  })
};
function ne() {
  const e = new T(), t = new T();
  t.subscribe((n) => {
    e.emit("event", { name: n.event, payload: n.args[0] });
  }), ee();
  const [, s] = J(
    // Don't forget to remove created handlers.
    te,
    // Add "resize" event listener to make sure, we always have fresh viewport information.
    // Desktop version of Telegram is sometimes not sending the viewport_changed
    // event. For example, when the MainButton is shown. That's why we should
    // add our own listener to make sure, viewport information is always fresh.
    // Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/10
    G("resize", () => {
      t.emit("viewport_changed", {
        width: window.innerWidth,
        height: window.innerHeight,
        is_state_stable: !0,
        is_expanded: !0
      });
    }),
    // Add listener, which handles events sent from the Telegram web application and also events
    // generated by the local emitEvent function.
    G("message", (n) => {
      if (n.source !== window.parent)
        return;
      let r;
      try {
        r = ut(n.data);
      } catch {
        return;
      }
      const { eventType: i, eventData: o } = r, a = se[i];
      try {
        const h = a ? a.parse(o) : o;
        t.emit(...h ? [i, h] : [i]);
      } catch (h) {
        F.error(
          `An error occurred processing the "${i}" event from the Telegram application.
Please, file an issue here:
https://github.com/Telegram-Mini-Apps/tma.js/issues/new/choose`,
          r,
          h
        );
      }
    }),
    // Clear emitters.
    () => e.clear(),
    () => t.clear()
  );
  return [{
    on: t.on.bind(t),
    off: t.off.bind(t),
    subscribe(n) {
      return e.on("event", n);
    },
    unsubscribe(n) {
      e.off("event", n);
    },
    get count() {
      return t.count + e.count;
    }
  }, s];
}
const [re, ie] = ot(
  (e) => {
    const [t, s] = ne(), n = t.off.bind(t);
    return t.off = (r, i) => {
      const { count: o } = t;
      n(r, i), o && !t.count && e();
    }, [t, s];
  },
  ([, e]) => e()
);
function V() {
  return re()[0];
}
function L(e, t) {
  V().off(e, t);
}
function b(e, t, s) {
  return V().on(e, t, s);
}
function q(e) {
  return typeof e == "object" && e !== null && !Array.isArray(e);
}
function oe(e, t) {
  const s = e.split("."), n = t.split("."), r = Math.max(s.length, n.length);
  for (let i = 0; i < r; i += 1) {
    const o = parseInt(s[i] || "0", 10), a = parseInt(n[i] || "0", 10);
    if (o !== a)
      return o > a ? 1 : -1;
  }
  return 0;
}
function _(e, t) {
  return oe(e, t) <= 0;
}
function v(e, t, s) {
  if (typeof s == "string") {
    if (e === "web_app_open_link") {
      if (t === "try_instant_view")
        return _("6.4", s);
      if (t === "try_browser")
        return _("7.6", s);
    }
    if (e === "web_app_set_header_color" && t === "color")
      return _("6.9", s);
    if (e === "web_app_close" && t === "return_back")
      return _("7.6", s);
  }
  switch (e) {
    case "web_app_open_tg_link":
    case "web_app_open_invoice":
    case "web_app_setup_back_button":
    case "web_app_set_background_color":
    case "web_app_set_header_color":
    case "web_app_trigger_haptic_feedback":
      return _("6.1", t);
    case "web_app_open_popup":
      return _("6.2", t);
    case "web_app_close_scan_qr_popup":
    case "web_app_open_scan_qr_popup":
    case "web_app_read_text_from_clipboard":
      return _("6.4", t);
    case "web_app_switch_inline_query":
      return _("6.7", t);
    case "web_app_invoke_custom_method":
    case "web_app_request_write_access":
    case "web_app_request_phone":
      return _("6.9", t);
    case "web_app_setup_settings_button":
      return _("6.10", t);
    case "web_app_biometry_get_info":
    case "web_app_biometry_open_settings":
    case "web_app_biometry_request_access":
    case "web_app_biometry_request_auth":
    case "web_app_biometry_update_token":
      return _("7.2", t);
    default:
      return [
        "iframe_ready",
        "iframe_will_reload",
        "web_app_close",
        "web_app_data_send",
        "web_app_expand",
        "web_app_open_link",
        "web_app_ready",
        "web_app_request_theme",
        "web_app_request_viewport",
        "web_app_setup_main_button",
        "web_app_setup_closing_behavior"
      ].includes(e);
  }
}
function lt(e) {
  return "external" in e && q(e.external) && "notify" in e.external && typeof e.external.notify == "function";
}
function dt(e) {
  return "TelegramWebviewProxy" in e && q(e.TelegramWebviewProxy) && "postEvent" in e.TelegramWebviewProxy && typeof e.TelegramWebviewProxy.postEvent == "function";
}
function _t() {
  try {
    return window.self !== window.top;
  } catch {
    return !0;
  }
}
const ae = "https://web.telegram.org";
let ft = ae;
function ts(e) {
  ft = e;
}
function ce() {
  return ft;
}
function R(e, t, s) {
  let n = {}, r;
  if (!t && !s ? n = {} : t && s ? (n = s, r = t) : t && ("targetOrigin" in t ? n = t : r = t), Gt("Posting event:", r ? { event: e, data: r } : { event: e }), _t())
    return window.parent.postMessage(
      JSON.stringify({ eventType: e, eventData: r }),
      n.targetOrigin || ce()
    );
  if (lt(window)) {
    window.external.notify(JSON.stringify({ eventType: e, eventData: r }));
    return;
  }
  if (dt(window)) {
    window.TelegramWebviewProxy.postEvent(e, JSON.stringify(r));
    return;
  }
  throw f(
    Ft,
    "Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment."
  );
}
function he(e) {
  return (t, s) => {
    if (!v(t, e))
      throw f(jt, `Method "${t}" is unsupported in Mini Apps version ${e}`);
    if (q(s) && t === "web_app_set_header_color" && "color" in s && !v(t, "color", e))
      throw f(
        zt,
        `Parameter "color" of "${t}" method is unsupported in Mini Apps version ${e}`
      );
    return R(t, s);
  };
}
function gt(e) {
  return ({ req_id: t }) => t === e;
}
function bt(e) {
  return f(Qt, `Timeout reached: ${e}ms`);
}
function wt(e, t) {
  return Promise.race([
    typeof e == "function" ? e() : e,
    new Promise((s, n) => {
      setTimeout(() => {
        n(bt(t));
      }, t);
    })
  ]);
}
async function d(e) {
  let t;
  const s = new Promise((a) => t = a), { event: n, capture: r, timeout: i } = e, [, o] = J(
    // We need to iterate over all tracked events, and create their event listeners.
    (Array.isArray(n) ? n : [n]).map((a) => b(a, (h) => {
      (!r || (Array.isArray(n) ? r({
        event: a,
        payload: h
      }) : r(h))) && t(h);
    }))
  );
  try {
    return (e.postEvent || R)(e.method, e.params), await (i ? wt(s, i) : s);
  } finally {
    o();
  }
}
async function S(e, t, s, n = {}) {
  const {
    result: r,
    error: i
  } = await d({
    ...n,
    method: "web_app_invoke_custom_method",
    event: "custom_method_invoked",
    params: {
      method: e,
      params: t,
      req_id: s
    },
    capture: gt(s)
  });
  if (i)
    throw f(Jt, i);
  return r;
}
function z(...e) {
  return e.map((t) => {
    if (typeof t == "string")
      return t;
    if (q(t))
      return z(Object.entries(t).map((s) => s[1] && s[0]));
    if (Array.isArray(t))
      return z(...t);
  }).filter(Boolean).join(" ");
}
function es(...e) {
  return e.reduce((t, s) => (q(s) && Object.entries(s).forEach(([n, r]) => {
    const i = z(t[n], r);
    i.length && (t[n] = i);
  }), t), {});
}
function Q(e) {
  return /^#[\da-f]{6}$/i.test(e);
}
function pe(e) {
  return /^#[\da-f]{3}$/i.test(e);
}
function mt(e) {
  const t = e.replace(/\s/g, "").toLowerCase();
  if (Q(t))
    return t;
  if (pe(t)) {
    let n = "#";
    for (let r = 0; r < 3; r += 1)
      n += t[1 + r].repeat(2);
    return n;
  }
  const s = t.match(/^rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)$/) || t.match(/^rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),\d{1,3}\)$/);
  if (!s)
    throw new Error(`Value "${e}" does not satisfy any of known RGB formats.`);
  return s.slice(1).reduce((n, r) => {
    const i = parseInt(r, 10).toString(16);
    return n + (i.length === 1 ? "0" : "") + i;
  }, "#");
}
function yt(e) {
  const t = mt(e);
  return Math.sqrt(
    [0.299, 0.587, 0.114].reduce((s, n, r) => {
      const i = parseInt(t.slice(1 + r * 2, 1 + (r + 1) * 2), 16);
      return s + i * i * n;
    }, 0)
  ) < 120;
}
class ue {
  constructor(t) {
    c(this, "ee", new T());
    /**
     * Adds new event listener.
     */
    c(this, "on", this.ee.on.bind(this.ee));
    /**
     * Removes event listener.
     */
    c(this, "off", this.ee.off.bind(this.ee));
    this.state = t;
  }
  /**
   * Clones current state and returns its copy.
   */
  clone() {
    return { ...this.state };
  }
  set(t, s) {
    Object.entries(typeof t == "string" ? { [t]: s } : t).reduce((r, [i, o]) => this.state[i] === o || o === void 0 ? r : (this.state[i] = o, this.ee.emit(`change:${i}`, o), !0), !1) && this.ee.emit("change", this.state);
  }
  /**
   * Returns value by specified key.
   * @param key - state key.
   */
  get(t) {
    return this.state[t];
  }
}
class Y {
  constructor(t) {
    c(this, "state");
    /**
     * Gets the state value.
     */
    c(this, "get");
    /**
     * Sets the state value.
     */
    c(this, "set");
    /**
     * Clones the current state.
     */
    c(this, "clone");
    this.state = new ue(t), this.set = this.state.set.bind(this.state), this.get = this.state.get.bind(this.state), this.clone = this.state.clone.bind(this.state);
  }
}
function vt(e, t) {
  return (s) => v(t[s], e);
}
class Z extends Y {
  constructor(s, n, r) {
    super(s);
    /**
     * @returns True, if specified method is supported by the current component.
     */
    c(this, "supports");
    this.supports = vt(n, r);
  }
}
class le extends Z {
  constructor(s, n, r) {
    super({ isVisible: s }, n, {
      show: "web_app_setup_back_button",
      hide: "web_app_setup_back_button"
    });
    /**
     * Adds a new event listener.
     * @param event - event to listen.
     * @param listener - listener to add.
     */
    c(this, "on", (s, n) => s === "click" ? b("back_button_pressed", n) : this.state.on(s, n));
    /**
     * Removes the event listener.
     * @param event - event to listen.
     * @param listener - listener to remove.
     */
    c(this, "off", (s, n) => s === "click" ? L("back_button_pressed", n) : this.state.off(s, n));
    this.postEvent = r;
  }
  set isVisible(s) {
    this.set("isVisible", s), this.postEvent("web_app_setup_back_button", { is_visible: s });
  }
  /**
   * True if BackButton is currently visible.
   */
  get isVisible() {
    return this.get("isVisible");
  }
  /**
   * Hides the BackButton.
   */
  hide() {
    this.isVisible = !1;
  }
  /**
   * Shows the BackButton.
   */
  show() {
    this.isVisible = !0;
  }
}
const Et = x((e) => e instanceof Date ? e : new Date(y().parse(e) * 1e3), "Date");
function K(e, t) {
  return new M((s) => {
    if (typeof s != "string" && !(s instanceof URLSearchParams))
      throw E();
    const n = typeof s == "string" ? new URLSearchParams(s) : s;
    return ht(e, (r) => {
      const i = n.get(r);
      return i === null ? void 0 : i;
    });
  }, !1, t);
}
const de = g({
  id: y(),
  type: p(),
  title: p(),
  photoUrl: {
    type: p().optional(),
    from: "photo_url"
  },
  username: p().optional()
}, "Chat").optional(), nt = g({
  addedToAttachmentMenu: {
    type: w().optional(),
    from: "added_to_attachment_menu"
  },
  allowsWriteToPm: {
    type: w().optional(),
    from: "allows_write_to_pm"
  },
  firstName: {
    type: p(),
    from: "first_name"
  },
  id: y(),
  isBot: {
    type: w().optional(),
    from: "is_bot"
  },
  isPremium: {
    type: w().optional(),
    from: "is_premium"
  },
  languageCode: {
    type: p().optional(),
    from: "language_code"
  },
  lastName: {
    type: p().optional(),
    from: "last_name"
  },
  photoUrl: {
    type: p().optional(),
    from: "photo_url"
  },
  username: p().optional()
}, "User").optional();
function xt() {
  return K({
    authDate: {
      type: Et(),
      from: "auth_date"
    },
    canSendAfter: {
      type: y().optional(),
      from: "can_send_after"
    },
    chat: de,
    chatInstance: {
      type: p().optional(),
      from: "chat_instance"
    },
    chatType: {
      type: p().optional(),
      from: "chat_type"
    },
    hash: p(),
    queryId: {
      type: p().optional(),
      from: "query_id"
    },
    receiver: nt,
    startParam: {
      type: p().optional(),
      from: "start_param"
    },
    user: nt
  }, "InitData");
}
const _e = x((e) => mt(p().parse(e)), "rgb");
function fe(e) {
  return e.replace(/_[a-z]/g, (t) => t[1].toUpperCase());
}
function ge(e) {
  return e.replace(/[A-Z]/g, (t) => `_${t.toLowerCase()}`);
}
const Pt = x(
  (e) => {
    const t = _e().optional();
    return Object.entries(pt(e)).reduce((s, [n, r]) => (s[fe(n)] = t.parse(r), s), {});
  },
  "ThemeParams"
);
function X(e) {
  return K({
    botInline: {
      type: w().optional(),
      from: "tgWebAppBotInline"
    },
    initData: {
      type: xt().optional(),
      from: "tgWebAppData"
    },
    initDataRaw: {
      type: p().optional(),
      from: "tgWebAppData"
    },
    platform: {
      type: p(),
      from: "tgWebAppPlatform"
    },
    showSettings: {
      type: w().optional(),
      from: "tgWebAppShowSettings"
    },
    startParam: {
      type: p().optional(),
      from: "tgWebAppStartParam"
    },
    themeParams: {
      type: Pt(),
      from: "tgWebAppThemeParams"
    },
    version: {
      type: p(),
      from: "tgWebAppVersion"
    }
  }).parse(e);
}
function St(e) {
  return X(
    e.replace(/^[^?#]*[?#]/, "").replace(/[?#]/g, "&")
  );
}
function be() {
  return St(window.location.href);
}
function Ct() {
  return performance.getEntriesByType("navigation")[0];
}
function we() {
  const e = Ct();
  if (!e)
    throw new Error("Unable to get first navigation entry.");
  return St(e.name);
}
function Tt(e) {
  return `tma.js/${e.replace(/[A-Z]/g, (t) => `-${t.toLowerCase()}`)}`;
}
function Rt(e, t) {
  sessionStorage.setItem(Tt(e), JSON.stringify(t));
}
function At(e) {
  const t = sessionStorage.getItem(Tt(e));
  try {
    return t ? JSON.parse(t) : void 0;
  } catch {
  }
}
function me() {
  return X(At("launchParams") || "");
}
function It(e) {
  return JSON.stringify(
    Object.fromEntries(
      Object.entries(e).map(([t, s]) => [ge(t), s])
    )
  );
}
function ye(e) {
  const {
    initDataRaw: t,
    themeParams: s,
    platform: n,
    version: r,
    showSettings: i,
    startParam: o,
    botInline: a
  } = e, h = new URLSearchParams();
  return h.set("tgWebAppPlatform", n), h.set("tgWebAppThemeParams", It(s)), h.set("tgWebAppVersion", r), t && h.set("tgWebAppData", t), o && h.set("tgWebAppStartParam", o), typeof i == "boolean" && h.set("tgWebAppShowSettings", i ? "1" : "0"), typeof a == "boolean" && h.set("tgWebAppBotInline", a ? "1" : "0"), h.toString();
}
function qt(e) {
  Rt("launchParams", ye(e));
}
function ve() {
  for (const e of [
    // Try to retrieve launch parameters from the current location. This method can return
    // nothing in case, location was changed and then page was reloaded.
    be,
    // Then, try using the lower level API - window.performance.
    we,
    // Finally, try to extract launch parameters from the session storage.
    me
  ])
    try {
      const t = e();
      return qt(t), t;
    } catch {
    }
  throw new Error("Unable to retrieve launch parameters from any known source.");
}
function kt() {
  const e = Ct();
  return !!(e && e.type === "reload");
}
function Ee() {
  let e = 0;
  return () => (e += 1).toString();
}
const [xe] = ot(Ee);
function l(e, t) {
  return () => {
    const s = ve(), n = {
      ...s,
      postEvent: he(s.version),
      createRequestId: xe()
    };
    if (typeof e == "function")
      return e(n);
    const [r, i, o] = J(), a = t({
      ...n,
      // State should only be passed only in case, current page was reloaded. If we don't add
      // this check, state restoration will work improperly in the web version of Telegram,
      // when we are always working in the same "session" (tab).
      state: kt() ? At(e) : void 0,
      addCleanup: r
    }), h = (u) => (o || r(
      u.on("change", (Bt) => {
        Rt(e, Bt);
      })
    ), u);
    return [
      a instanceof Promise ? a.then(h) : h(a),
      i
    ];
  };
}
const ss = l("backButton", ({
  postEvent: e,
  version: t,
  state: s = { isVisible: !1 }
}) => new le(s.isVisible, t, e));
class k extends Z {
  constructor() {
    super(...arguments);
    /**
     * Adds a new event listener.
     */
    c(this, "on", this.state.on.bind(this.state));
    /**
     * Removes the event listener.
     */
    c(this, "off", this.state.off.bind(this.state));
  }
}
function Nt(e) {
  const t = e.available ? e : {
    available: !1,
    device_id: "",
    token_saved: !1,
    access_requested: !1,
    access_granted: !1,
    type: ""
  };
  return {
    available: !0,
    type: t.type,
    deviceId: t.device_id,
    tokenSaved: t.token_saved,
    accessRequested: t.access_requested,
    accessGranted: t.access_granted
  };
}
class Pe extends k {
  constructor({ postEvent: s, version: n, ...r }) {
    super(r, n, {
      auth: "web_app_biometry_request_auth",
      openSettings: "web_app_biometry_open_settings",
      requestAccess: "web_app_biometry_request_access",
      updateToken: "web_app_biometry_update_token"
    });
    c(this, "postEvent");
    c(this, "authPromise");
    c(this, "accessPromise");
    this.postEvent = s;
  }
  /**
   * Shows whether biometry is available.
   */
  get available() {
    return this.get("available");
  }
  /**
   * Shows whether permission to use biometrics has been granted.
   */
  get accessGranted() {
    return this.get("accessGranted");
  }
  /**
   * Shows whether if permission to use biometrics has been requested.
   */
  get accessRequested() {
    return this.get("accessRequested");
  }
  /**
   * Authenticates the user using biometrics.
   * @param options - method options.
   * @since 7.2
   * @returns Token from the local secure storage, if authentication was successful.
   */
  async authenticate({
    reason: s,
    ...n
  }) {
    return this.authPromise || (this.authPromise = d({
      ...n,
      method: "web_app_biometry_request_auth",
      event: "biometry_auth_requested",
      postEvent: this.postEvent,
      params: {
        // TODO: Check if reason is empty works fine.
        reason: (s || "").trim()
      }
    }).then(({ token: r }) => r).finally(() => this.authPromise = void 0)), this.authPromise;
  }
  /**
   * A unique device identifier that can be used to match the token to the device.
   */
  get deviceId() {
    return this.get("deviceId");
  }
  /**
   * Opens the biometric access settings for bots. Useful when you need to request biometrics
   * access to users who haven't granted it yet.
   *
   * _Note that this method can be called only in response to user interaction with the Mini App
   * interface (e.g. a click inside the Mini App or on the main button)_.
   * @since 7.2
   */
  openSettings() {
    this.postEvent("web_app_biometry_open_settings");
  }
  /**
   * Requests permission to use biometrics.
   * @since 7.2
   * @returns Promise with true, if access was granted.
   */
  requestAccess({ reason: s, ...n } = {}) {
    return this.accessPromise || (this.accessPromise = d({
      ...n,
      postEvent: this.postEvent,
      method: "web_app_biometry_request_access",
      event: "biometry_info_received",
      params: { reason: s || "" }
    }).then((r) => {
      const i = Nt(r);
      return this.set(i), i.accessGranted;
    }).finally(() => this.accessPromise = void 0)), this.accessPromise;
  }
  /**
   * The type of biometrics currently available on the device.
   */
  get biometryType() {
    return this.get("biometryType");
  }
  /**
   * Shows whether token was saved previously in the local secure storage.
   */
  get tokenSaved() {
    return this.get("tokenSaved");
  }
  /**
   * Updates the biometric token in a secure storage on the device.
   * @returns Promise with `true`, if token was updated.
   */
  async updateToken({ token: s, ...n } = {}) {
    return ["removed", "updated"].includes(
      (await d({
        ...n,
        postEvent: this.postEvent,
        method: "web_app_biometry_update_token",
        event: "biometry_token_updated",
        params: { token: s || "" }
      })).status
    );
  }
}
async function Se(e) {
  return Nt(
    await d({
      ...e || {},
      method: "web_app_biometry_get_info",
      event: "biometry_info_received"
    })
  );
}
const ns = l(
  "biometryManager",
  async ({ postEvent: e, version: t, state: s }) => new Pe({
    ...s || v("web_app_biometry_get_info", t) ? s || await Se({ timeout: 1e3 }) : {
      available: !1,
      accessGranted: !1,
      accessRequested: !1,
      tokenSaved: !1,
      deviceId: ""
    },
    version: t,
    postEvent: e
  })
);
class tt extends Y {
  constructor() {
    super(...arguments);
    /**
     * Adds a new event listener.
     */
    c(this, "on", this.state.on.bind(this.state));
    /**
     * Removes the event listener.
     */
    c(this, "off", this.state.off.bind(this.state));
  }
}
class Ce extends tt {
  constructor(t, s) {
    super({ isConfirmationNeeded: t }), this.postEvent = s;
  }
  set isConfirmationNeeded(t) {
    this.set("isConfirmationNeeded", t), this.postEvent("web_app_setup_closing_behavior", { need_confirmation: t });
  }
  /**
   * True, if the confirmation dialog should be shown while the user is trying to close
   * the Mini App.
   */
  get isConfirmationNeeded() {
    return this.get("isConfirmationNeeded");
  }
  /**
   * Disables the confirmation dialog when closing the Mini App.
   */
  disableConfirmation() {
    this.isConfirmationNeeded = !1;
  }
  /**
   * Enables the confirmation dialog when closing the Mini App.
   */
  enableConfirmation() {
    this.isConfirmationNeeded = !0;
  }
}
const rs = l(
  "closingBehavior",
  ({
    postEvent: e,
    state: t = { isConfirmationNeeded: !1 }
  }) => new Ce(t.isConfirmationNeeded, e)
);
class et {
  constructor(t, s) {
    /**
     * @returns True, if specified method is supported by the current component.
     */
    c(this, "supports");
    this.supports = vt(t, s);
  }
}
function Te(e) {
  if (Array.isArray(e))
    return e;
  if (typeof e == "string")
    try {
      const t = JSON.parse(e);
      if (Array.isArray(t))
        return t;
    } catch {
    }
  throw E();
}
class Re extends M {
  constructor(s, n, r) {
    super(Te, n, r);
    c(this, "itemParser");
    this.itemParser = typeof s == "function" ? s : s.parse.bind(s);
  }
  /**
   * Attempts to parse passed value
   * @param value - value to parse.
   * @throws {SDKError} ERR_PARSE
   * @see ERR_PARSE
   */
  parse(s) {
    const n = super.parse(s);
    return n === void 0 ? n : n.map(this.itemParser);
  }
  of(s) {
    return this.itemParser = typeof s == "function" ? s : s.parse.bind(s), this;
  }
}
function Ae(e) {
  return new Re((t) => t, !1, e);
}
function rt(e, t) {
  return Object.fromEntries(e.map((s) => [s, t]));
}
class Ie extends et {
  constructor(t, s, n) {
    super(t, {
      delete: "web_app_invoke_custom_method",
      get: "web_app_invoke_custom_method",
      getKeys: "web_app_invoke_custom_method",
      set: "web_app_invoke_custom_method"
    }), this.createRequestId = s, this.postEvent = n;
  }
  /**
   * Deletes specified key or keys from the cloud storage.
   * @param keyOrKeys - key or keys to delete.
   * @param options - request execution options.
   */
  async delete(t, s = {}) {
    const n = Array.isArray(t) ? t : [t];
    n.length && await S(
      "deleteStorageValues",
      { keys: n },
      this.createRequestId(),
      { ...s, postEvent: this.postEvent }
    );
  }
  /**
   * Returns list of all keys presented in the cloud storage.
   * @param options - request execution options.
   */
  async getKeys(t = {}) {
    return Ae().of(p()).parse(
      await S(
        "getStorageKeys",
        {},
        this.createRequestId(),
        { ...t, postEvent: this.postEvent }
      )
    );
  }
  async get(t, s = {}) {
    const n = Array.isArray(t) ? t : [t];
    if (!n.length)
      return rt(n, "");
    const r = await S(
      "getStorageValues",
      { keys: n },
      this.createRequestId(),
      { ...s, postEvent: this.postEvent }
    ), i = g(rt(n, p()), "CloudStorageData").parse(r);
    return Array.isArray(t) ? i : i[t];
  }
  /**
   * Saves specified value by key.
   * @param key - storage key.
   * @param value - storage value.
   * @param options - request execution options.
   */
  async set(t, s, n = {}) {
    await S(
      "saveStorageValue",
      { key: t, value: s },
      this.createRequestId(),
      { ...n, postEvent: this.postEvent }
    );
  }
}
const is = l(
  ({ createRequestId: e, postEvent: t, version: s }) => new Ie(s, e, t)
);
class qe extends et {
  constructor(t, s) {
    super(t, {
      impactOccurred: "web_app_trigger_haptic_feedback",
      notificationOccurred: "web_app_trigger_haptic_feedback",
      selectionChanged: "web_app_trigger_haptic_feedback"
    }), this.postEvent = s;
  }
  /**
   * A method tells that an impact occurred. The Telegram app may play the
   * appropriate haptics based on style value passed.
   * @param style - impact style.
   */
  impactOccurred(t) {
    this.postEvent("web_app_trigger_haptic_feedback", {
      type: "impact",
      impact_style: t
    });
  }
  /**
   * A method tells that a task or action has succeeded, failed, or produced
   * a warning. The Telegram app may play the appropriate haptics based on
   * type value passed.
   * @param type - notification type.
   */
  notificationOccurred(t) {
    this.postEvent("web_app_trigger_haptic_feedback", {
      type: "notification",
      notification_type: t
    });
  }
  /**
   * A method tells that the user has changed a selection. The Telegram app
   * may play the appropriate haptics.
   *
   * Do not use this feedback when the user makes or confirms a selection;
   * use it only when the selection changes.
   */
  selectionChanged() {
    this.postEvent("web_app_trigger_haptic_feedback", { type: "selection_change" });
  }
}
const os = l(
  ({ version: e, postEvent: t }) => new qe(e, t)
);
class ke {
  constructor(t) {
    this.initData = t;
  }
  /**
   * @see InitDataParsed.authDate
   */
  get authDate() {
    return this.initData.authDate;
  }
  /**
   * @see InitDataParsed.canSendAfter
   */
  get canSendAfter() {
    return this.initData.canSendAfter;
  }
  /**
   * Date after which it is allowed to call
   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.
   */
  get canSendAfterDate() {
    const { canSendAfter: t } = this;
    return t ? new Date(this.authDate.getTime() + t * 1e3) : void 0;
  }
  /**
   * @see InitDataParsed.chat
   */
  get chat() {
    return this.initData.chat;
  }
  /**
   * @see InitDataParsed.chatType
   */
  get chatType() {
    return this.initData.chatType;
  }
  /**
   * @see InitDataParsed.chatInstance
   */
  get chatInstance() {
    return this.initData.chatInstance;
  }
  /**
   * @see InitDataParsed.hash
   */
  get hash() {
    return this.initData.hash;
  }
  /**
   * @see InitDataParsed.queryId
   */
  get queryId() {
    return this.initData.queryId;
  }
  /**
   * @see InitDataParsed.receiver
   */
  get receiver() {
    return this.initData.receiver;
  }
  /**
   * @see InitDataParsed.startParam
   */
  get startParam() {
    return this.initData.startParam;
  }
  /**
   * @see InitDataParsed.user
   */
  get user() {
    return this.initData.user;
  }
}
const as = l(
  ({ initData: e }) => e ? new ke(e) : void 0
);
function cs(e) {
  return xt().parse(e);
}
class Ne extends k {
  constructor(t, s, n) {
    super({ isOpened: t }, s, { open: "web_app_open_invoice" }), this.postEvent = n;
  }
  set isOpened(t) {
    this.set("isOpened", t);
  }
  /**
   * True if invoice is currently opened.
   */
  get isOpened() {
    return this.get("isOpened");
  }
  async open(t, s) {
    if (this.isOpened)
      throw new Error("Invoice is already opened");
    let n;
    if (!s)
      n = t;
    else {
      const { hostname: r, pathname: i } = new URL(t, window.location.href);
      if (r !== "t.me")
        throw new Error(`Incorrect hostname: ${r}`);
      const o = i.match(/^\/(\$|invoice\/)([A-Za-z0-9\-_=]+)$/);
      if (!o)
        throw new Error('Link pathname has incorrect format. Expected to receive "/invoice/{slug}" or "/${slug}"');
      [, , n] = o;
    }
    this.isOpened = !0;
    try {
      return (await d({
        method: "web_app_open_invoice",
        event: "invoice_closed",
        params: { slug: n },
        postEvent: this.postEvent,
        capture(i) {
          return n === i.slug;
        }
      })).status;
    } finally {
      this.isOpened = !1;
    }
  }
}
const hs = l(
  ({ version: e, postEvent: t }) => new Ne(!1, e, t)
);
class De extends Y {
  constructor({ postEvent: s, ...n }) {
    super(n);
    c(this, "postEvent");
    /**
     * Adds a new event listener.
     * @param event - event to listen.
     * @param listener - listener to add.
     */
    c(this, "on", (s, n) => s === "click" ? b("main_button_pressed", n) : this.state.on(s, n));
    /**
     * Removes the event listener.
     * @param event - event to listen.
     * @param listener - listener to remove.
     */
    c(this, "off", (s, n) => s === "click" ? L("main_button_pressed", n) : this.state.off(s, n));
    this.postEvent = s;
  }
  /**
   * The MainButton background color.
   */
  get bgColor() {
    return this.get("bgColor");
  }
  /**
   * Sends current local state to the Telegram application.
   */
  commit() {
    this.text !== "" && this.postEvent("web_app_setup_main_button", {
      is_visible: this.isVisible,
      is_active: this.isEnabled,
      is_progress_visible: this.isLoaderVisible,
      text: this.text,
      color: this.bgColor,
      text_color: this.textColor
    });
  }
  /**
   * Disables the MainButton.
   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1
   */
  disable() {
    return this.isEnabled = !1, this;
  }
  /**
   * Enables the MainButton.
   */
  enable() {
    return this.isEnabled = !0, this;
  }
  /**
   * Hides the MainButton.
   */
  hide() {
    return this.isVisible = !1, this;
  }
  /**
   * Hides the MainButton loading indicator.
   */
  hideLoader() {
    return this.isLoaderVisible = !1, this;
  }
  set isEnabled(s) {
    this.setParams({ isEnabled: s });
  }
  /**
   * True if the MainButton is enabled.
   */
  get isEnabled() {
    return this.get("isEnabled");
  }
  set isLoaderVisible(s) {
    this.setParams({ isLoaderVisible: s });
  }
  /**
   * True if the MainButton loader is visible.
   */
  get isLoaderVisible() {
    return this.get("isLoaderVisible");
  }
  set isVisible(s) {
    this.setParams({ isVisible: s });
  }
  /**
   * True if the MainButton is visible.
   */
  get isVisible() {
    return this.get("isVisible");
  }
  /**
   * Shows the MainButton.
   *
   * Note that opening the Mini App from the attachment menu hides the main button until the
   * user interacts with the Mini App interface.
   */
  show() {
    return this.isVisible = !0, this;
  }
  /**
   * Shows a loading indicator on the Main Button.
   */
  showLoader() {
    return this.isLoaderVisible = !0, this;
  }
  /**
   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.
   * @param text - a new text.
   */
  setText(s) {
    return this.setParams({ text: s });
  }
  /**
   * Sets a new Main Button text color.
   * @param textColor - new text color.
   */
  setTextColor(s) {
    return this.setParams({ textColor: s });
  }
  /**
   * Updates current Main Button color.
   * @param bgColor - color to set.
   */
  setBgColor(s) {
    return this.setParams({ bgColor: s });
  }
  /**
   * Allows setting multiple Main Button parameters.
   * @param params - Main Button parameters.
   */
  setParams(s) {
    return this.set(s), this.commit(), this;
  }
  /**
   * The MainButton text.
   */
  get text() {
    return this.get("text");
  }
  /**
   * The MainButton text color.
   */
  get textColor() {
    return this.get("textColor");
  }
}
const ps = l(
  "mainButton",
  ({
    postEvent: e,
    themeParams: t,
    state: s = {
      isVisible: !1,
      isEnabled: !1,
      text: "",
      isLoaderVisible: !1,
      textColor: t.buttonTextColor || "#ffffff",
      bgColor: t.buttonColor || "#000000"
    }
  }) => new De({ ...s, postEvent: e })
);
function Me() {
  return K({
    contact: g({
      userId: {
        type: y(),
        from: "user_id"
      },
      phoneNumber: {
        type: p(),
        from: "phone_number"
      },
      firstName: {
        type: p(),
        from: "first_name"
      },
      lastName: {
        type: p().optional(),
        from: "last_name"
      }
    }),
    authDate: {
      type: Et(),
      from: "auth_date"
    },
    hash: p()
  }, "RequestedContact");
}
function Dt(e, t) {
  return (s) => {
    const [n, r] = t[s];
    return v(n, r, e);
  };
}
function Ve(e) {
  return new Promise((t) => {
    setTimeout(t, e);
  });
}
class Le extends k {
  constructor({ postEvent: s, createRequestId: n, version: r, botInline: i, ...o }) {
    super(o, r, {
      requestPhoneAccess: "web_app_request_phone",
      requestWriteAccess: "web_app_request_write_access",
      switchInlineQuery: "web_app_switch_inline_query",
      setHeaderColor: "web_app_set_header_color",
      setBackgroundColor: "web_app_set_background_color"
    });
    c(this, "botInline");
    c(this, "postEvent");
    c(this, "createRequestId");
    c(this, "requestPhoneAccessPromise");
    c(this, "requestWriteAccessPromise");
    /**
     * Checks if specified method parameter is supported by current component.
     */
    c(this, "supportsParam");
    this.createRequestId = n, this.postEvent = s, this.botInline = i;
    const a = this.supports.bind(this);
    this.supports = (h) => a(h) ? h !== "switchInlineQuery" || i : !1, this.supportsParam = Dt(r, {
      "setHeaderColor.color": ["web_app_set_header_color", "color"]
    });
  }
  /**
   * Attempts to get requested contact.
   * @param timeout - request timeout.
   */
  async getRequestedContact({
    timeout: s = 1e4
  } = {}) {
    return Me().parse(
      await S(
        "getRequestedContact",
        {},
        this.createRequestId(),
        { postEvent: this.postEvent, timeout: s }
      )
    );
  }
  /**
   * The Mini App background color.
   * @example "#ffaabb"
   */
  get bgColor() {
    return this.get("bgColor");
  }
  /**
   * Closes the Mini App.
   * @param returnBack - should the application be wrapped into the bottom bar.
   */
  close(s) {
    this.postEvent("web_app_close", { return_back: s });
  }
  /**
   * The Mini App header color.
   * @example "#ffaabb"
   * @example "bg_color"
   */
  get headerColor() {
    return this.get("headerColor");
  }
  /**
   * True if the Mini App is currently launched in bot inline mode.
   */
  get isBotInline() {
    return this.botInline;
  }
  /**
   * True if the current Mini App background color is recognized as dark.
   */
  get isDark() {
    return yt(this.bgColor);
  }
  /**
   * Informs the Telegram app that the Mini App is ready to be displayed.
   *
   * It is recommended to call this method as early as possible, as soon as all essential
   * interface elements loaded. Once this method called, the loading placeholder is hidden
   * and the Mini App shown.
   *
   * If the method not called, the placeholder will be hidden only when the page fully loaded.
   */
  ready() {
    this.postEvent("web_app_ready");
  }
  /**
   * Requests current user contact information. In contrary to requestPhoneAccess, this method
   * returns promise with contact information that rejects in case, user denied access, or request
   * failed.
   * @param options - additional options.
   */
  async requestContact({ timeout: s = 5e3 } = {}) {
    try {
      return await this.getRequestedContact();
    } catch {
    }
    if (await this.requestPhoneAccess() !== "sent")
      throw new Error("Access denied.");
    const r = Date.now() + s;
    let i = 50;
    return wt(async () => {
      for (; Date.now() < r; ) {
        try {
          return await this.getRequestedContact();
        } catch {
        }
        await Ve(i), i += 50;
      }
      throw bt(s);
    }, s);
  }
  /**
   * Requests current user phone access. Method returns promise, which resolves
   * status of the request. In case, user accepted the request, Mini App bot will receive
   * the according notification.
   *
   * To obtain the retrieved information instead, utilize the `requestContact` method.
   * @param options - additional options.
   * @see requestContact
   */
  async requestPhoneAccess(s = {}) {
    return this.requestPhoneAccessPromise || (this.requestPhoneAccessPromise = d({
      ...s,
      method: "web_app_request_phone",
      event: "phone_requested",
      postEvent: this.postEvent
    }).then(({ status: n }) => n).finally(() => this.requestPhoneAccessPromise = void 0)), this.requestPhoneAccessPromise;
  }
  /**
   * Requests write message access to current user.
   * @param options - additional options.
   */
  async requestWriteAccess(s = {}) {
    return this.requestWriteAccessPromise || (this.requestWriteAccessPromise = d({
      ...s,
      method: "web_app_request_write_access",
      event: "write_access_requested",
      postEvent: this.postEvent
    }).then(({ status: n }) => n).finally(() => this.requestWriteAccessPromise = void 0)), this.requestWriteAccessPromise;
  }
  /**
   * A method used to send data to the bot. When this method called, a service message sent to
   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the
   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).
   *
   * This method is only available for Mini Apps launched via a Keyboard button.
   * @param data - data to send to bot.
   * @throws {Error} data has incorrect size.
   */
  sendData(s) {
    const { size: n } = new Blob([s]);
    if (!n || n > 4096)
      throw new Error(`Passed data has incorrect size: ${n}`);
    this.postEvent("web_app_data_send", { data: s });
  }
  /**
   * Updates current Mini App header color.
   *
   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9
   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8
   * @param color - color key or RGB color.
   */
  setHeaderColor(s) {
    this.postEvent("web_app_set_header_color", Q(s) ? { color: s } : { color_key: s }), this.set("headerColor", s);
  }
  /**
   * Updates current Mini App background color.
   *
   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9
   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8
   * @param color - RGB color.
   */
  setBgColor(s) {
    this.postEvent("web_app_set_background_color", { color: s }), this.set("bgColor", s);
  }
  /**
   * Inserts the bot's username and the specified inline query in the current chat's input field.
   * Query may be empty, in which case only the bot's username will be inserted. The client prompts
   * the user to choose a specific chat, then opens that chat and inserts the bot's username and
   * the specified inline query in the input field.
   * @param text - text which should be inserted in the input after the current bot name. Max
   * length is 256 symbols.
   * @param chatTypes - List of chat types which could be chosen to send the message. Could be
   * empty list.
   */
  switchInlineQuery(s, n = []) {
    if (!this.supports("switchInlineQuery") && !this.isBotInline)
      throw new Error("Method is unsupported because Mini App should be launched in inline mode.");
    this.postEvent("web_app_switch_inline_query", { query: s, chat_types: n });
  }
}
const us = l(
  "miniApp",
  ({
    themeParams: e,
    botInline: t = !1,
    state: s = {
      bgColor: e.bgColor || "#ffffff",
      headerColor: e.headerBgColor || "#000000"
    },
    ...n
  }) => new Le({ ...n, ...s, botInline: t })
);
function $e(e) {
  const t = e.message.trim(), s = (e.title || "").trim(), n = e.buttons || [];
  let r;
  if (s.length > 64)
    throw new Error(`Title has incorrect size: ${s.length}`);
  if (!t.length || t.length > 256)
    throw new Error(`Message has incorrect size: ${t.length}`);
  if (n.length > 3)
    throw new Error(`Buttons have incorrect size: ${n.length}`);
  return n.length ? r = n.map((i) => {
    const { id: o = "" } = i;
    if (o.length > 64)
      throw new Error(`Button ID has incorrect size: ${o}`);
    if (!i.type || i.type === "default" || i.type === "destructive") {
      const a = i.text.trim();
      if (!a.length || a.length > 64) {
        const h = i.type || "default";
        throw new Error(`Button text with type "${h}" has incorrect size: ${i.text.length}`);
      }
      return { ...i, text: a, id: o };
    }
    return { ...i, id: o };
  }) : r = [{ type: "close", id: "" }], { title: s, message: t, buttons: r };
}
class Be extends k {
  constructor(t, s, n) {
    super({ isOpened: t }, s, { open: "web_app_open_popup" }), this.postEvent = n;
  }
  set isOpened(t) {
    this.set("isOpened", t);
  }
  /**
   * True if the Popup is opened.
   */
  get isOpened() {
    return this.get("isOpened");
  }
  /**
   * A method that shows a native popup described by the `params` argument.
   * Promise will be resolved when popup is closed. Resolved value will have
   * an identifier of pressed button.
   *
   * In case, user clicked outside the popup or clicked top right popup close
   * button, null will be returned.
   *
   * @param options - popup parameters.
   * @throws {Error} Popup is already opened.
   */
  async open(t) {
    if (this.isOpened)
      throw new Error("Popup is already opened.");
    this.isOpened = !0;
    try {
      const { button_id: s = null } = await d({
        event: "popup_closed",
        method: "web_app_open_popup",
        postEvent: this.postEvent,
        params: $e(t)
      });
      return s;
    } finally {
      this.isOpened = !1;
    }
  }
}
const ls = l(
  ({ postEvent: e, version: t }) => new Be(!1, t, e)
);
class We extends k {
  constructor(t, s, n) {
    super({ isOpened: t }, s, {
      close: "web_app_close_scan_qr_popup",
      open: "web_app_open_scan_qr_popup"
    }), this.postEvent = n;
  }
  /**
   * Closes the scanner.
   */
  close() {
    this.postEvent("web_app_close_scan_qr_popup"), this.isOpened = !1;
  }
  set isOpened(t) {
    this.set("isOpened", t);
  }
  /**
   * Returns true if the scanner is currently opened.
   */
  get isOpened() {
    return this.get("isOpened");
  }
  async open(t) {
    if (this.isOpened)
      throw new Error("The scanner is already opened");
    const { text: s, capture: n } = (typeof t == "string" ? { text: t } : t) || {};
    this.isOpened = !0;
    try {
      const i = (await d({
        method: "web_app_open_scan_qr_popup",
        event: ["qr_text_received", "scan_qr_popup_closed"],
        postEvent: this.postEvent,
        params: { text: s },
        capture(o) {
          return o.event === "scan_qr_popup_closed" || !n || n(o.payload);
        }
      }) || {}).data || null;
      return i && this.close(), i;
    } finally {
      this.isOpened = !1;
    }
  }
  // TODO: Streaming mode, allowing to scan several QRs until closed.
}
const ds = l(
  ({ version: e, postEvent: t }) => new We(!1, e, t)
);
class Ue extends Z {
  constructor(s, n, r) {
    super({ isVisible: s }, n, {
      show: "web_app_setup_settings_button",
      hide: "web_app_setup_settings_button"
    });
    /**
     * Adds a new event listener.
     * @param event - event to listen.
     * @param listener - listener to add.
     */
    c(this, "on", (s, n) => s === "click" ? b("settings_button_pressed", n) : this.state.on(s, n));
    /**
     * Removes the event listener.
     * @param event - event to listen.
     * @param listener - listener to remove.
     */
    c(this, "off", (s, n) => s === "click" ? L("settings_button_pressed", n) : this.state.off(s, n));
    this.postEvent = r;
  }
  set isVisible(s) {
    this.set("isVisible", s), this.postEvent("web_app_setup_settings_button", { is_visible: s });
  }
  /**
   * True if the SettingsButton is visible.
   */
  get isVisible() {
    return this.get("isVisible");
  }
  /**
   * Hides the SettingsButton.
   */
  hide() {
    this.isVisible = !1;
  }
  /**
   * Shows the SettingsButton.
   */
  show() {
    this.isVisible = !0;
  }
}
const _s = l(
  "settingsButton",
  ({
    version: e,
    postEvent: t,
    state: s = { isVisible: !1 }
  }) => new Ue(s.isVisible, e, t)
);
function Mt(e) {
  return Pt().parse(e);
}
class He extends tt {
  /**
   * @since v6.10
   */
  get accentTextColor() {
    return this.get("accentTextColor");
  }
  get bgColor() {
    return this.get("bgColor");
  }
  get buttonColor() {
    return this.get("buttonColor");
  }
  get buttonTextColor() {
    return this.get("buttonTextColor");
  }
  get destructiveTextColor() {
    return this.get("destructiveTextColor");
  }
  /**
   * Returns the copy of the internal state of the current component instance.
   */
  getState() {
    return this.clone();
  }
  /**
   * @since v6.10
   */
  get headerBgColor() {
    return this.get("headerBgColor");
  }
  get hintColor() {
    return this.get("hintColor");
  }
  /**
   * @returns True in case, current color scheme is recognized as dark. This
   * value is calculated according to theme bg color.
   */
  get isDark() {
    return !this.bgColor || yt(this.bgColor);
  }
  get linkColor() {
    return this.get("linkColor");
  }
  get secondaryBgColor() {
    return this.get("secondaryBgColor");
  }
  /**
   * @since v6.10
   */
  get sectionBgColor() {
    return this.get("sectionBgColor");
  }
  /**
   * @since v6.10
   */
  get sectionHeaderTextColor() {
    return this.get("sectionHeaderTextColor");
  }
  /**
   * @since v7.6
   */
  get sectionSeparatorColor() {
    return this.get("sectionHeaderTextColor");
  }
  /**
   * Starts listening to the external theme changes and applies them.
   * @returns Function to stop listening.
   */
  listen() {
    return b("theme_changed", (t) => {
      this.set(Mt(t.theme_params));
    });
  }
  /**
   * @since v6.10
   */
  get subtitleTextColor() {
    return this.get("subtitleTextColor");
  }
  get textColor() {
    return this.get("textColor");
  }
}
const fs = l(
  "themeParams",
  ({ themeParams: e, state: t = e, addCleanup: s }) => {
    const n = new He(t);
    return s(n.listen()), n;
  }
);
function gs(e = {}) {
  return d({
    ...e,
    method: "web_app_request_theme",
    event: "theme_changed"
  }).then(Mt);
}
function A(e, t) {
  return e.startsWith(t) ? e : `${t}${e}`;
}
function I(e) {
  return new URL(
    typeof e == "string" ? e : `${e.pathname || ""}${A(e.search || "", "?")}${A(e.hash || "", "#")}`,
    "http://a"
  );
}
class Oe extends et {
  constructor(s, n, r) {
    super(s, { readTextFromClipboard: "web_app_read_text_from_clipboard" });
    /**
     * Checks if specified method parameter is supported by current component.
     */
    c(this, "supportsParam");
    this.version = s, this.createRequestId = n, this.postEvent = r, this.supportsParam = Dt(s, {
      "openLink.tryInstantView": ["web_app_open_link", "try_instant_view"]
    });
  }
  openLink(s, n) {
    const r = I(s).toString();
    if (!v("web_app_open_link", this.version)) {
      window.open(r, "_blank");
      return;
    }
    const i = typeof n == "boolean" ? { tryInstantView: n } : n || {};
    this.postEvent("web_app_open_link", {
      url: r,
      try_browser: i.tryBrowser,
      try_instant_view: i.tryInstantView
    });
  }
  /**
   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing
   * link in full format, with hostname "t.me".
   * @param url - URL to be opened.
   * @throws {Error} URL has not allowed hostname.
   */
  openTelegramLink(s) {
    const { hostname: n, pathname: r, search: i } = new URL(s, "https://t.me");
    if (n !== "t.me")
      throw new Error(`URL has not allowed hostname: ${n}. Only "t.me" is allowed`);
    if (!v("web_app_open_tg_link", this.version)) {
      window.location.href = s;
      return;
    }
    this.postEvent("web_app_open_tg_link", { path_full: r + i });
  }
  /**
   * Reads text from clipboard and returns string or null. null is returned
   * in cases:
   * - Value in clipboard is not text
   * - Access to clipboard is not allowed
   */
  async readTextFromClipboard() {
    const s = this.createRequestId(), {
      data: n = null
    } = await d({
      method: "web_app_read_text_from_clipboard",
      event: "clipboard_text_received",
      postEvent: this.postEvent,
      params: { req_id: s },
      capture: gt(s)
    });
    return n;
  }
  /**
   * Shares specified URL with the passed to the chats, selected by user. After being called,
   * it closes the mini application.
   *
   * This method uses Telegram's Share Links.
   * @param url - URL to share.
   * @param text - text to append after the URL.
   * @see https://core.telegram.org/api/links#share-links
   * @see https://core.telegram.org/widgets/share#custom-buttons
   */
  shareURL(s, n) {
    this.openTelegramLink(
      "https://t.me/share/url?" + new URLSearchParams({ url: s, text: n || "" }).toString().replace(/\+/g, "%20")
    );
  }
}
const bs = l(
  ({ version: e, postEvent: t, createRequestId: s }) => new Oe(e, s, t)
);
async function Vt(e = {}) {
  const {
    is_expanded: t,
    is_state_stable: s,
    ...n
  } = await d({
    ...e,
    method: "web_app_request_viewport",
    event: "viewport_changed"
  });
  return { ...n, isExpanded: t, isStateStable: s };
}
function P(e) {
  return e < 0 ? 0 : e;
}
class Ge extends tt {
  constructor({ postEvent: s, stableHeight: n, height: r, width: i, isExpanded: o }) {
    super({
      height: P(r),
      isExpanded: o,
      stableHeight: P(n),
      width: P(i)
    });
    c(this, "postEvent");
    this.postEvent = s;
  }
  /**
   * Requests viewport information from the Telegram application and updates current Viewport
   * instance.
   * @param options - options to request fresh data.
   */
  async sync(s) {
    const { isStateStable: n, ...r } = await Vt(s);
    this.set({
      ...r,
      stableHeight: n ? r.height : this.get("stableHeight")
    });
  }
  /**
   * The current height of the **visible area** of the Mini App.
   *
   * The application can display just the top part of the Mini App, with its lower part remaining
   * outside the screen area. From this position, the user can "pull" the Mini App to its
   * maximum height, while the bot can do the same by calling `expand` method. As the position of
   * the Mini App changes, the current height value of the visible area will be updated  in real
   * time.
   *
   * Please note that the refresh rate of this value is not sufficient to smoothly follow the
   * lower border of the window. It should not be used to pin interface elements to the bottom
   * of the visible area. It's more appropriate to use the value of the `stableHeight`
   * field for this purpose.
   *
   * @see stableHeight
   */
  get height() {
    return this.get("height");
  }
  /**
   * The height of the visible area of the Mini App in its last stable state.
   *
   * The application can display just the top part of the Mini App, with its lower part remaining
   * outside the screen area. From this position, the user can "pull" the Mini App to its
   * maximum height, while the application can do the same by calling `expand` method.
   *
   * Unlike the value of `height`, the value of `stableHeight` does not change as the position
   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`
   * will be updated after all gestures and animations are completed and
   * the Mini App reaches its final size.
   *
   * @see height
   */
  get stableHeight() {
    return this.get("stableHeight");
  }
  /**
   * Starts listening to viewport changes and applies them.
   * @returns Function to stop listening.
   */
  listen() {
    return b("viewport_changed", (s) => {
      const {
        height: n,
        width: r,
        is_expanded: i,
        is_state_stable: o
      } = s, a = P(n);
      this.set({
        height: a,
        isExpanded: i,
        width: P(r),
        ...o ? { stableHeight: a } : {}
      });
    });
  }
  /**
   * True if the Mini App is expanded to the maximum available height. Otherwise, if
   * the Mini App occupies part of the screen and can be expanded to the full height using
   * `expand` method.
   * @see expand
   */
  get isExpanded() {
    return this.get("isExpanded");
  }
  /**
   * Current visible area width.
   */
  get width() {
    return this.get("width");
  }
  /**
   * A method that expands the Mini App to the maximum available height. To find out if the Mini
   * App is expanded to the maximum height, refer to the value of the `isExpanded`.
   * @see isExpanded
   */
  expand() {
    this.postEvent("web_app_expand"), this.set("isExpanded", !0);
  }
  /**
   * True if the current viewport height is stable and is not going to change in the next moment.
   */
  get isStable() {
    return this.stableHeight === this.height;
  }
}
const ws = l(
  "viewport",
  async ({ state: e, platform: t, postEvent: s, addCleanup: n }) => {
    let r = !1, i = 0, o = 0, a = 0;
    if (e)
      r = e.isExpanded, i = e.height, o = e.width, a = e.stableHeight;
    else if (["macos", "tdesktop", "unigram", "webk", "weba", "web"].includes(t))
      r = !0, i = window.innerHeight, o = window.innerWidth, a = window.innerHeight;
    else {
      const u = await Vt({ timeout: 1e3, postEvent: s });
      r = u.isExpanded, i = u.height, o = u.width, a = u.isStateStable ? i : 0;
    }
    const h = new Ge({
      postEvent: s,
      height: i,
      width: o,
      stableHeight: a,
      isExpanded: r
    });
    return n(h.listen()), h;
  }
);
function m(e, t) {
  document.documentElement.style.setProperty(e, t);
}
function ms(e, t, s) {
  s || (s = (a) => `--tg-${a}-color`);
  const n = s("header"), r = s("bg"), i = () => {
    const { headerColor: a } = e;
    if (Q(a))
      m(n, a);
    else {
      const { bgColor: h, secondaryBgColor: u } = t;
      a === "bg_color" && h ? m(n, h) : a === "secondary_bg_color" && u && m(n, u);
    }
    m(r, e.bgColor);
  }, o = [
    t.on("change", i),
    e.on("change", i)
  ];
  return i(), () => o.forEach((a) => a());
}
function ys(e, t) {
  t || (t = (n) => `--tg-theme-${n.replace(/[A-Z]/g, (r) => `-${r.toLowerCase()}`)}`);
  const s = () => {
    Object.entries(e.getState()).forEach(([n, r]) => {
      r && m(t(n), r);
    });
  };
  return s(), e.on("change", s);
}
function vs(e, t) {
  t || (t = (u) => `--tg-viewport-${u}`);
  const [
    s,
    n,
    r
  ] = ["height", "width", "stable-height"].map((u) => t(u)), i = () => m(s, `${e.height}px`), o = () => m(n, `${e.width}px`), a = () => m(r, `${e.stableHeight}px`), h = [
    e.on("change:height", i),
    e.on("change:width", o),
    e.on("change:stableHeight", a)
  ];
  return i(), o(), a(), () => h.forEach((u) => u());
}
function Es(e = !0) {
  const t = [
    b("reload_iframe", () => {
      R("iframe_will_reload"), window.location.reload();
    })
  ], s = () => t.forEach((n) => n());
  if (e) {
    const n = document.createElement("style");
    n.id = "telegram-custom-styles", document.head.appendChild(n), t.push(
      b("set_custom_style", (r) => {
        n.innerHTML = r;
      }),
      () => document.head.removeChild(n)
    );
  }
  return R("iframe_ready", { reload_supported: !0 }), s;
}
function xs() {
  return typeof window > "u";
}
async function Ps() {
  if (dt(window))
    return !0;
  try {
    return await d({ method: "web_app_request_theme", event: "theme_changed", timeout: 100 }), !0;
  } catch {
    return !1;
  }
}
function Ss(e) {
  const t = typeof e == "string" ? X(e) : e;
  qt(t);
  function s(r) {
    if (typeof r == "string")
      try {
        const { eventType: i } = ut(r);
        i === "web_app_request_theme" && j("theme_changed", {
          theme_params: JSON.parse(It(t.themeParams))
        }), i === "web_app_request_viewport" && j("viewport_changed", {
          width: window.innerWidth,
          height: window.innerHeight,
          is_state_stable: !0,
          is_expanded: !0
        });
      } catch {
      }
  }
  if (_t()) {
    const r = window.parent.postMessage.bind(window.parent);
    window.parent.postMessage = (i) => {
      s(i), r(i);
    };
    return;
  }
  if (lt(window)) {
    const r = window.external.notify.bind(window.external);
    window.external.notify = (i) => {
      s(i), r(i);
    };
    return;
  }
  const n = window.TelegramWebviewProxy;
  window.TelegramWebviewProxy = {
    ...n || {},
    postEvent(...r) {
      s(JSON.stringify({ eventType: r[0], eventData: r[1] })), n && n.postEvent(...r);
    }
  };
}
function je(e) {
  return e instanceof D;
}
function Cs(e, t) {
  return je(e) && e.type === t;
}
function $(e, t) {
  let s, n, r;
  return typeof e == "string" ? s = e : (s = e.pathname === void 0 ? t : e.pathname, n = e.params, r = e.id), Object.freeze({
    id: r || (Math.random() * 2 ** 14 | 0).toString(16),
    pathname: s,
    params: n
  });
}
class ze {
  constructor(t, s, n = R) {
    /**
     * Navigation history.
     */
    c(this, "history");
    c(this, "ee", new T());
    /**
     * True, if current navigator is currently attached.
     */
    c(this, "attached", !1);
    /**
     * Goes to the previous history item.
     */
    c(this, "back", () => this.go(-1));
    /**
     * Adds new event listener.
     */
    c(this, "on", this.ee.on.bind(this.ee));
    /**
     * Removes event listener.
     */
    c(this, "off", this.ee.off.bind(this.ee));
    if (this._index = s, this.postEvent = n, t.length === 0)
      throw f(Zt, "History should not be empty.");
    if (s < 0 || s >= t.length)
      throw f(
        Kt,
        "Index should not be zero and higher or equal than history size."
      );
    this.history = t.map((r) => $(r, ""));
  }
  /**
   * Allows this navigator to control the `BackButton` visibility state. It also tracks the
   * `BackButton` clicks and calls the `back` method.
   */
  attach() {
    this.attached || (this.attached = !0, this.sync(), b("back_button_pressed", this.back));
  }
  /**
   * Currently active history item.
   */
  get current() {
    return this.history[this.index];
  }
  /**
   * Prevents current navigator from controlling the BackButton visibility state.
   */
  detach() {
    this.attached = !1, L("back_button_pressed", this.back);
  }
  /**
   * Goes to the next history item.
   */
  forward() {
    this.go(1);
  }
  /**
   * Changes currently active history item index by the specified delta. This method doesn't
   * change index in case, the updated index points to the non-existing history item. This behavior
   * is preserved until the `fit` argument is specified.
   * @param delta - index delta.
   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.
   */
  go(t, s) {
    const n = this.index + t, r = Math.min(
      Math.max(0, n),
      this.history.length - 1
    );
    (n === r || s) && this.replaceAndMove(r, this.history[r]);
  }
  /**
   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.
   *
   * If "fit" option was specified and index is out of bounds, it will be cut to the nearest
   * bound.
   * @param index - target index.
   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.
   */
  goTo(t, s) {
    this.go(t - this.index, s);
  }
  /**
   * True if navigator has items before the current item.
   */
  get hasPrev() {
    return this.index > 0;
  }
  /**
   * True if navigator has items after the current item.
   */
  get hasNext() {
    return this.index !== this.history.length - 1;
  }
  /**
   * Currently active history item index.
   */
  get index() {
    return this._index;
  }
  /**
   * Adds a new history item removing all after the current one.
   * @param item - item to add.
   */
  push(t) {
    this.hasNext && this.history.splice(this.index + 1), this.replaceAndMove(this.index + 1, $(t, this.current.pathname));
  }
  /**
   * Replaces the current history item.
   * @param item - item to replace the current item with.
   */
  replace(t) {
    this.replaceAndMove(this.index, $(t, this.current.pathname));
  }
  /**
   * Sets history item by the specified index.
   * @param index - history item index to replace.
   * @param historyItem - history item to set.
   */
  replaceAndMove(t, s) {
    const n = t - this.index;
    if (!n && this.current === s)
      return;
    const r = this.current;
    if (this.index !== t) {
      const i = this._index;
      this._index = t, this.attached && i > 0 != t > 0 && this.sync();
    }
    this.history[t] = s, this.ee.emit("change", {
      navigator: this,
      from: r,
      to: this.current,
      delta: n
    });
  }
  /**
   * Actualizes the `BackButton` visibility state.
   */
  sync() {
    this.postEvent("web_app_setup_back_button", { is_visible: !!this.index });
  }
}
function B({
  params: e,
  ...t
}) {
  return { ...e || { hash: "", search: "" }, ...t };
}
function N(e) {
  const t = typeof e == "string" ? e.startsWith("/") : !!(e.pathname && e.pathname.startsWith("/")), s = I(e);
  return `${t ? s.pathname : s.pathname.slice(1)}${s.search}${s.hash}`;
}
function W(e, t, s) {
  let n, r;
  typeof e == "string" ? n = e : (n = N(e), s = e.state, r = e.id);
  const { pathname: i, search: o, hash: a } = new URL(n, `http://a${A(t, "/")}`);
  return { id: r, pathname: i, params: { hash: a, search: o, state: s } };
}
async function C(e) {
  return e === 0 ? !0 : Promise.race([
    new Promise((t) => {
      const s = G("popstate", () => {
        s(), t(!0);
      });
      window.history.go(e);
    }),
    // Usually, it takes about 1ms to emit this event, but we use some buffer.
    new Promise((t) => {
      setTimeout(t, 50, !1);
    })
  ]);
}
async function Fe() {
  if (window.history.length <= 1 || (window.history.pushState(null, ""), await C(1 - window.history.length)))
    return;
  let t = await C(-1);
  for (; t; )
    t = await C(-1);
}
function Lt(e) {
  return I(e).pathname;
}
const it = 0, U = 1, H = 2;
class $t {
  constructor(t, s, { postEvent: n, hashMode: r = "classic", base: i } = {}) {
    c(this, "navigator");
    c(this, "ee", new T());
    c(this, "hashMode");
    c(this, "base");
    /**
     * Shows whether the navigator is currently attached to the browser history.
     */
    c(this, "attached", !1);
    /**
     * Handles the window "popstate" event.
     * @param state - event state.
     */
    c(this, "onPopState", ({ state: t }) => {
      if (t === null)
        return this.push(this.parsePath(window.location.href));
      t === it ? window.history.forward() : t === U && this.back(), t === H && this.forward();
    });
    /**
     * Underlying navigator change event listener.
     */
    c(this, "onNavigatorChange", async ({
      to: t,
      from: s,
      delta: n
    }) => {
      this.attached && await this.syncHistory(), this.ee.emit("change", {
        delta: n,
        from: B(s),
        to: B(t),
        navigator: this
      });
    });
    /**
     * Adds new event listener.
     */
    c(this, "on", this.ee.on.bind(this.ee));
    /**
     * Removes event listener.
     */
    c(this, "off", this.ee.off.bind(this.ee));
    this.navigator = new ze(
      t.map((o) => W(o, "/")),
      s,
      n
    ), this.navigator.on("change", (o) => {
      this.onNavigatorChange(o);
    }), this.hashMode = r, this.base = Lt(i || "");
  }
  /**
   * Attaches current navigator to the browser history allowing navigator to manipulate it.
   */
  async attach() {
    this.attached || (this.attached = !0, this.navigator.attach(), window.addEventListener("popstate", this.onPopState), await this.syncHistory());
  }
  /**
   * Goes back in history by 1.
   */
  back() {
    this.navigator.back();
  }
  /**
   * Detaches current navigator from the browser history.
   */
  detach() {
    this.attached = !1, this.navigator.detach(), window.removeEventListener("popstate", this.onPopState);
  }
  /**
   * Goes forward in history.
   */
  forward() {
    return this.navigator.forward();
  }
  /**
   * Current history cursor.
   */
  get index() {
    return this.navigator.index;
  }
  /**
   * Current history item identifier.
   */
  get id() {
    return this.navigator.current.id;
  }
  /**
   * Changes currently active history item index by the specified delta. This method doesn't
   * change index in case, the updated index points to the non-existing history item. This behavior
   * is preserved until the `fit` argument is specified.
   * @param delta - index delta.
   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.
   */
  go(t, s) {
    return this.navigator.go(t, s);
  }
  /**
   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.
   *
   * If "fit" option was specified and index is out of bounds, it will be cut to the nearest
   * bound.
   * @param index - target index.
   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.
   */
  goTo(t, s) {
    this.navigator.goTo(t, s);
  }
  /**
   * Current history item hash.
   * @see URL.hash
   * @example
   * "", "#my-hash"
   */
  get hash() {
    return (this.navigator.current.params || {}).hash || "";
  }
  /**
   * True if navigator has items before the current item.
   */
  get hasPrev() {
    return this.navigator.hasPrev;
  }
  /**
   * True if navigator has items after the current item.
   */
  get hasNext() {
    return this.navigator.hasNext;
  }
  /**
   * Navigation history.
   */
  get history() {
    return this.navigator.history.map(B);
  }
  /**
   * Path, including pathname, search and hash.
   * @example Pathname only.
   * "/pathname"
   * @example Pathname + search.
   * "/pathname?search"
   * @example Pathname + hash.
   * "/pathname#hash"
   * @example Pathname + search + hash.
   * "/pathname?search#hash"
   */
  get path() {
    return N(this);
  }
  /**
   * Current pathname. Always starts with the slash.
   * @see URL.pathname
   * @example
   * "/", "/abc"
   */
  get pathname() {
    return this.navigator.current.pathname;
  }
  /**
   * Depending on the current navigation type, parses incoming path and returns it presented as
   * an object. In other words, this method parses the passed path and returns object, describing
   * how the navigator "sees" it.
   *
   * @example Hash mode is omitted.
   * parsePath('/abc?a=1#hash');
   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }
   * parsePath('http://example.com/abc?a=1#hash');
   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }
   *
   * @example Hash mode is enabled.
   * parsePath('/abc?a=1#tma?is=cool#yeah');
   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }
   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');
   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }
   */
  parsePath(t) {
    let s = I(t);
    return this.hashMode && (s = I(s.hash.slice(1))), {
      pathname: s.pathname,
      search: s.search,
      hash: s.hash
    };
  }
  push(t, s) {
    const n = W(t, this.path), { state: r = s } = n.params;
    this.navigator.push({ ...n, params: { ...n.params, state: r } });
  }
  replace(t, s) {
    const n = W(t, this.path), { state: r = s } = n.params;
    this.navigator.replace({ ...n, params: { ...n.params, state: r } });
  }
  /**
   * Combines the navigator `base` property with the passed path data applying the navigator
   * navigation mode.
   * @param value - path presented as string or URLLike.
   */
  renderPath(t) {
    const s = (this.base.length === 1 ? "" : this.base) + A(N(t), "/");
    return this.hashMode ? A(s.slice(1), this.hashMode === "classic" ? "#" : "#/") : s;
  }
  /**
   * Synchronizes current navigator state with browser history.
   */
  async syncHistory() {
    window.removeEventListener("popstate", this.onPopState);
    const { state: t } = this, s = this.renderPath(this);
    await Fe(), this.hasPrev && this.hasNext ? (window.history.replaceState(U, ""), window.history.pushState(t, "", s), window.history.pushState(H, ""), await C(-1)) : this.hasPrev ? (window.history.replaceState(U, ""), window.history.pushState(t, "", s)) : this.hasNext ? (window.history.replaceState(t, s), window.history.pushState(H, ""), await C(-1)) : (window.history.replaceState(it, ""), window.history.pushState(t, "", s)), window.addEventListener("popstate", this.onPopState);
  }
  /**
   * Current query parameters.
   * @see URL.search
   * @example
   * "", "?", "?a=1"
   */
  get search() {
    return (this.navigator.current.params || {}).search || "";
  }
  /**
   * Current history item state.
   */
  get state() {
    return (this.navigator.current.params || {}).state;
  }
}
function Je(e) {
  e || (e = {});
  const { href: t, hash: s } = window.location;
  let n = N(
    e.hashMode === null ? t : s.includes("?") ? s.slice(1) : `?${s.slice(1)}`
  );
  const r = e.base ? Lt(e.base) : void 0;
  if (r) {
    if (!n.startsWith(r))
      throw f(
        Xt,
        `Path "${n}" expected to be starting with "${r}"`
      );
    n = n.slice(r.length);
  }
  return new $t([n], 0, e);
}
function Ts(e) {
  const t = e.match(/#(.+)/);
  return t ? t[1] : null;
}
function Qe(e, t) {
  if (kt()) {
    const s = sessionStorage.getItem(e);
    if (s)
      try {
        const { index: n, history: r } = JSON.parse(s);
        return new $t(
          r,
          n,
          t
        );
      } catch (n) {
        console.error("Unable to restore hash navigator state.", n);
      }
  }
  return Je(t);
}
function Rs(e, t) {
  const s = Qe(e, t), n = () => sessionStorage.setItem(e, JSON.stringify({
    index: s.index,
    history: s.history
  }));
  return s.on("change", n), n(), s;
}
export {
  le as BackButton,
  ze as BasicNavigator,
  Pe as BiometryManager,
  $t as BrowserNavigator,
  Ce as ClosingBehavior,
  Ie as CloudStorage,
  Xt as ERR_INVALID_PATH_BASE,
  Jt as ERR_INVOKE_CUSTOM_METHOD_RESPONSE,
  zt as ERR_METHOD_PARAMETER_UNSUPPORTED,
  jt as ERR_METHOD_UNSUPPORTED,
  Zt as ERR_NAVIGATION_HISTORY_EMPTY,
  Kt as ERR_NAVIGATION_INDEX_INVALID,
  Ke as ERR_NAVIGATION_ITEM_INVALID,
  ct as ERR_PARSE,
  Xe as ERR_SSR_INIT,
  Qt as ERR_TIMED_OUT,
  Yt as ERR_UNEXPECTED_TYPE,
  Ft as ERR_UNKNOWN_ENV,
  T as EventEmitter,
  qe as HapticFeedback,
  ke as InitData,
  Ne as Invoice,
  De as MainButton,
  Le as MiniApp,
  Be as Popup,
  We as QRScanner,
  D as SDKError,
  Ue as SettingsButton,
  He as ThemeParams,
  Oe as Utils,
  Ge as Viewport,
  Ae as array,
  ms as bindMiniAppCSSVars,
  ys as bindThemeParamsCSSVars,
  vs as bindViewportCSSVars,
  w as boolean,
  gt as captureSameReq,
  z as classNames,
  oe as compareVersions,
  Je as createBrowserNavigatorFromLocation,
  he as createPostEvent,
  I as createSafeURL,
  Et as date,
  Ts as getHash,
  Lt as getPathname,
  ss as initBackButton,
  ns as initBiometryManager,
  rs as initClosingBehavior,
  is as initCloudStorage,
  os as initHapticFeedback,
  as as initInitData,
  hs as initInvoice,
  ps as initMainButton,
  us as initMiniApp,
  Rs as initNavigator,
  ls as initPopup,
  ds as initQRScanner,
  _s as initSettingsButton,
  fs as initThemeParams,
  bs as initUtils,
  ws as initViewport,
  Es as initWeb,
  S as invokeCustomMethod,
  yt as isColorDark,
  _t as isIframe,
  kt as isPageReload,
  Q as isRGB,
  pe as isRGBShort,
  je as isSDKError,
  Cs as isSDKErrorOfType,
  xs as isSSR,
  Ps as isTMA,
  g as json,
  es as mergeClassNames,
  Ss as mockTelegramEnv,
  y as number,
  L as off,
  b as on,
  cs as parseInitData,
  X as parseLaunchParams,
  Mt as parseThemeParams,
  R as postEvent,
  d as request,
  Se as requestBiometryInfo,
  gs as requestThemeParams,
  Vt as requestViewport,
  ve as retrieveLaunchParams,
  _e as rgb,
  K as searchParams,
  ye as serializeLaunchParams,
  It as serializeThemeParams,
  m as setCSSVar,
  Ze as setDebug,
  ts as setTargetOrigin,
  p as string,
  Ht as subscribe,
  v as supports,
  ce as targetOrigin,
  mt as toRGB,
  at as unsubscribe,
  N as urlToPath,
  wt as withTimeout
};
//# sourceMappingURL=index.js.map
