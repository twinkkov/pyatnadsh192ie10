{"version":3,"file":"index.js","sources":["../src/misc/createSingleton.ts","../src/bridge/events/listening/unsubscribe.ts","../src/bridge/events/listening/subscribe.ts","../src/logger/Logger.ts","../src/debug/debug.ts","../src/events/event-emitter/EventEmitter.ts","../src/events/onWindow.ts","../src/misc/createCleanup.ts","../src/errors/SDKError.ts","../src/errors/createError.ts","../src/errors/errors.ts","../src/parsing/createTypeError.ts","../src/parsing/ValueParser/ValueParser.ts","../src/parsing/createValueParserGenerator.ts","../src/parsing/parsers/boolean.ts","../src/parsing/parseBySchema.ts","../src/parsing/toRecord.ts","../src/parsing/parsers/json.ts","../src/parsing/parsers/number.ts","../src/parsing/parsers/string.ts","../src/bridge/parseMessage.ts","../src/bridge/events/event-handlers/cleanupEventHandlers.ts","../src/bridge/events/event-handlers/emitMiniAppsEvent.ts","../src/bridge/events/event-handlers/defineEventHandlers.ts","../src/bridge/events/event-emitter/createMiniAppsEventEmitter.ts","../src/bridge/events/event-emitter/singleton.ts","../src/bridge/events/listening/off.ts","../src/bridge/events/listening/on.ts","../src/misc/isRecord.ts","../src/version/compareVersions.ts","../src/supports/supports.ts","../src/env/hasExternalNotify.ts","../src/env/hasWebviewProxy.ts","../src/env/isIframe.ts","../src/bridge/target-origin.ts","../src/bridge/methods/postEvent.ts","../src/bridge/methods/createPostEvent.ts","../src/bridge/captureSameReq.ts","../src/timeout/createTimeoutError.ts","../src/timeout/withTimeout.ts","../src/bridge/request.ts","../src/bridge/invokeCustomMethod.ts","../src/classnames/classNames.ts","../src/classnames/mergeClassNames.ts","../src/colors/isRGB.ts","../src/colors/isRGBShort.ts","../src/colors/toRGB.ts","../src/colors/isColorDark.ts","../src/classes/State/State.ts","../src/classes/WithStateUtils.ts","../src/supports/createSupportsFn.ts","../src/classes/WithSupportsAndStateUtils.ts","../src/components/BackButton/BackButton.ts","../src/parsing/parsers/date.ts","../src/parsing/parsers/searchParams.ts","../src/components/InitData/parsers/chat.ts","../src/components/InitData/parsers/user.ts","../src/components/InitData/parsers/initData.ts","../src/parsing/parsers/rgb.ts","../src/components/ThemeParams/keys.ts","../src/components/ThemeParams/parsing/themeParams.ts","../src/launch-params/parseLaunchParams.ts","../src/launch-params/retrieveFromUrl.ts","../src/launch-params/retrieveFromLocation.ts","../src/navigation/getFirstNavigationEntry.ts","../src/launch-params/retrieveFromPerformance.ts","../src/storage/storage.ts","../src/launch-params/retrieveFromStorage.ts","../src/components/ThemeParams/parsing/serializeThemeParams.ts","../src/launch-params/serializeLaunchParams.ts","../src/launch-params/saveToStorage.ts","../src/launch-params/retrieveLaunchParams.ts","../src/navigation/isPageReload.ts","../src/request-id/createRequestIdGenerator.ts","../src/misc/createComponentInitFn/createComponentInitFn.ts","../src/components/BackButton/initBackButton.ts","../src/classes/WithSupportsAndTrackableState.ts","../src/components/BiometryManager/formatEvent.ts","../src/components/BiometryManager/BiometryManager.ts","../src/components/BiometryManager/requestBiometryInfo.ts","../src/components/BiometryManager/initBiometryManager.ts","../src/classes/WithTrackableState.ts","../src/components/ClosingBehavior/ClosingBehavior.ts","../src/components/ClosingBehavior/initClosingBehavior.ts","../src/classes/WithSupports.ts","../src/parsing/ArrayParser/ArrayParser.ts","../src/parsing/parsers/array.ts","../src/components/CloudStorage/CloudStorage.ts","../src/components/CloudStorage/initCloudStorage.ts","../src/components/HapticFeedback/HapticFeedback.ts","../src/components/HapticFeedback/initHapticFeedback.ts","../src/components/InitData/InitData.ts","../src/components/InitData/initInitData.ts","../src/components/InitData/parseInitData.ts","../src/components/Invoice/Invoice.ts","../src/components/Invoice/initInvoice.ts","../src/components/MainButton/MainButton.ts","../src/components/MainButton/initMainButton.ts","../src/components/MiniApp/parsing/contact.ts","../src/supports/createSupportsParamFn.ts","../src/timeout/sleep.ts","../src/components/MiniApp/MiniApp.ts","../src/components/MiniApp/initMiniApp.ts","../src/components/Popup/preparePopupParams.ts","../src/components/Popup/Popup.ts","../src/components/Popup/initPopup.ts","../src/components/QRScanner/QRScanner.ts","../src/components/QRScanner/initQRScanner.ts","../src/components/SettingsButton/SettingsButton.ts","../src/components/SettingsButton/initSettingsButton.ts","../src/components/ThemeParams/parsing/parseThemeParams.ts","../src/components/ThemeParams/ThemeParams.ts","../src/components/ThemeParams/initThemeParams.ts","../src/components/ThemeParams/requestThemeParams.ts","../src/navigation/ensurePrefix.ts","../src/navigation/createSafeURL.ts","../src/components/Utils/Utils.ts","../src/components/Utils/initUtils.ts","../src/components/Viewport/requestViewport.ts","../src/components/Viewport/Viewport.ts","../src/components/Viewport/initViewport.ts","../src/css-vars/setCSSVar.ts","../src/css-vars/bindMiniAppCSSVars.ts","../src/css-vars/bindThemeParamsCSSVars.ts","../src/css-vars/bindViewportCSSVars.ts","../src/env/initWeb.ts","../src/env/isSSR.ts","../src/env/isTMA.ts","../src/env/mockTelegramEnv.ts","../src/errors/isSDKError.ts","../src/errors/isSDKErrorOfType.ts","../src/navigation/BasicNavigator/prepareItem.ts","../src/navigation/BasicNavigator/BasicNavigator.ts","../src/navigation/BrowserNavigator/basicItemToBrowser.ts","../src/navigation/urlToPath.ts","../src/navigation/BrowserNavigator/prepareItem.ts","../src/navigation/go.ts","../src/navigation/drop.ts","../src/navigation/getPathname.ts","../src/navigation/BrowserNavigator/BrowserNavigator.ts","../src/navigation/BrowserNavigator/createBrowserNavigatorFromLocation.ts","../src/navigation/getHash.ts","../src/navigation/initNavigator.ts"],"sourcesContent":["/**\n * Creates resettable singleton. We mostly need it for test purposes.\n * @param create - function which creates singleton entity.\n * @param onReset - function which will be called in case, singleton was reset.\n */\nexport function createSingleton<T>(\n  create: (reset: () => void) => T,\n  onReset?: (entity: T) => void,\n): [\n  /**\n   * Returns singleton entity.\n   */\n  get: () => T,\n  /**\n   * Resets last stored entity.\n   */\n  reset: () => void,\n] {\n  let cached: T | undefined;\n  const reset = () => {\n    cached !== undefined && onReset && onReset(cached);\n    cached = undefined;\n  };\n\n  return [() => (cached === undefined ? cached = create(reset) : cached), reset];\n}\n","import { miniAppsEventEmitter, resetMiniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Removes global event listener.\n * @param listener - event listener.\n */\nexport function unsubscribe(listener: MiniAppsSubscribeListener): void {\n  const ee = miniAppsEventEmitter();\n  const { count } = ee;\n  ee.unsubscribe(listener);\n\n  // If event emitter now has no listeners, we can make a cleanup.\n  if (count && !ee.count) {\n    resetMiniAppsEventEmitter();\n  }\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport { unsubscribe } from '../listening/unsubscribe.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Subscribes to all events sent from the native Telegram application.\n * @param listener - event listener to bind.\n * @returns Function to remove bound event listener.\n */\nexport function subscribe(listener: MiniAppsSubscribeListener): RemoveEventListenerFn {\n  miniAppsEventEmitter().subscribe(listener);\n  return () => unsubscribe(listener);\n}\n","/**\n * Message log level.\n */\nexport type LogLevel = 'log' | 'error';\n\nexport interface LoggerOptions {\n  bgColor?: string;\n  textColor?: string;\n}\n\nexport class Logger implements Pick<Console, 'log' | 'error'> {\n  constructor(\n    private readonly scope: string,\n    private readonly options: LoggerOptions = {},\n  ) {\n  }\n\n  /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */\n  private print(level: LogLevel, ...args: any[]): void {\n    const now = new Date();\n    const date = Intl\n      .DateTimeFormat('en-GB', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        fractionalSecondDigits: 3,\n        timeZone: 'UTC',\n      })\n      .format(now);\n\n    const { textColor, bgColor } = this.options;\n    const commonCss = 'font-weight: bold;padding: 0 5px;border-radius:5px';\n\n    console[level](\n      `%c${date}%c / %c${this.scope}`,\n      `${commonCss};background-color: lightblue;color:black`,\n      '',\n      `${commonCss};${textColor ? `color:${textColor};` : ''}${bgColor ? `background-color:${bgColor}` : ''}`,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      ...args,\n    );\n  }\n\n  /**\n   * Prints error message into a console.\n   * @param args\n   */\n  error(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('error', ...args);\n  }\n\n  /**\n   * Prints log message into a console.\n   * @param args\n   */\n  log(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('log', ...args);\n  }\n}\n","import { subscribe } from '@/bridge/events/listening/subscribe.js';\nimport { unsubscribe } from '@/bridge/events/listening/unsubscribe.js';\nimport { Logger } from '@/logger/Logger.js';\nimport type { MiniAppsSubscribeListener } from '@/bridge/events/types.js';\n\nexport const logger = new Logger('SDK', {\n  bgColor: 'forestgreen',\n  textColor: 'white',\n});\n\nlet debugEnabled = false;\n\nconst onEvent: MiniAppsSubscribeListener = ({ name, payload }) => {\n  logger.log('Event received:', payload ? { name, payload } : { name });\n};\n\n/**\n * Sets new debug mode. Enabling debug mode leads to printing additional messages in the console,\n * related to the processes inside the package.\n * @param enable - should debug be enabled.\n */\nexport function setDebug(enable: boolean): void {\n  if (debugEnabled !== enable) {\n    debugEnabled = enable;\n    enable ? subscribe(onEvent) : unsubscribe(onEvent);\n  }\n}\n\n/**\n * Logs info message into the console.\n * @param args - additional arguments.\n */\nexport function log(...args: any[]): void {\n  if (debugEnabled) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    logger.log(...args);\n  }\n}\n","import type { RemoveEventListenerFn } from '../types.js';\nimport type {\n  EmptyEventName,\n  EventListener,\n  EventName,\n  EventParams,\n  NonEmptyEventName,\n  SubscribeListener,\n} from './types.js';\n\nexport class EventEmitter<Schema> {\n  private readonly listeners: Map<\n    string,\n    [listener: EventListener<any>, once?: boolean][]\n  > = new Map();\n\n  private listenersCount = 0;\n\n  private subscribeListeners: SubscribeListener<Schema>[] = [];\n\n  /**\n   * Removes all event listeners.\n   */\n  clear() {\n    this.listeners.clear();\n    this.subscribeListeners = [];\n  }\n\n  /**\n   * Returns count of bound listeners.\n   */\n  get count(): number {\n    return this.listenersCount + this.subscribeListeners.length;\n  }\n\n  /**\n   * Emits known event which has no parameters.\n   * @param event - event name.\n   */\n  emit<E extends EmptyEventName<Schema>>(event: E): void;\n\n  /**\n   * Emits known event which has parameters.\n   * @param event - event name.\n   * @param args - list of event listener arguments.\n   */\n  emit<E extends NonEmptyEventName<Schema>>(event: E, ...args: EventParams<Schema[E]>): void;\n\n  emit(event: EventName<Schema>, ...args: any[]): void {\n    this.subscribeListeners.forEach((l) => l({\n      event,\n      args: args as EventParams<Schema[EventName<Schema>]>,\n    }));\n\n    const listeners = this.listeners.get(event) || [];\n\n    listeners.forEach(([listener, once]) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      listener(...args);\n      if (once) {\n        this.off(event, listener);\n      }\n    });\n  }\n\n  /**\n   * Adds new event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener be called only once.\n   * @returns Function to remove bound event listener.\n   */\n  on<E extends EventName<Schema>>(\n    event: E,\n    listener: EventListener<Schema[E]>,\n    once?: boolean,\n  ): RemoveEventListenerFn {\n    let listeners = this.listeners.get(event);\n    if (!listeners) {\n      this.listeners.set(event, listeners = []);\n    }\n\n    listeners.push([listener, once]);\n    this.listenersCount += 1;\n\n    return () => this.off(event, listener);\n  }\n\n  /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */\n  off<E extends EventName<Schema>>(event: E, listener: EventListener<Schema[E]>): void {\n    const listeners = this.listeners.get(event) || [];\n    for (let i = 0; i < listeners.length; i += 1) {\n      if (listener === listeners[i][0]) {\n        listeners.splice(i, 1);\n        this.listenersCount -= 1;\n        return;\n      }\n    }\n  }\n\n  /**\n   * Adds a new event listener for all events.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */\n  subscribe(listener: SubscribeListener<Schema>): RemoveEventListenerFn {\n    this.subscribeListeners.push(listener);\n    return () => this.unsubscribe(listener);\n  }\n\n  /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - event listener.\n   */\n  unsubscribe(listener: SubscribeListener<Schema>): void {\n    for (let i = 0; i < this.subscribeListeners.length; i += 1) {\n      if (this.subscribeListeners[i] === listener) {\n        this.subscribeListeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n}\n","import type { RemoveEventListenerFn } from './types.js';\n\n/**\n * Adds new event listener using window.addEventListener.\n * @param type - event name.\n * @param listener - event listener.\n * @param options - listening options.\n * @returns Function to remove event listener.\n */\nexport function onWindow<K extends keyof WindowEventMap>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): RemoveEventListenerFn {\n  window.addEventListener(type, listener, options);\n  return () => window.removeEventListener(type, listener, options);\n}\n","import { CleanupFn } from '@/types/index.js';\n\n/**\n * Returns a tuple, containing function to add cleanup, call cleanup, and flag showing whether\n * cleanup was called. Cleanup will not be performed in case, it was done before.\n */\nexport function createCleanup(...fns: (CleanupFn | CleanupFn[])[]): [\n  add: (fn: CleanupFn) => void,\n  cleanup: () => void,\n  cleanedUp: boolean,\n] {\n  let cleanedUp = false;\n  const cache = fns.flat(1);\n\n  return [\n    (fn) => !cleanedUp && cache.push(fn),\n    () => {\n      if (!cleanedUp) {\n        cleanedUp = true;\n        cache.forEach(clean => clean());\n      }\n    },\n    cleanedUp,\n  ];\n}","import type { ErrorType } from './errors.js';\n\n/**\n * Error used across the SDK.\n */\nexport class SDKError extends Error {\n  constructor(public readonly type: ErrorType, message?: string, cause?: unknown) {\n    super(message, { cause });\n    Object.setPrototypeOf(this, SDKError.prototype);\n  }\n}\n","import { SDKError } from './SDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Creates new error using specified type and message.\n * @param type - error code.\n * @param message - error message.\n * @param cause - original error.\n */\nexport function createError(type: ErrorType, message: string, cause?: unknown): SDKError {\n  return new SDKError(type, message, cause);\n}\n","/**\n * Specified Mini Apps method is unsupported.\n */\nexport const ERR_METHOD_UNSUPPORTED = 'ERR_METHOD_UNSUPPORTED';\n\n/**\n * Specified Mini Apps method parameter is unsupported.\n */\nexport const ERR_METHOD_PARAMETER_UNSUPPORTED = 'ERR_METHOD_PARAMETER_UNSUPPORTED';\n\n/**\n * Current environment is not Telegram application.\n */\nexport const ERR_UNKNOWN_ENV = 'ERR_UNKNOWN_ENV';\n\n/**\n * Telegram application returned and error while invoking custom method.\n */\nexport const ERR_INVOKE_CUSTOM_METHOD_RESPONSE = 'ERR_INVOKE_CUSTOM_METHOD_RESPONSE';\n\n/**\n * Timeout reached.\n */\nexport const ERR_TIMED_OUT = 'ERR_TIMED_OUT';\n\n/**\n * Value has unexpected type.\n */\nexport const ERR_UNEXPECTED_TYPE = 'ERR_UNEXPECTED_TYPE';\n\n/**\n * Something went wrong during value parsing.\n */\nexport const ERR_PARSE = 'ERR_PARSE';\n\n/**\n * Navigation entries list is empty.\n */\nexport const ERR_NAVIGATION_HISTORY_EMPTY = 'ERR_NAVIGATION_LIST_EMPTY';\n\n/**\n * Navigation entries cursor is invalid.\n */\nexport const ERR_NAVIGATION_INDEX_INVALID = 'ERR_NAVIGATION_CURSOR_INVALID';\n\n/**\n * Navigation entries item is invalid.\n */\nexport const ERR_NAVIGATION_ITEM_INVALID = 'ERR_NAVIGATION_ITEM_INVALID';\n\n/**\n * SSR component initialization failed.\n */\nexport const ERR_SSR_INIT = 'ERR_SSR_INIT';\n\n/**\n * Path starts from the invalid base.\n */\nexport const ERR_INVALID_PATH_BASE = 'ERR_INVALID_PATH_BASE';\n\nexport type ErrorType =\n  | typeof ERR_METHOD_UNSUPPORTED\n  | typeof ERR_METHOD_PARAMETER_UNSUPPORTED\n  | typeof ERR_UNKNOWN_ENV\n  | typeof ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n  | typeof ERR_TIMED_OUT\n  | typeof ERR_PARSE\n  | typeof ERR_UNEXPECTED_TYPE\n  | typeof ERR_NAVIGATION_HISTORY_EMPTY\n  | typeof ERR_NAVIGATION_INDEX_INVALID\n  | typeof ERR_NAVIGATION_ITEM_INVALID\n  | typeof ERR_SSR_INIT\n  | typeof ERR_INVALID_PATH_BASE;\n","import { createError } from '@/errors/createError.js';\nimport { ERR_UNEXPECTED_TYPE } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates instance of TypeError stating, that value has unexpected type.\n */\nexport function createTypeError(): SDKError {\n  return createError(ERR_UNEXPECTED_TYPE, 'Value has unexpected type');\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser } from '../types.js';\nimport type { ValueParserOptionalResult, ValueParserParseResult } from './types.js';\n\nexport class ValueParser<ResultType, IsOptional extends boolean> {\n  constructor(\n    protected parser: Parser<ResultType>,\n    protected isOptional: IsOptional,\n    protected type?: string,\n  ) {\n  }\n\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(value: unknown): ValueParserParseResult<ResultType, IsOptional> {\n    // In case, parsing result is specified as optional, and passed value is considered as empty,\n    // we can return undefined. Otherwise, pass to parser.\n    if (this.isOptional && value === undefined) {\n      return undefined as ValueParserParseResult<ResultType, IsOptional>;\n    }\n\n    try {\n      return this.parser(value) as ValueParserParseResult<ResultType, IsOptional>;\n    } catch (cause) {\n      throw createError(\n        ERR_PARSE,\n        `Unable to parse value${this.type ? ` as ${this.type}` : ''}`,\n        cause,\n      );\n    }\n  }\n\n  optional(): ValueParserOptionalResult<this, ResultType> {\n    this.isOptional = true as IsOptional;\n    return this as ValueParserOptionalResult<this, ResultType>;\n  }\n}\n","import { ValueParser } from './ValueParser/ValueParser.js';\nimport type { Parser } from './types.js';\n\nexport type ValueParserGenerator<T> = () => ValueParser<T, false>;\n\n/**\n * Creates function which generates new scalar value parser based on the specified one.\n * @param parser - parser to use as basic.\n * @param type - type name.\n */\nexport function createValueParserGenerator<T>(\n  parser: Parser<T>,\n  type?: string,\n): ValueParserGenerator<T> {\n  return () => new ValueParser(parser, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as boolean.\n */\nexport const boolean: ValueParserGenerator<boolean> = createValueParserGenerator((value) => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  const asString = String(value);\n\n  if (asString === '1' || asString === 'true') {\n    return true;\n  }\n\n  if (asString === '0' || asString === 'false') {\n    return false;\n  }\n\n  throw createTypeError();\n}, 'boolean');\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser, Schema } from './types.js';\n\n/**\n * Parses external value by specified schema. Functions iterates over each schema field\n * and uses getField function to get its value from the external source.\n * @param schema - object schema.\n * @param getField - function which gets external value by its field name.\n */\nexport function parseBySchema<T>(\n  schema: Schema<T>,\n  getField: (field: string) => unknown,\n): T {\n  const result = {} as T;\n\n  for (const field in schema) {\n    const definition = schema[field];\n    if (!definition) {\n      continue;\n    }\n\n    let from: string;\n    let parser: Parser<any>;\n\n    // In case, definition has \"type\" property, then SchemaFieldDetailed was passed.\n    if (typeof definition === 'function' || 'parse' in definition) {\n      // Otherwise we are working with either parser function or instance.\n      from = field;\n      parser = typeof definition === 'function' ? definition : definition.parse.bind(definition);\n    } else {\n      const { type: definitionType } = definition;\n\n      from = definition.from || field;\n      parser = typeof definitionType === 'function'\n        ? definitionType\n        : definitionType.parse.bind(definitionType);\n    }\n\n    try {\n      const parsedValue = parser(getField(from));\n      if (parsedValue !== undefined) {\n        (result as any)[field] = parsedValue;\n      }\n    } catch (error) {\n      throw createError(ERR_PARSE, `Unable to parse field \"${field}\"`, error);\n    }\n  }\n\n  return result;\n}\n","import { createTypeError } from './createTypeError.js';\n\n/**\n * Converts value to record.\n * @param value - value to convert.\n * @throws {Error} Value passed as a string does not represent JSON object.\n * @throws {Error} Value is not convertable.\n */\nexport function toRecord(value: unknown): Record<string, unknown> {\n  let formattedValue: any = value;\n\n  // Convert value to JSON in case, it is string. We expect value to be JSON string.\n  if (typeof formattedValue === 'string') {\n    formattedValue = JSON.parse(formattedValue);\n  }\n\n  // We expect json to be usual object.\n  if (\n    typeof formattedValue !== 'object'\n    || formattedValue === null\n    || Array.isArray(formattedValue)\n  ) {\n    throw createTypeError();\n  }\n\n  return formattedValue as Record<string, unknown>;\n}\n","import { parseBySchema } from '../parseBySchema.js';\nimport { toRecord } from '../toRecord.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new Json parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function json<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    const record = toRecord(value);\n    return parseBySchema(schema, (field) => record[field]);\n  }, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as number.\n */\nexport const number: ValueParserGenerator<number> = createValueParserGenerator((value) => {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    const num = Number(value);\n\n    if (!Number.isNaN(num)) {\n      return num;\n    }\n  }\n\n  throw createTypeError();\n}, 'number');\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as string.\n */\nexport const string: ValueParserGenerator<string> = createValueParserGenerator((value) => {\n  if (typeof value === 'string' || typeof value === 'number') {\n    return value.toString();\n  }\n  throw createTypeError();\n}, 'string');\n","import { json } from '@/parsing/parsers/json.js';\nimport { string } from '@/parsing/parsers/string.js';\n\n/**\n * Message format used in communication between client and Telegram applications.\n */\nexport interface MiniAppsMessage {\n  /**\n   * Event name.\n   */\n  eventType: string;\n  /**\n   * Event parameters.\n   */\n  eventData?: unknown;\n}\n\n/**\n * Parses value as a message between client and Telegram applications.\n * @param value - value to parse.\n */\nexport function parseMessage(value: unknown): MiniAppsMessage {\n  return json({\n    eventType: string(),\n    eventData: (v) => v,\n  }).parse(value);\n}\n","/**\n * Removes global event handlers, used by the package.\n */\nexport function cleanupEventHandlers(): void {\n  ['TelegramGameProxy_receiveEvent', 'TelegramGameProxy', 'Telegram'].forEach((prop) => {\n    delete window[prop as keyof Window];\n  });\n}\n","/**\n * Emits event sent from Telegram native application like it was sent in\n * default web environment between 2 iframes. It dispatches new MessageEvent\n * and expects it to be handled via `window.addEventListener('message', ...)`\n * as developer would do it to handle messages sent from the parent iframe.\n * @param eventType - event name.\n * @param eventData - event payload.\n */\nexport function emitMiniAppsEvent(eventType: string, eventData: unknown): void {\n  window.dispatchEvent(new MessageEvent('message', {\n    data: JSON.stringify({ eventType, eventData }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent,\n  }));\n}\n","import { emitMiniAppsEvent } from './emitMiniAppsEvent.js';\n\n/**\n * Defines special handlers by known paths, which are recognized by\n * Telegram as ports to receive events. This function also sets special\n * function in global window object to prevent duplicate declaration.\n */\nexport function defineEventHandlers() {\n  // Iterate over each path, where \"receiveEvent\" function should be\n  // defined. This function is called by external environment in case,\n  // it wants to emit some event.\n  [\n    ['TelegramGameProxy_receiveEvent'], // Windows Phone.\n    ['TelegramGameProxy', 'receiveEvent'], // Desktop.\n    ['Telegram', 'WebView', 'receiveEvent'], // Android and iOS.\n  ].forEach((path) => {\n    // Path starts from the \"window\" object.\n    let pointer = window as any;\n\n    path.forEach((item, idx, arr) => {\n      // We are on the last iteration, where function property name is passed.\n      if (idx === arr.length - 1) {\n        pointer[item] = emitMiniAppsEvent;\n        return;\n      }\n\n      if (!(item in pointer)) {\n        pointer[item] = {};\n      }\n      pointer = pointer[item];\n    });\n  });\n}\n","import { logger } from '@/debug/debug.js';\nimport { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { onWindow } from '@/events/onWindow.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport { type MiniAppsMessage, parseMessage } from '../../parseMessage.js';\nimport { cleanupEventHandlers } from '../event-handlers/cleanupEventHandlers.js';\nimport { defineEventHandlers } from '../event-handlers/defineEventHandlers.js';\nimport type {\n  MiniAppsEventName,\n  MiniAppsEventPayload,\n  MiniAppsEventEmitter,\n  MiniAppsEvents,\n} from '../types.js';\n\n/**\n * Parsers for problematic Mini Apps events.\n */\nconst parsers: {\n  [E in MiniAppsEventName]?: {\n    parse(value: unknown): MiniAppsEventPayload<E>;\n  }\n} = {\n  clipboard_text_received: json({\n    req_id: string(),\n    data: (value) => (value === null ? value : string().optional().parse(value)),\n  }),\n  custom_method_invoked: json({\n    req_id: string(),\n    result: (value) => value,\n    error: string().optional(),\n  }),\n  popup_closed: {\n    parse(value) {\n      return json({\n        button_id: (value) => (\n          value === null || value === undefined\n            ? undefined\n            : string().parse(value)\n        ),\n      }).parse(value ?? {});\n    },\n  },\n  viewport_changed: json({\n    height: number(),\n    width: (value) => (\n      value === null || value === undefined\n        ? window.innerWidth\n        : number().parse(value)\n    ),\n    is_state_stable: boolean(),\n    is_expanded: boolean(),\n  }),\n};\n\n/**\n * Creates new event emitter, which handles events from the Telegram application.\n */\nexport function createMiniAppsEventEmitter(): [\n  /**\n   * Created event emitter.\n   */\n  emitter: MiniAppsEventEmitter,\n  /**\n   * Function to dispose created emitter.\n   */\n  dispose: () => void,\n] {\n  // We use this event emitter for better developer experience, using the subscribe method.\n  const subEmitter = new EventEmitter<{ event: any[] }>();\n\n  // Event emitter processing all the incoming events.\n  const mainEmitter = new EventEmitter<MiniAppsEvents>();\n\n  mainEmitter.subscribe(event => {\n    subEmitter.emit('event', { name: event.event, payload: event.args[0] });\n  });\n\n  // Define event handles, which will proxy native method calls to their web version.\n  defineEventHandlers();\n\n  // List of cleanup functions, which should be called on dispose.\n  const [, cleanup] = createCleanup(\n    // Don't forget to remove created handlers.\n    cleanupEventHandlers,\n    // Add \"resize\" event listener to make sure, we always have fresh viewport information.\n    // Desktop version of Telegram is sometimes not sending the viewport_changed\n    // event. For example, when the MainButton is shown. That's why we should\n    // add our own listener to make sure, viewport information is always fresh.\n    // Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/10\n    onWindow('resize', () => {\n      mainEmitter.emit('viewport_changed', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: true,\n        is_expanded: true,\n      });\n    }),\n    // Add listener, which handles events sent from the Telegram web application and also events\n    // generated by the local emitEvent function.\n    onWindow('message', (event) => {\n      // Ignore non-parent window messages.\n      if (event.source !== window.parent) {\n        return;\n      }\n\n      // Parse incoming event data.\n      let message: MiniAppsMessage;\n      try {\n        message = parseMessage(event.data);\n      } catch {\n        // We ignore incorrect messages as they could be generated by any other code.\n        return;\n      }\n\n      const { eventType, eventData } = message;\n      const parser = parsers[eventType as keyof typeof parsers];\n\n      try {\n        const data = parser ? parser.parse(eventData) : eventData;\n        mainEmitter.emit(...(data ? [eventType, data] : [eventType]) as [any, any]);\n      } catch (cause) {\n        logger.error(\n          `An error occurred processing the \"${eventType}\" event from the Telegram application.\\nPlease, file an issue here:\\nhttps://github.com/Telegram-Mini-Apps/tma.js/issues/new/choose`,\n          message,\n          cause,\n        );\n      }\n    }),\n    // Clear emitters.\n    () => subEmitter.clear(),\n    () => mainEmitter.clear(),\n  );\n\n  return [{\n    on: mainEmitter.on.bind(mainEmitter),\n    off: mainEmitter.off.bind(mainEmitter),\n    subscribe(listener) {\n      return subEmitter.on('event', listener);\n    },\n    unsubscribe(listener) {\n      subEmitter.off('event', listener);\n    },\n    get count() {\n      return mainEmitter.count + subEmitter.count;\n    },\n  }, cleanup];\n}\n","import { createSingleton } from '@/misc/createSingleton.js';\n\nimport { createMiniAppsEventEmitter } from './createMiniAppsEventEmitter.js';\nimport type { MiniAppsEventEmitter } from '../types.js';\n\nconst [get, resetMiniAppsEventEmitter] = createSingleton(\n  (reset) => {\n    const [emitter, cleanup] = createMiniAppsEventEmitter();\n\n    // Rewire \"off\" method and make it reset singleton if no event listeners left.\n    const off = emitter.off.bind(emitter);\n    emitter.off = (event, listener) => {\n      const { count } = emitter;\n      off(event, listener);\n\n      // If event emitter now has no listeners, we can perform a reset.\n      if (count && !emitter.count) {\n        reset();\n      }\n    };\n\n    return [emitter, cleanup] as const;\n  },\n  ([, cleanup]) => cleanup(),\n);\n\n/**\n * Returns Mini Apps event emitter singleton.\n */\nexport function miniAppsEventEmitter(): MiniAppsEventEmitter {\n  return get()[0];\n}\n\nexport { resetMiniAppsEventEmitter };\n","import { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Removes listener from specified event.\n * @param event - event to listen.\n * @param listener - event listener to remove.\n */\nexport function off<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n): void {\n  miniAppsEventEmitter().off(event, listener);\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Adds new listener to the specified event. Returns handler\n * which allows to stop listening to event.\n * @param event - event name.\n * @param listener - event listener.\n * @param once - should listener be called only once.\n * @returns Function to remove bound event listener.\n */\nexport function on<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n  once?: boolean,\n): RemoveEventListenerFn {\n  return miniAppsEventEmitter().on(event, listener, once);\n}\n","/**\n * States that passed value is Record and not Array.\n * @param value - value to check.\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n","import type { Version } from './types.js';\n\n/**\n * Returns 1 in case, version \"a\" is greater than \"b\".\n * Returns 0 in case, version \"a\" equal to \"b\".\n * Returns -1 in case, version \"a\" is lower than \"b\".\n * @param a - first version.\n * @param b - second version.\n */\nexport function compareVersions(a: Version, b: Version): number {\n  // Split both of the version by dot.\n  const aParts = a.split('.');\n  const bParts = b.split('.');\n\n  // Compute maximum length.\n  const len = Math.max(aParts.length, bParts.length);\n\n  // Iterate over each part of version and compare them. In case, part is\n  // missing, assume its value is equal to 0.\n  for (let i = 0; i < len; i += 1) {\n    const aVal = parseInt(aParts[i] || '0', 10);\n    const bVal = parseInt(bParts[i] || '0', 10);\n\n    if (aVal === bVal) {\n      continue;\n    }\n    return aVal > bVal ? 1 : -1;\n  }\n  return 0;\n}\n","import { compareVersions } from '@/version/compareVersions.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodVersionedParams,\n  MiniAppsMethodWithVersionedParams,\n} from '@/bridge/methods/types/methods.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * Returns true if \"a\" version is less than or equal to \"b\" version.\n * @param a\n * @param b\n */\nfunction versionLessOrEqual(a: Version, b: Version): boolean {\n  return compareVersions(a, b) <= 0;\n}\n\n/**\n * Returns true in case, passed parameter in specified method is supported.\n * @param method - method name\n * @param param - method parameter\n * @param inVersion - platform version.\n */\nexport function supports<M extends MiniAppsMethodWithVersionedParams>(\n  method: M,\n  param: MiniAppsMethodVersionedParams<M>,\n  inVersion: Version,\n): boolean;\n\n/**\n * Returns true in case, specified method is supported in passed version.\n * @param method - method name.\n * @param inVersion - platform version.\n */\nexport function supports(method: MiniAppsMethodName, inVersion: Version): boolean;\n\nexport function supports(\n  method: MiniAppsMethodName,\n  paramOrVersion: Version | string,\n  inVersion?: string,\n): boolean {\n  // Method name, parameter, target version.\n  if (typeof inVersion === 'string') {\n    if (method === 'web_app_open_link') {\n      if (paramOrVersion === 'try_instant_view') {\n        return versionLessOrEqual('6.4', inVersion);\n      }\n      if (paramOrVersion === 'try_browser') {\n        return versionLessOrEqual('7.6', inVersion);\n      }\n    }\n\n    if (method === 'web_app_set_header_color') {\n      if (paramOrVersion === 'color') {\n        return versionLessOrEqual('6.9', inVersion);\n      }\n    }\n\n    if (method === 'web_app_close' && paramOrVersion === 'return_back') {\n      return versionLessOrEqual('7.6', inVersion);\n    }\n  }\n\n  switch (method) {\n    case 'web_app_open_tg_link':\n    case 'web_app_open_invoice':\n    case 'web_app_setup_back_button':\n    case 'web_app_set_background_color':\n    case 'web_app_set_header_color':\n    case 'web_app_trigger_haptic_feedback':\n      return versionLessOrEqual('6.1', paramOrVersion);\n    case 'web_app_open_popup':\n      return versionLessOrEqual('6.2', paramOrVersion);\n    case 'web_app_close_scan_qr_popup':\n    case 'web_app_open_scan_qr_popup':\n    case 'web_app_read_text_from_clipboard':\n      return versionLessOrEqual('6.4', paramOrVersion);\n    case 'web_app_switch_inline_query':\n      return versionLessOrEqual('6.7', paramOrVersion);\n    case 'web_app_invoke_custom_method':\n    case 'web_app_request_write_access':\n    case 'web_app_request_phone':\n      return versionLessOrEqual('6.9', paramOrVersion);\n    case 'web_app_setup_settings_button':\n      return versionLessOrEqual('6.10', paramOrVersion);\n    case 'web_app_biometry_get_info':\n    case 'web_app_biometry_open_settings':\n    case 'web_app_biometry_request_access':\n    case 'web_app_biometry_request_auth':\n    case 'web_app_biometry_update_token':\n      return versionLessOrEqual('7.2', paramOrVersion);\n    default:\n      return [\n        'iframe_ready',\n        'iframe_will_reload',\n        'web_app_close',\n        'web_app_data_send',\n        'web_app_expand',\n        'web_app_open_link',\n        'web_app_ready',\n        'web_app_request_theme',\n        'web_app_request_viewport',\n        'web_app_setup_main_button',\n        'web_app_setup_closing_behavior',\n      ].includes(method);\n  }\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `external.notify` property and `notify` is a\n * function.\n * @param value - value to check.\n */\nexport function hasExternalNotify<T extends object>(value: T): value is (\n  T & {\n  external: {\n    notify: (...args: any) => any;\n  };\n}) {\n  return 'external' in value\n    && isRecord(value.external)\n    && 'notify' in value.external\n    && typeof value.external.notify === 'function';\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `TelegramWebviewProxy.postEvent` property and\n * `postEvent` is a function.\n * @param value - value to check.\n */\nexport function hasWebviewProxy<T extends {}>(value: T): value is (\n  T & {\n  TelegramWebviewProxy: {\n    postEvent: (...args: unknown[]) => unknown;\n  }\n}) {\n  return 'TelegramWebviewProxy' in value\n    && isRecord(value.TelegramWebviewProxy)\n    && 'postEvent' in value.TelegramWebviewProxy\n    && typeof value.TelegramWebviewProxy.postEvent === 'function';\n}\n","/**\n * @see https://stackoverflow.com/a/326076\n * @returns True, if current environment is iframe.\n */\nexport function isIframe(): boolean {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return true;\n  }\n}\n","const INITIAL_TARGET_ORIGIN = 'https://web.telegram.org'\n\nlet currentTargetOrigin = INITIAL_TARGET_ORIGIN;\n\n/**\n * Sets a new global targetOrigin, used by the `postEvent` method.\n * The default value is \"https://web.telegram.org\".\n * You don't need to use this method until you know what you are doing.\n *\n * This method could be used for test purposes.\n * @param value - new target origin.\n * @see postEvent\n */\nexport function setTargetOrigin(value: string): void {\n  currentTargetOrigin = value;\n}\n\n/**\n * Sets the initial target origin.\n */\nexport function resetTargetOrigin(): void {\n  setTargetOrigin(INITIAL_TARGET_ORIGIN);\n}\n\n/**\n * Returns current global target origin.\n */\nexport function targetOrigin(): string {\n  return currentTargetOrigin;\n}\n","import { log } from '@/debug/debug.js';\nimport { hasExternalNotify } from '@/env/hasExternalNotify.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\nimport { isIframe } from '@/env/isIframe.js';\nimport { createError } from '@/errors/createError.js';\nimport { ERR_UNKNOWN_ENV } from '@/errors/errors.js';\n\nimport { targetOrigin as targetOriginFn } from '../target-origin.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodParams,\n  MiniAppsMethodWithOptionalParams,\n  MiniAppsMethodWithoutParams,\n  MiniAppsMethodWithRequiredParams,\n} from './types/methods.js';\n\ninterface PostEventOptions {\n  /**\n   * Origin used while posting a message.\n   *\n   * This option is only used if the current environment is browser (Web version of Telegram)\n   * and could be used for test purposes.\n   * @default 'https://web.telegram.org'\n   */\n  targetOrigin?: string;\n}\n\nexport type PostEvent = typeof postEvent;\n\n/**\n * Calls Mini Apps method with optional parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithOptionalParams>(\n  method: Method,\n  params?: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps method without parameters.\n * @param method - method name.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent(\n  method: MiniAppsMethodWithoutParams | MiniAppsMethodWithOptionalParams,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps method with parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithRequiredParams>(\n  method: Method,\n  params: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\nexport function postEvent(\n  eventType: MiniAppsMethodName,\n  paramsOrOptions?: MiniAppsMethodParams<MiniAppsMethodName> | PostEventOptions,\n  options?: PostEventOptions,\n): void {\n  let postOptions: PostEventOptions = {};\n  let eventData: any;\n\n  if (!paramsOrOptions && !options) {\n    // Parameters and options were not passed.\n    postOptions = {};\n  } else if (paramsOrOptions && options) {\n    // Both parameters and options passed.\n    postOptions = options;\n    eventData = paramsOrOptions;\n  } else if (paramsOrOptions) {\n    // Only parameters were passed.\n    if ('targetOrigin' in paramsOrOptions) {\n      postOptions = paramsOrOptions;\n    } else {\n      eventData = paramsOrOptions;\n    }\n  }\n\n  log('Posting event:', eventData\n    ? { event: eventType, data: eventData }\n    : { event: eventType });\n\n  // Telegram Web.\n  if (isIframe()) {\n    return window.parent.postMessage(\n      JSON.stringify({ eventType, eventData }),\n      postOptions.targetOrigin || targetOriginFn(),\n    );\n  }\n\n  // Telegram for Windows Phone or Android.\n  if (hasExternalNotify(window)) {\n    window.external.notify(JSON.stringify({ eventType, eventData }));\n    return;\n  }\n\n  // Telegram for iOS and macOS.\n  if (hasWebviewProxy(window)) {\n    window.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n    return;\n  }\n\n  // Otherwise current environment is unknown, and we are not able to send event.\n  throw createError(\n    ERR_UNKNOWN_ENV,\n    'Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment.',\n  );\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_METHOD_PARAMETER_UNSUPPORTED, ERR_METHOD_UNSUPPORTED } from '@/errors/errors.js';\nimport { isRecord } from '@/misc/isRecord.js';\nimport { supports } from '@/supports/supports.js';\nimport type { Version } from '@/version/types.js';\n\nimport { type PostEvent, postEvent } from './postEvent.js';\n\n/**\n * Creates a function which checks if specified method and parameters are supported.\n *\n * If method or parameters are unsupported, an error will be thrown.\n * @param version - Telegram Mini Apps version.\n * @throws {SDKError} ERR_METHOD_UNSUPPORTED\n * @throws {SDKError} ERR_METHOD_PARAMETER_UNSUPPORTED\n * @see ERR_METHOD_UNSUPPORTED\n * @see ERR_METHOD_PARAMETER_UNSUPPORTED\n */\nexport function createPostEvent(version: Version): PostEvent {\n  return (method: any, params: any) => {\n    // Firstly, check if a method is supported.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    if (!supports(method, version)) {\n      throw createError(ERR_METHOD_UNSUPPORTED, `Method \"${method}\" is unsupported in Mini Apps version ${version}`);\n    }\n\n    // Method could use parameters, which are supported only in specific\n    // versions of Mini Apps.\n    // We are validating only those parameters, which are not backward compatible.\n    if (\n      isRecord(params)\n      && method === 'web_app_set_header_color'\n      && 'color' in params\n      && !supports(method, 'color', version)\n    ) {\n      throw createError(\n        ERR_METHOD_PARAMETER_UNSUPPORTED,\n        `Parameter \"color\" of \"${method}\" method is unsupported in Mini Apps version ${version}`,\n      );\n    }\n\n    return postEvent(method, params);\n  };\n}\n","type CaptureSameReqFn = (payload: { req_id: string }) => boolean;\n\n/**\n * Returns a function which can be used in `request` function `capture` property to capture\n * the event with the same request identifier.\n * @param reqId - request identifier.\n */\nexport function captureSameReq(reqId: string): CaptureSameReqFn {\n  return ({ req_id }) => req_id === reqId;\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_TIMED_OUT } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates new timeout error.\n * @param timeout - timeout in ms.\n */\nexport function createTimeoutError(timeout: number): SDKError {\n  return createError(ERR_TIMED_OUT, `Timeout reached: ${timeout}ms`);\n}\n","import { createTimeoutError } from '@/timeout/createTimeoutError.js';\n\n/**\n * Runs passed function or promise with specified deadline presented via timeout argument.\n * @param funcOrPromise - function to execute or pending promise.\n * @param timeout - completion timeout.\n */\nexport function withTimeout<T>(\n  funcOrPromise: Promise<T> | (() => Promise<T>),\n  timeout: number,\n): Promise<T> {\n  return Promise.race([\n    typeof funcOrPromise === 'function' ? funcOrPromise() : funcOrPromise,\n    new Promise<never>((_, rej) => {\n      setTimeout(() => {\n        rej(createTimeoutError(timeout));\n      }, timeout);\n    }),\n  ]);\n}\n","import { withTimeout } from '@/timeout/withTimeout.js';\nimport type { ExecuteWithOptions, If, IsNever } from '@/types/index.js';\n\nimport { on } from './events/listening/on.js';\nimport { postEvent as defaultPostEvent } from './methods/postEvent.js';\nimport type { MiniAppsEventName, MiniAppsEventPayload } from './events/types.js';\nimport type { MiniAppsMethodName, MiniAppsMethodParams } from './methods/types/index.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\n\n/**\n * Returns all possible payloads for the specified events array.\n */\nexport type RequestEventsPayloads<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? MiniAppsEventPayload<U>\n    : never;\n\nexport type RequestCaptureEventsFn<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? (payload: {\n      [K in U]: If<\n        IsNever<MiniAppsEventPayload<K>>,\n        { event: K },\n        { event: K; payload: MiniAppsEventPayload<K> }\n      >\n    }[U]) => boolean\n    : never;\n\nexport type RequestCaptureEventFn<E extends MiniAppsEventName> = If<\n  IsNever<MiniAppsEventPayload<E>>,\n  () => boolean,\n  (payload: MiniAppsEventPayload<E>) => boolean\n>;\n\n/**\n * `request` method options.\n * @see request\n */\nexport type RequestOptions<M extends MiniAppsMethodName, E, C> = {\n    /**\n     * Mini Apps method name.\n     */\n    method: M;\n    /**\n     * Tracked Mini Apps events.\n     */\n    event: E;\n    /**\n     * Should return true if this event should be captured.\n     * A request will be captured if this property is omitted.\n     */\n    capture?: C;\n  }\n  & ExecuteWithOptions\n  & If<IsNever<MiniAppsMethodParams<M>>, {}, {\n  /**\n   * List of method parameters.\n   */\n  params: MiniAppsMethodParams<M>\n}>;\n\ntype AnyRequestResult =\n  | MiniAppsEventPayload<MiniAppsEventName>\n  | RequestEventsPayloads<MiniAppsEventName[]>;\n\n/**\n * Calls specified Mini Apps method and captures specified event.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName>(\n  options: RequestOptions<M, E, RequestCaptureEventFn<E>>,\n): Promise<MiniAppsEventPayload<E>>;\n\n/**\n * Calls specified Mini Apps method and captures one of the specified events.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the first captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName[]>(\n  options: RequestOptions<M, E, RequestCaptureEventsFn<E>>,\n): Promise<RequestEventsPayloads<E>>;\n\nexport async function request<M extends MiniAppsMethodName>(\n  options:\n    | RequestOptions<M, MiniAppsEventName, RequestCaptureEventFn<MiniAppsEventName>>\n    | RequestOptions<M, MiniAppsEventName[], RequestCaptureEventsFn<MiniAppsEventName[]>>,\n): Promise<AnyRequestResult> {\n  let resolve: (payload: AnyRequestResult) => void;\n  const promise = new Promise<AnyRequestResult>(res => resolve = res);\n\n  const { event, capture, timeout } = options;\n  const [, cleanup] = createCleanup(\n    // We need to iterate over all tracked events, and create their event listeners.\n    (Array.isArray(event) ? event : [event]).map((ev) => {\n      // Each event listener waits for the event to occur.\n      // Then, if the capture function was passed, we should check if the event should be captured.\n      // If the function is omitted, we instantly capture the event.\n      return on(ev, (payload) => {\n        if (!capture || (\n          Array.isArray(event)\n            ? (capture as RequestCaptureEventsFn<MiniAppsEventName[]>)({\n              event: ev,\n              payload: payload as any,\n            })\n            : (capture as RequestCaptureEventFn<MiniAppsEventName>)(payload)\n        )) {\n          resolve(payload);\n        }\n      });\n    }),\n  );\n\n  try {\n    (options.postEvent || defaultPostEvent)(options.method as any, (options as any).params);\n    return await (timeout ? withTimeout(promise, timeout) : promise);\n  } finally {\n    // After promise execution was completed, don't forget to remove all the listeners.\n    cleanup();\n  }\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_INVOKE_CUSTOM_METHOD_RESPONSE } from '@/errors/errors.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { captureSameReq } from './captureSameReq.js';\nimport { request } from './request.js';\nimport type { CustomMethodName, CustomMethodParams } from './methods/types/custom-methods.js';\n\n/**\n * Invokes known custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport async function invokeCustomMethod<M extends CustomMethodName>(\n  method: M,\n  params: CustomMethodParams<M>,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\n/**\n * Invokes unknown custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\nexport async function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options: ExecuteWithOptions = {},\n): Promise<unknown> {\n  const {\n    result,\n    error,\n  } = await request({\n    ...options,\n    method: 'web_app_invoke_custom_method',\n    event: 'custom_method_invoked',\n    params: {\n      method,\n      params,\n      req_id: requestId,\n    },\n    capture: captureSameReq(requestId),\n  });\n\n  if (error) {\n    throw createError(ERR_INVOKE_CUSTOM_METHOD_RESPONSE, error);\n  }\n\n  return result;\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Function which joins passed values with space following these rules:\n * 1. If value is non-empty string, it will be added to output.\n * 2. If value is object, only those keys will be added, which values are truthy.\n * 3. If value is array, classNames will be called with this value spread.\n * 4. All other values are ignored.\n *\n * You can find this function to similar one from the package {@link https://www.npmjs.com/package/classnames|classnames}.\n * @param values - values array.\n * @returns Final class name.\n */\nexport function classNames(...values: any[]): string {\n  return values\n    .map((value) => {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (isRecord(value)) {\n        return classNames(Object.entries(value).map((entry) => entry[1] && entry[0]));\n      }\n\n      if (Array.isArray(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return classNames(...value);\n      }\n    })\n    .filter(Boolean)\n    .join(' ');\n}\n","import { isRecord } from '@/misc/isRecord.js';\nimport type { UnionOptionalKeys, UnionRequiredKeys } from '@/types/unions.js';\n\nimport { classNames } from './classNames.js';\n\nexport type MergeClassNames<Tuple extends any[]> =\n  // Removes all types from union which will be ignored by the mergeClassNames function.\n  Exclude<Tuple[number], number | string | null | undefined | any[] | boolean> extends infer Union\n    ? {\n    [K in UnionRequiredKeys<Union>]: string;\n  } & {\n    [K in UnionOptionalKeys<Union>]?: string;\n  }\n    : never;\n\n/**\n * Merges 2 sets of parameters. Function expects passing an array of objects with values, which\n * could be passed to `classNames` function. As the result, it returns an object with keys\n * from all objects with merged values.\n * @see classNames\n */\nexport function mergeClassNames<T extends any[]>(...partials: T): MergeClassNames<T> {\n  return partials.reduce<MergeClassNames<T>>((acc, partial) => {\n    if (!isRecord(partial)) {\n      return acc;\n    }\n\n    Object.entries(partial).forEach(([key, value]) => {\n      const className = classNames((acc as any)[key], value);\n\n      if (className.length) {\n        (acc as any)[key] = className;\n      }\n    });\n\n    return acc;\n  }, {} as MergeClassNames<T>);\n}\n","import type { RGB } from './types.js';\n\n/**\n * Returns true in case, passed value has #RRGGBB format.\n * @param value - value to check.\n */\nexport function isRGB(value: string): value is RGB {\n  return /^#[\\da-f]{6}$/i.test(value);\n}\n","import type { RGBShort } from './types.js';\n\n/**\n * Returns true in case, passed value has #RGB format.\n * @param value - value to check.\n */\nexport function isRGBShort(value: string): value is RGBShort {\n  return /^#[\\da-f]{3}$/i.test(value);\n}\n","import { isRGB } from './isRGB.js';\nimport { isRGBShort } from './isRGBShort.js';\nimport type { RGB } from './types.js';\n\n/**\n * Converts passed value to #RRGGBB format. Accepts following color formats:\n * - `#RGB`\n * - `#RRGGBB`\n * - `rgb(1,2,3)`\n * - `rgba(1,2,3,4)`\n * @param value - value to convert.\n * @throws {Error} Passed value does not satisfy any of known RGB formats.\n */\nexport function toRGB(value: string): RGB {\n  // Remove all spaces.\n  const clean = value.replace(/\\s/g, '').toLowerCase();\n\n  // Value already has required format.\n  if (isRGB(clean)) {\n    return clean;\n  }\n\n  // Convert from #RGB.\n  if (isRGBShort(clean)) {\n    let color: RGB = '#';\n    for (let i = 0; i < 3; i += 1) {\n      color += clean[1 + i].repeat(2);\n    }\n    return color;\n  }\n\n  // Example valid values: rgb(0,3,10) rgba(32,114,8,0)\n  const match = clean.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/)\n    || clean.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n\n  // In case, this didn't work as well, we can't extract RGB color from passed\n  // text.\n  if (!match) {\n    throw new Error(`Value \"${value}\" does not satisfy any of known RGB formats.`);\n  }\n\n  // Otherwise, take R, G and B components, convert to hex and create #RRGGBB\n  // string.\n  return match.slice(1).reduce((acc, component) => {\n    const formatted = parseInt(component, 10).toString(16);\n    return acc + (formatted.length === 1 ? '0' : '') + formatted;\n  }, '#') as RGB;\n}\n","import { toRGB } from './toRGB.js';\n\n/**\n * Returns true in case, the color is recognized as dark.\n * @param color - color in any format acceptable by toRGB function.\n * @see toRGB\n */\nexport function isColorDark(color: string): boolean {\n  // Convert color to RGB.\n  const rgb = toRGB(color);\n\n  // Real formula: hsp = Math.sqrt(0.299 * r * r + 0.587 * g * g + 0.114 * b * b)\n  // See: https://stackoverflow.com/a/596243\n  return Math.sqrt(\n    [0.299, 0.587, 0.114].reduce<number>((acc, modifier, idx) => {\n      // Extract part of #RRGGBB pattern and convert it to DEC.\n      const dec = parseInt(rgb.slice(1 + idx * 2, 1 + (idx + 1) * 2), 16);\n      return acc + dec * dec * modifier;\n    }, 0),\n  ) < 120;\n}\n","import { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { StringKeys } from '@/types/utils.js';\n\ntype Emitter<State extends object> = EventEmitter<StateEvents<State>>;\n\nexport class State<State extends object> {\n  private readonly ee: Emitter<State> = new EventEmitter();\n\n  constructor(\n    /**\n     * Initial state.\n     */\n    private readonly state: State,\n  ) {\n  }\n\n  /**\n   * Clones current state and returns its copy.\n   */\n  clone(): State {\n    return { ...this.state };\n  }\n\n  /**\n   * Sets value by key.\n   * @param key - state key.\n   * @param value - value to set.\n   */\n  set<K extends StringKeys<State>>(key: K, value: State[K]): void;\n  /**\n   * Sets several values simultaneously.\n   * @param state - partial state.\n   */\n  set(state: Partial<State>): void;\n  set(keyOrState: StringKeys<State> | Partial<State>, keyValue?: State[keyof State]): void {\n    const didChange = Object\n      .entries(typeof keyOrState === 'string' ? { [keyOrState]: keyValue } : keyOrState)\n      .reduce((acc, [key, value]) => {\n        // If value is the same or missing at all, we skip it.\n        if (this.state[key as keyof State] === value || value === undefined) {\n          return acc;\n        }\n\n        // Otherwise set new value and emit change event.\n        this.state[key as keyof State] = value;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        (this.ee as any).emit(`change:${key}`, value);\n\n        return true;\n      }, false);\n\n    if (didChange) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      (this.ee as any).emit('change', this.state);\n    }\n  }\n\n  /**\n   * Returns value by specified key.\n   * @param key - state key.\n   */\n  get<K extends StringKeys<State>>(key: K): State[K] {\n    return this.state[key];\n  }\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<State>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<State>['off'] = this.ee.off.bind(this.ee);\n}\n","import { State } from '@/classes/State/State.js';\n\nexport class WithStateUtils<Shape extends object> {\n  protected state: State<Shape>;\n\n  constructor(shape: Shape) {\n    this.state = new State(shape);\n    this.set = this.state.set.bind(this.state);\n    this.get = this.state.get.bind(this.state);\n    this.clone = this.state.clone.bind(this.state);\n  }\n\n  /**\n   * Gets the state value.\n   */\n  protected get: State<Shape>['get'];\n\n  /**\n   * Sets the state value.\n   */\n  protected set: State<Shape>['set'];\n\n  /**\n   * Clones the current state.\n   */\n  protected clone: State<Shape>['clone'];\n}\n","import { supports } from '@/supports/supports.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport type SupportsSchema<Method extends string> = Record<Method, MiniAppsMethodName>;\n\n/**\n * Returns function, which accepts predefined method name and checks if it is supported\n * via passed schema and version.\n * @param schema - object which contains methods names and TWA method as a dependency.\n * @param version - platform version.\n */\nexport function createSupportsFn<Method extends string>(\n  version: Version,\n  schema: SupportsSchema<Method>,\n): SupportsFn<Method> {\n  return (method) => supports(schema[method], version);\n}\n","import { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport { createSupportsFn } from '@/supports/createSupportsFn.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport class WithSupportsAndStateUtils<StateShape extends object, SupportsMethod extends string>\nextends WithStateUtils<StateShape> {\n  constructor(\n    /**\n     * Initial state.\n     */\n    stateShape: StateShape,\n    /**\n     * Mini Apps version.\n     */\n    version: Version,\n    /**\n     * Supports method schema.\n     */\n    supportsSchema: Record<SupportsMethod, MiniAppsMethodName>,\n  ) {\n    super(stateShape);\n    this.supports = createSupportsFn(version, supportsSchema);\n  }\n\n  /**\n   * @returns True, if specified method is supported by the current component.\n   */\n  supports: SupportsFn<SupportsMethod>;\n}\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { BackButtonEvents, BackButtonState } from '@/components/BackButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { Version } from '@/version/types.js';\n\ntype Emitter = EventEmitter<BackButtonEvents>;\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/back-button\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/back-button\n */\nexport class BackButton extends WithSupportsAndStateUtils<BackButtonState, 'show' | 'hide'> {\n  constructor(isVisible: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isVisible }, version, {\n      show: 'web_app_setup_back_button',\n      hide: 'web_app_setup_back_button',\n    });\n  }\n\n  private set isVisible(visible: boolean) {\n    this.set('isVisible', visible);\n    this.postEvent('web_app_setup_back_button', { is_visible: visible });\n  }\n\n  /**\n   * True if BackButton is currently visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Hides the BackButton.\n   */\n  hide(): void {\n    this.isVisible = false;\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('back_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('back_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the BackButton.\n   */\n  show(): void {\n    this.isVisible = true;\n  }\n}\n","import { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { number } from './number.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as Date.\n */\nexport const date: ValueParserGenerator<Date> = createValueParserGenerator((value) => (\n  value instanceof Date\n    ? value\n    : new Date(number().parse(value) * 1000)\n), 'Date');\n","import { createTypeError } from '../createTypeError.js';\nimport { parseBySchema } from '../parseBySchema.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new search params parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function searchParams<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    if (typeof value !== 'string' && !(value instanceof URLSearchParams)) {\n      throw createTypeError();\n    }\n\n    const params = typeof value === 'string' ? new URLSearchParams(value) : value;\n\n    return parseBySchema(schema, (field) => {\n      const paramValue = params.get(field);\n      return paramValue === null ? undefined : paramValue;\n    });\n  }, false, type);\n}\n","import { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { Chat } from '../types.js';\n\nexport const chat = json<Chat>({\n  id: number(),\n  type: string(),\n  title: string(),\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'Chat')\n  .optional();\n","import { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { User } from '../types.js';\n\nexport const user = json<User>({\n  addedToAttachmentMenu: {\n    type: boolean().optional(),\n    from: 'added_to_attachment_menu',\n  },\n  allowsWriteToPm: {\n    type: boolean().optional(),\n    from: 'allows_write_to_pm',\n  },\n  firstName: {\n    type: string(),\n    from: 'first_name',\n  },\n  id: number(),\n  isBot: {\n    type: boolean().optional(),\n    from: 'is_bot',\n  },\n  isPremium: {\n    type: boolean().optional(),\n    from: 'is_premium',\n  },\n  languageCode: {\n    type: string().optional(),\n    from: 'language_code',\n  },\n  lastName: {\n    type: string().optional(),\n    from: 'last_name',\n  },\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'User')\n  .optional();\n","import { date } from '@/parsing/parsers/date.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { ValueParser } from '@/parsing/ValueParser/ValueParser.js';\n\nimport { chat } from './chat.js';\nimport { user } from './user.js';\nimport type { InitDataParsed } from '../types.js';\n\n/**\n * Returns parser used to parse init data, presented as search params.\n */\nexport function initData(): ValueParser<InitDataParsed, false> {\n  return searchParams<InitDataParsed>({\n    authDate: {\n      type: date(),\n      from: 'auth_date',\n    },\n    canSendAfter: {\n      type: number().optional(),\n      from: 'can_send_after',\n    },\n    chat,\n    chatInstance: {\n      type: string().optional(),\n      from: 'chat_instance',\n    },\n    chatType: {\n      type: string().optional(),\n      from: 'chat_type',\n    },\n    hash: string(),\n    queryId: {\n      type: string().optional(),\n      from: 'query_id',\n    },\n    receiver: user,\n    startParam: {\n      type: string().optional(),\n      from: 'start_param',\n    },\n    user,\n  }, 'InitData');\n}\n","import { toRGB } from '@/colors/toRGB.js';\nimport type { RGB } from '@/colors/types.js';\n\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { string } from './string.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as RGB color.\n */\nexport const rgb: ValueParserGenerator<RGB> = createValueParserGenerator((value) => toRGB(string().parse(value)), 'rgb');\n","/**\n * Converts a palette key from the Telegram application to the representation used by the package.\n * @param key - palette key.\n */\nexport function keyToLocal(key: string): string {\n  return key.replace(/_[a-z]/g, (match) => match[1].toUpperCase());\n}\n\n/**\n * Converts palette key from the local representation to the representation sent from the\n * Telegram application.\n * @param key - palette key.\n */\nexport function keyToExternal(key: string): string {\n  return key.replace(/[A-Z]/g, (match) => `_${match.toLowerCase()}`);\n}\n","import { createValueParserGenerator, type ValueParserGenerator } from '@/parsing/createValueParserGenerator.js';\nimport { rgb } from '@/parsing/parsers/rgb.js';\nimport { toRecord } from '@/parsing/toRecord.js';\n\nimport { keyToLocal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\nexport const themeParams: ValueParserGenerator<ThemeParamsParsed> = createValueParserGenerator(\n  (value) => {\n    const rgbOptional = rgb().optional();\n\n    return Object\n      .entries(toRecord(value))\n      .reduce<ThemeParamsParsed>((acc, [k, v]) => {\n        acc[keyToLocal(k)] = rgbOptional.parse(v);\n        return acc;\n      }, {});\n  },\n  'ThemeParams',\n);\n","import { initData } from '@/components/InitData/parsers/initData.js';\nimport { themeParams } from '@/components/ThemeParams/parsing/themeParams.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Parses value as launch parameters.\n * @param value - value to parse.\n */\nexport function parseLaunchParams(value: unknown): LaunchParams {\n  return searchParams({\n    botInline: {\n      type: boolean().optional(),\n      from: 'tgWebAppBotInline',\n    },\n    initData: {\n      type: initData().optional(),\n      from: 'tgWebAppData',\n    },\n    initDataRaw: {\n      type: string().optional(),\n      from: 'tgWebAppData',\n    },\n    platform: {\n      type: string(),\n      from: 'tgWebAppPlatform',\n    },\n    showSettings: {\n      type: boolean().optional(),\n      from: 'tgWebAppShowSettings',\n    },\n    startParam: {\n      type: string().optional(),\n      from: 'tgWebAppStartParam',\n    },\n    themeParams: {\n      type: themeParams(),\n      from: 'tgWebAppThemeParams',\n    },\n    version: {\n      type: string(),\n      from: 'tgWebAppVersion',\n    },\n  }).parse(value);\n}\n","import { parseLaunchParams } from './parseLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @param urlString - URL to extract launch parameters from.\n * @returns Launch parameters from the specified URL.\n * @throws Error if function was unable to extract launch parameters from the passed URL.\n */\nexport function retrieveFromUrl(urlString: string): LaunchParams {\n  return parseLaunchParams(\n    urlString\n      // Replace everything before this first hashtag or question sign.\n      .replace(/^[^?#]*[?#]/, '')\n      // Replace all hashtags and question signs to make it look like some search params.\n      .replace(/[?#]/g, '&'),\n  );\n}\n","import { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from the current window location hash.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromLocation(): LaunchParams {\n  return retrieveFromUrl(window.location.href);\n}\n","/**\n * Returns the first navigation entry from window.performance.\n * @returns First navigation entry or null, in case performance functionality is not supported\n * or navigation entry was not found.\n */\nexport function getFirstNavigationEntry(): PerformanceNavigationTiming | undefined {\n  return performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming | undefined;\n}\n","import { getFirstNavigationEntry } from '@/navigation/getFirstNavigationEntry.js';\n\nimport { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters based on the first navigation entry.\n * @throws Error if function was unable to extract launch parameters from the navigation entry.\n */\nexport function retrieveFromPerformance(): LaunchParams {\n  const navigationEntry = getFirstNavigationEntry();\n  if (!navigationEntry) {\n    throw new Error('Unable to get first navigation entry.');\n  }\n\n  return retrieveFromUrl(navigationEntry.name);\n}\n","import type { BackButtonState } from '@/components/BackButton/types.js';\nimport type { BiometryManagerState } from '@/components/BiometryManager/types.js';\nimport type { ClosingBehaviorState } from '@/components/ClosingBehavior/types.js';\nimport type { MainButtonState } from '@/components/MainButton/types.js';\nimport type { MiniAppState } from '@/components/MiniApp/types.js';\nimport type { SettingsButtonState } from '@/components/SettingsButton/types.js';\nimport type { ThemeParamsParsed } from '@/components/ThemeParams/types.js';\nimport type { ViewportState } from '@/components/Viewport/types.js';\n\n/**\n * Describes storage keys and according values.\n */\nexport interface StorageParams {\n  backButton: BackButtonState;\n  biometryManager: BiometryManagerState;\n  closingBehavior: ClosingBehaviorState;\n  launchParams: string;\n  mainButton: MainButtonState;\n  miniApp: MiniAppState;\n  settingsButton: SettingsButtonState;\n  themeParams: ThemeParamsParsed;\n  viewport: ViewportState;\n}\n\n/**\n * Key which could be used to store data in the storage.\n */\nexport type StorageKey = keyof StorageParams;\n\n/**\n * Type specific to the specified storage key.\n */\nexport type StorageValue<K extends StorageKey> = StorageParams[K];\n\n/**\n * Converts passed storage key to the formatted state.\n * @param key - storage key.\n */\nfunction formatKey(key: StorageKey): string {\n  return `tma.js/${key.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}`;\n}\n\n/**\n * Saves value in the storage.\n * @param key - storage key.\n * @param value - storage value.\n */\nexport function setStorageValue<K extends StorageKey>(key: K, value: StorageValue<K>): void {\n  sessionStorage.setItem(formatKey(key), JSON.stringify(value));\n}\n\n/**\n * Extracts value from the storage.\n * @param key - storage key.\n */\nexport function getStorageValue<K extends StorageKey>(key: K): StorageValue<K> | undefined {\n  const value = sessionStorage.getItem(formatKey(key));\n  try {\n    return value ? JSON.parse(value) as StorageValue<K> : undefined;\n  } catch { /* empty */ }\n}\n","import { parseLaunchParams } from '@/launch-params/parseLaunchParams.js';\nimport { getStorageValue } from '@/storage/storage.js';\nimport type { LaunchParams } from '@/launch-params/types.js';\n\n/**\n * @returns Launch parameters stored in the session storage.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromStorage(): LaunchParams {\n  return parseLaunchParams(getStorageValue('launchParams') || '');\n}\n","import { keyToExternal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\n/**\n * Serializes theme parameters to representation sent from the Telegram application.\n */\nexport function serializeThemeParams(themeParams: ThemeParamsParsed): string {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object\n        .entries(themeParams)\n        .map(([key, value]) => [keyToExternal(key), value]),\n    ),\n  );\n}\n","import { serializeThemeParams } from '@/components/ThemeParams/parsing/serializeThemeParams.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Converts launch parameters to its initial representation.\n * @param value - launch parameters.\n */\nexport function serializeLaunchParams(value: LaunchParams): string {\n  const {\n    initDataRaw,\n    themeParams,\n    platform,\n    version,\n    showSettings,\n    startParam,\n    botInline,\n  } = value;\n\n  const params = new URLSearchParams();\n\n  params.set('tgWebAppPlatform', platform);\n  params.set('tgWebAppThemeParams', serializeThemeParams(themeParams));\n  params.set('tgWebAppVersion', version);\n\n  if (initDataRaw) {\n    params.set('tgWebAppData', initDataRaw);\n  }\n\n  if (startParam) {\n    params.set('tgWebAppStartParam', startParam);\n  }\n\n  if (typeof showSettings === 'boolean') {\n    params.set('tgWebAppShowSettings', showSettings ? '1' : '0');\n  }\n\n  if (typeof botInline === 'boolean') {\n    params.set('tgWebAppBotInline', botInline ? '1' : '0');\n  }\n\n  return params.toString();\n}\n","import { setStorageValue } from '@/storage/storage.js';\n\nimport { serializeLaunchParams } from './serializeLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * Saves specified launch parameters in the session storage.\n * @param value - launch params to save.\n */\nexport function saveToStorage(value: LaunchParams): void {\n  setStorageValue('launchParams', serializeLaunchParams(value));\n}\n","import { retrieveFromLocation } from './retrieveFromLocation.js';\nimport { retrieveFromPerformance } from './retrieveFromPerformance.js';\nimport { retrieveFromStorage } from './retrieveFromStorage.js';\nimport { saveToStorage } from './saveToStorage.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from any known source.\n * @throws Error if extraction was unsuccessful.\n */\nexport function retrieveLaunchParams(): LaunchParams {\n  const errors: unknown[] = [];\n\n  for (const retrieve of [\n    // Try to retrieve launch parameters from the current location. This method can return\n    // nothing in case, location was changed and then page was reloaded.\n    retrieveFromLocation,\n    // Then, try using the lower level API - window.performance.\n    retrieveFromPerformance,\n    // Finally, try to extract launch parameters from the session storage.\n    retrieveFromStorage,\n  ]) {\n    try {\n      const lp = retrieve();\n      saveToStorage(lp);\n      return lp;\n    } catch (e) {\n      errors.push(e);\n    }\n  }\n\n  throw new Error('Unable to retrieve launch parameters from any known source.');\n}\n","import { getFirstNavigationEntry } from './getFirstNavigationEntry.js';\n\n/**\n * @returns True, if current page was reloaded.\n * @see https://stackoverflow.com/a/36444134/11894710\n */\nexport function isPageReload(): boolean {\n  const entry = getFirstNavigationEntry();\n  return !!(entry && entry.type === 'reload');\n}\n","import type { CreateRequestIdFn } from './types.js';\n\n/**\n * Creates function which generated request identifiers.\n */\nexport function createRequestIdGenerator(): CreateRequestIdFn {\n  let requestId = 0;\n  return () => (requestId += 1).toString();\n}\n","import { createPostEvent } from '@/bridge/methods/createPostEvent.js';\nimport { retrieveLaunchParams } from '@/launch-params/retrieveLaunchParams.js';\nimport { createSingleton } from '@/misc/createSingleton.js';\nimport { isPageReload } from '@/navigation/isPageReload.js';\nimport { createRequestIdGenerator } from '@/request-id/createRequestIdGenerator.js';\nimport type { StorageKey, StorageValue } from '@/storage/storage.js';\nimport { getStorageValue, setStorageValue } from '@/storage/storage.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\n\nimport {\n  FactoryDynamic,\n  FactoryStatic,\n  InitStaticComponentFn,\n  InitDynamicComponentFn,\n  WithOnChange,\n} from './types.js';\n\nconst [createReqId] = createSingleton(createRequestIdGenerator);\n\n/**\n * Creates a new init function based on factory, creating a component, not synchronizing its\n * state with the session storage.\n * @param factory - function creating new component instance.\n */\nexport function createComponentInitFn<R>(factory: FactoryStatic<R>): InitStaticComponentFn<R>;\n\n/**\n * Creates a new init function based on factory, creating a component, synchronizing its\n * state with the session storage.\n * @param factory - function creating new component instance.\n * @param storageKey - storage key to restore component from.\n */\nexport function createComponentInitFn<\n  SK extends StorageKey,\n  R extends WithOnChange<StorageValue<SK>> | Promise<WithOnChange<StorageValue<SK>>>,\n>(\n  storageKey: SK,\n  factory: FactoryDynamic<R, SK>,\n): InitDynamicComponentFn<R>;\n\nexport function createComponentInitFn<\n  R extends WithOnChange<StorageValue<SK>> | Promise<WithOnChange<StorageValue<SK>>>,\n  SK extends StorageKey,\n>(\n  factoryStaticOrSK: FactoryStatic<R> | SK,\n  factoryDynamic?: FactoryDynamic<R, SK>,\n): InitStaticComponentFn<R> | InitDynamicComponentFn<R> {\n  return () => {\n    const lp = retrieveLaunchParams();\n    const factoryOptions = {\n      ...lp,\n      postEvent: createPostEvent(lp.version),\n      createRequestId: createReqId(),\n    };\n\n    // In static init mode we have no reason to use the storage to restore the state. In this\n    // case we should just call the factory.\n    if (typeof factoryStaticOrSK === 'function') {\n      return factoryStaticOrSK(factoryOptions);\n    }\n\n    // Otherwise, we create a new component instance from the storage if possible and add\n    // required change listeners.\n    const [addCleanup, cleanup, cleanedUp] = createCleanup();\n\n    const result = factoryDynamic!({\n      ...factoryOptions,\n      // State should only be passed only in case, current page was reloaded. If we don't add\n      // this check, state restoration will work improperly in the web version of Telegram,\n      // when we are always working in the same \"session\" (tab).\n      state: isPageReload() ? getStorageValue(factoryStaticOrSK) : undefined,\n      addCleanup,\n    });\n\n    const bindChange = (value: WithOnChange<StorageValue<SK>>) => {\n      if (!cleanedUp) {\n        addCleanup(\n          value.on('change', (state) => {\n            setStorageValue(factoryStaticOrSK, state);\n          }),\n        );\n      }\n      return value;\n    };\n\n    return [\n      result instanceof Promise ? result.then(bindChange) : bindChange(result),\n      cleanup,\n    ] as unknown as R;\n  };\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { BackButton } from './BackButton.js';\n\n/**\n * @returns A new initialized instance of the `BackButton` class.\n * @see BackButton\n */\nexport const initBackButton = createComponentInitFn('backButton', ({\n  postEvent,\n  version,\n  state = { isVisible: false },\n}) => new BackButton(state.isVisible, version, postEvent));\n","import { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter<StateShape extends object> = EventEmitter<StateEvents<StateShape>>;\n\nexport class WithSupportsAndTrackableState<StateShape extends object, SupportsMethod extends string>\n  extends WithSupportsAndStateUtils<StateShape, SupportsMethod> {\n  /**\n   * Adds a new event listener.\n   */\n  on: Emitter<StateShape>['on'] = this.state.on.bind(this.state);\n\n  /**\n   * Removes the event listener.\n   */\n  off: Emitter<StateShape>['off'] = this.state.off.bind(this.state);\n}\n","import type { BiometryType, MiniAppsEventPayload } from '@/bridge/events/types.js';\n\nexport interface FormatBiometryInfoResult {\n  /**\n   * Shows whether biometry is available.\n   */\n  available: boolean;\n  /**\n   * Shows whether permission to use biometrics has been requested.\n   */\n  accessRequested: boolean;\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  accessGranted: boolean;\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  deviceId: string;\n  /**\n   * Show whether local storage contains previously saved token.\n   */\n  tokenSaved: boolean;\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  type: BiometryType;\n}\n\n/**\n * Converts `biometry_info_received` to some common shape.\n * @param event - event payload.\n * @see biometry_info_received\n */\nexport function formatEvent(\n  event: MiniAppsEventPayload<'biometry_info_received'>,\n): FormatBiometryInfoResult {\n  const data = event.available ? event : {\n    available: false,\n    device_id: '',\n    token_saved: false,\n    access_requested: false,\n    access_granted: false,\n    type: '',\n  };\n\n  return {\n    available: true,\n    type: data.type,\n    deviceId: data.device_id,\n    tokenSaved: data.token_saved,\n    accessRequested: data.access_requested,\n    accessGranted: data.access_granted,\n  };\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { formatEvent } from '@/components/BiometryManager/formatEvent.js';\nimport type { BiometryType } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  BiometryManagerAuthenticateOptions,\n  BiometryManagerProps,\n  BiometryManagerRequestAccessOptions,\n  BiometryManagerState,\n  BiometryManagerUpdateTokenOptions,\n} from '@/components/BiometryManager/types.js';\n\nexport class BiometryManager extends WithSupportsAndTrackableState<BiometryManagerState,\n  | 'auth'\n  | 'openSettings'\n  | 'requestAccess'\n  | 'updateToken'\n> {\n  private readonly postEvent: PostEvent;\n\n  private authPromise?: Promise<string | undefined>;\n\n  private accessPromise?: Promise<boolean>;\n\n  constructor({ postEvent, version, ...rest }: BiometryManagerProps) {\n    super(rest, version, {\n      auth: 'web_app_biometry_request_auth',\n      openSettings: 'web_app_biometry_open_settings',\n      requestAccess: 'web_app_biometry_request_access',\n      updateToken: 'web_app_biometry_update_token',\n    });\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * Shows whether biometry is available.\n   */\n  get available(): boolean {\n    return this.get('available');\n  }\n\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  get accessGranted(): boolean {\n    return this.get('accessGranted');\n  }\n\n  /**\n   * Shows whether if permission to use biometrics has been requested.\n   */\n  get accessRequested(): boolean {\n    return this.get('accessRequested');\n  }\n\n  /**\n   * Authenticates the user using biometrics.\n   * @param options - method options.\n   * @since 7.2\n   * @returns Token from the local secure storage, if authentication was successful.\n   */\n  async authenticate({\n    reason,\n    ...rest\n  }: BiometryManagerAuthenticateOptions): Promise<string | undefined> {\n    if (!this.authPromise) {\n      this.authPromise = request({\n        ...rest,\n        method: 'web_app_biometry_request_auth',\n        event: 'biometry_auth_requested',\n        postEvent: this.postEvent,\n        params: {\n          // TODO: Check if reason is empty works fine.\n          reason: (reason || '').trim(),\n        },\n      })\n        .then(({ token }) => token)\n        .finally(() => this.authPromise = undefined);\n    }\n    return this.authPromise;\n  }\n\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  get deviceId(): string {\n    return this.get('deviceId');\n  }\n\n  /**\n   * Opens the biometric access settings for bots. Useful when you need to request biometrics\n   * access to users who haven't granted it yet.\n   *\n   * _Note that this method can be called only in response to user interaction with the Mini App\n   * interface (e.g. a click inside the Mini App or on the main button)_.\n   * @since 7.2\n   */\n  openSettings(): void {\n    this.postEvent('web_app_biometry_open_settings');\n  }\n\n  /**\n   * Requests permission to use biometrics.\n   * @since 7.2\n   * @returns Promise with true, if access was granted.\n   */\n  requestAccess({ reason, ...rest }: BiometryManagerRequestAccessOptions = {}): Promise<boolean> {\n    if (!this.accessPromise) {\n      this.accessPromise = request({\n        ...rest,\n        postEvent: this.postEvent,\n        method: 'web_app_biometry_request_access',\n        event: 'biometry_info_received',\n        params: { reason: reason || '' },\n      })\n        .then((response) => {\n          // Actualize local state.\n          const formatted = formatEvent(response);\n          this.set(formatted);\n\n          return formatted.accessGranted;\n        })\n        .finally(() => this.accessPromise = undefined);\n    }\n    return this.accessPromise;\n  }\n\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  get biometryType(): BiometryType | undefined {\n    return this.get('biometryType');\n  }\n\n  /**\n   * Shows whether token was saved previously in the local secure storage.\n   */\n  get tokenSaved(): boolean {\n    return this.get('tokenSaved');\n  }\n\n  /**\n   * Updates the biometric token in a secure storage on the device.\n   * @returns Promise with `true`, if token was updated.\n   */\n  async updateToken({ token, ...rest }: BiometryManagerUpdateTokenOptions = {}): Promise<boolean> {\n    return ['removed', 'updated'].includes(\n      (\n        await request({\n          ...rest,\n          postEvent: this.postEvent,\n          method: 'web_app_biometry_update_token',\n          event: 'biometry_token_updated',\n          params: { token: token || '' },\n        })\n      ).status,\n    );\n  }\n}\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { formatEvent } from './formatEvent.js';\nimport type { FormatBiometryInfoResult } from './formatEvent.js';\n\n/**\n * Requests biometry information.\n * @param options - additional execution options.\n */\nexport async function requestBiometryInfo(\n  options?: ExecuteWithOptions,\n): Promise<FormatBiometryInfoResult> {\n  return formatEvent(\n    await request({\n      ...(options || {}),\n      method: 'web_app_biometry_get_info',\n      event: 'biometry_info_received',\n    }),\n  );\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\nimport { supports } from '@/supports/supports.js';\n\nimport { BiometryManager } from './BiometryManager.js';\nimport { requestBiometryInfo } from './requestBiometryInfo.js';\n\n/**\n * @returns A promise with a new initialized instance of the `BiometryManager` class.\n * @see BiometryManager\n */\nexport const initBiometryManager = createComponentInitFn(\n  'biometryManager',\n  async ({ postEvent, version, state }) => {\n    return new BiometryManager({\n      ...(state || supports('web_app_biometry_get_info', version)\n        ? state || await requestBiometryInfo({ timeout: 1000 })\n        : {\n          available: false,\n          accessGranted: false,\n          accessRequested: false,\n          tokenSaved: false,\n          deviceId: '',\n        }),\n      version,\n      postEvent,\n    });\n  },\n);\n","import { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter<StateShape extends object> = EventEmitter<StateEvents<StateShape>>;\n\nexport class WithTrackableState<StateShape extends object>\n  extends WithStateUtils<StateShape> {\n  /**\n   * Adds a new event listener.\n   */\n  on: Emitter<StateShape>['on'] = this.state.on.bind(this.state);\n\n  /**\n   * Removes the event listener.\n   */\n  off: Emitter<StateShape>['off'] = this.state.off.bind(this.state);\n}\n","import { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { ClosingBehaviorState } from '@/components/ClosingBehavior/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/closing-behavior\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/closing-behavior\n */\nexport class ClosingBehavior extends WithTrackableState<ClosingBehaviorState> {\n  constructor(isConfirmationNeeded: boolean, private readonly postEvent: PostEvent) {\n    super({ isConfirmationNeeded });\n  }\n\n  private set isConfirmationNeeded(value: boolean) {\n    this.set('isConfirmationNeeded', value);\n    this.postEvent('web_app_setup_closing_behavior', { need_confirmation: value });\n  }\n\n  /**\n   * True, if the confirmation dialog should be shown while the user is trying to close\n   * the Mini App.\n   */\n  get isConfirmationNeeded(): boolean {\n    return this.get('isConfirmationNeeded');\n  }\n\n  /**\n   * Disables the confirmation dialog when closing the Mini App.\n   */\n  disableConfirmation(): void {\n    this.isConfirmationNeeded = false;\n  }\n\n  /**\n   * Enables the confirmation dialog when closing the Mini App.\n   */\n  enableConfirmation(): void {\n    this.isConfirmationNeeded = true;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { ClosingBehavior } from './ClosingBehavior.js';\n\n/**\n * @returns A new initialized instance of the `ClosingBehavior` class.\n * @see ClosingBehavior\n */\nexport const initClosingBehavior = createComponentInitFn(\n  'closingBehavior',\n  ({\n    postEvent,\n    state = { isConfirmationNeeded: false },\n  }) => new ClosingBehavior(state.isConfirmationNeeded, postEvent),\n);\n","import { createSupportsFn } from '@/supports/createSupportsFn.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport class WithSupports<SupportsMethod extends string> {\n  constructor(\n    /**\n     * Mini Apps version.\n     */\n    version: Version,\n    /**\n     * Supports method schema.\n     */\n    supportsSchema: Record<SupportsMethod, MiniAppsMethodName>,\n  ) {\n    this.supports = createSupportsFn(version, supportsSchema);\n  }\n\n  /**\n   * @returns True, if specified method is supported by the current component.\n   */\n  supports: SupportsFn<SupportsMethod>;\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { ArrayParserOfResult } from '../ArrayParser/types.js';\nimport type { AnyParser, Parser } from '../types.js';\nimport type { ValueParserParseResult } from '../ValueParser/types.js';\n\n/**\n * Parses incoming value as array.\n * @param value - value to parse.\n */\nfunction parseArray(value: unknown): unknown[] {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    try {\n      const json = JSON.parse(value);\n\n      if (Array.isArray(json)) {\n        return json;\n      }\n    } catch {}\n  }\n  throw createTypeError();\n}\n\nexport class ArrayParser<ItemType, IsOptional extends boolean>\n  extends ValueParser<unknown[], IsOptional> {\n  private itemParser: Parser<any>;\n\n  constructor(\n    itemParser: AnyParser<ItemType>,\n    isOptional: IsOptional,\n    type?: string,\n  ) {\n    super(parseArray, isOptional, type);\n\n    this.itemParser = typeof itemParser === 'function'\n      ? itemParser\n      : itemParser.parse.bind(itemParser);\n  }\n\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  override parse(value: unknown): ValueParserParseResult<ItemType[], IsOptional> {\n    const arr = super.parse(value);\n    return arr === undefined ? arr : arr.map(this.itemParser);\n  }\n\n  of<Item>(itemParser: AnyParser<Item>): ArrayParserOfResult<this, Item, IsOptional> {\n    this.itemParser = typeof itemParser === 'function'\n      ? itemParser\n      : itemParser.parse.bind(itemParser);\n\n    return this as ArrayParserOfResult<this, Item, IsOptional>;\n  }\n}\n","import { ArrayParser } from '@/parsing/ArrayParser/ArrayParser.js';\n\n/**\n * Parses incoming value as an array.\n * @param parserTypeName - parser type name.\n */\nexport function array(parserTypeName?: string): ArrayParser<unknown, false> {\n  return new ArrayParser((value) => value, false, parserTypeName);\n}\n","import { invokeCustomMethod } from '@/bridge/invokeCustomMethod.js';\nimport { WithSupports } from '@/classes/WithSupports.js';\nimport { array } from '@/parsing/parsers/array.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { ExecuteWithTimeout } from '@/types/methods.js';\nimport type { Version } from '@/version/types.js';\n\nfunction objectFromKeys<K extends string, V>(keys: K[], value: V): Record<K, V> {\n  return Object.fromEntries(keys.map((k) => [k, value])) as Record<K, V>;\n}\n\n// TODO: Usage.\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/cloud-storage\n */\nexport class CloudStorage extends WithSupports<'delete' | 'get' | 'getKeys' | 'set'> {\n  constructor(\n    version: Version,\n    private readonly createRequestId: CreateRequestIdFn,\n    private readonly postEvent: PostEvent,\n  ) {\n    super(version, {\n      delete: 'web_app_invoke_custom_method',\n      get: 'web_app_invoke_custom_method',\n      getKeys: 'web_app_invoke_custom_method',\n      set: 'web_app_invoke_custom_method',\n    });\n  }\n\n  /**\n   * Deletes specified key or keys from the cloud storage.\n   * @param keyOrKeys - key or keys to delete.\n   * @param options - request execution options.\n   */\n  async delete(keyOrKeys: string | string[], options: ExecuteWithTimeout = {}): Promise<void> {\n    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    if (keys.length) {\n      await invokeCustomMethod(\n        'deleteStorageValues',\n        { keys },\n        this.createRequestId(),\n        { ...options, postEvent: this.postEvent },\n      );\n    }\n  }\n\n  /**\n   * Returns list of all keys presented in the cloud storage.\n   * @param options - request execution options.\n   */\n  async getKeys(options: ExecuteWithTimeout = {}): Promise<string[]> {\n    return array().of(string()).parse(\n      await invokeCustomMethod(\n        'getStorageKeys',\n        {},\n        this.createRequestId(),\n        { ...options, postEvent: this.postEvent },\n      ),\n    );\n  }\n\n  /**\n   * Returns map, where key is one of the specified in keys argument, and value is according\n   * storage value.\n   * @param keys - keys list.\n   * @param options - request execution options.\n   */\n  get<K extends string>(keys: K[], options?: ExecuteWithTimeout): Promise<Record<K, string>>;\n\n  /**\n   * Returns value of the specified key.\n   * @param key - cloud storage key.\n   * @param options - request execution options.\n   * @return Value of the specified key. In case, key was not created previously, function\n   * will return empty string.\n   */\n  get(key: string, options?: ExecuteWithTimeout): Promise<string>;\n\n  async get(\n    keyOrKeys: string | string[],\n    options: ExecuteWithTimeout = {},\n  ): Promise<string | Record<string, string>> {\n    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    if (!keys.length) {\n      return objectFromKeys(keys, '');\n    }\n\n    const data = await invokeCustomMethod(\n      'getStorageValues',\n      { keys },\n      this.createRequestId(),\n      { ...options, postEvent: this.postEvent },\n    );\n    const result = json(objectFromKeys(keys, string()), 'CloudStorageData').parse(data);\n\n    return Array.isArray(keyOrKeys) ? result : result[keyOrKeys];\n  }\n\n  /**\n   * Saves specified value by key.\n   * @param key - storage key.\n   * @param value - storage value.\n   * @param options - request execution options.\n   */\n  async set(key: string, value: string, options: ExecuteWithTimeout = {}): Promise<void> {\n    await invokeCustomMethod(\n      'saveStorageValue',\n      { key, value },\n      this.createRequestId(),\n      { ...options, postEvent: this.postEvent },\n    );\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { CloudStorage } from './CloudStorage.js';\n\n/**\n * @returns A new initialized instance of the `CloudStorage` class.\n * @see CloudStorage\n */\nexport const initCloudStorage = createComponentInitFn(\n  ({ createRequestId, postEvent, version }) => {\n    return new CloudStorage(version, createRequestId, postEvent);\n  },\n);\n","import { WithSupports } from '@/classes/WithSupports.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  ImpactHapticFeedbackStyle,\n  NotificationHapticFeedbackType,\n} from '@/bridge/methods/types/haptic.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/haptic-feedback\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/haptic-feedback\n */\nexport class HapticFeedback\n  extends WithSupports<'impactOccurred' | 'notificationOccurred' | 'selectionChanged'> {\n  constructor(version: Version, private readonly postEvent: PostEvent) {\n    super(version, {\n      impactOccurred: 'web_app_trigger_haptic_feedback',\n      notificationOccurred: 'web_app_trigger_haptic_feedback',\n      selectionChanged: 'web_app_trigger_haptic_feedback',\n    });\n  }\n\n  /**\n   * A method tells that an impact occurred. The Telegram app may play the\n   * appropriate haptics based on style value passed.\n   * @param style - impact style.\n   */\n  impactOccurred(style: ImpactHapticFeedbackStyle): void {\n    this.postEvent('web_app_trigger_haptic_feedback', {\n      type: 'impact',\n      impact_style: style,\n    });\n  }\n\n  /**\n   * A method tells that a task or action has succeeded, failed, or produced\n   * a warning. The Telegram app may play the appropriate haptics based on\n   * type value passed.\n   * @param type - notification type.\n   */\n  notificationOccurred(type: NotificationHapticFeedbackType): void {\n    this.postEvent('web_app_trigger_haptic_feedback', {\n      type: 'notification',\n      notification_type: type,\n    });\n  }\n\n  /**\n   * A method tells that the user has changed a selection. The Telegram app\n   * may play the appropriate haptics.\n   *\n   * Do not use this feedback when the user makes or confirms a selection;\n   * use it only when the selection changes.\n   */\n  selectionChanged(): void {\n    this.postEvent('web_app_trigger_haptic_feedback', { type: 'selection_change' });\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { HapticFeedback } from './HapticFeedback.js';\n\n/**\n * @returns A new initialized instance of the `HapticFeedback` class.\n * @see HapticFeedback\n */\nexport const initHapticFeedback = createComponentInitFn(\n  ({ version, postEvent }) => new HapticFeedback(version, postEvent),\n);\n","import type {\n  Chat,\n  ChatType,\n  InitDataParsed,\n  User,\n} from './types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/init-data\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/init-data\n */\nexport class InitData {\n  constructor(private readonly initData: InitDataParsed) {\n  }\n\n  /**\n   * @see InitDataParsed.authDate\n   */\n  get authDate(): Date {\n    return this.initData.authDate;\n  }\n\n  /**\n   * @see InitDataParsed.canSendAfter\n   */\n  get canSendAfter(): number | undefined {\n    return this.initData.canSendAfter;\n  }\n\n  /**\n   * Date after which it is allowed to call\n   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.\n   */\n  get canSendAfterDate(): Date | undefined {\n    const { canSendAfter } = this;\n\n    return canSendAfter\n      ? new Date(this.authDate.getTime() + canSendAfter * 1000)\n      : undefined;\n  }\n\n  /**\n   * @see InitDataParsed.chat\n   */\n  get chat(): Chat | undefined {\n    return this.initData.chat;\n  }\n\n  /**\n   * @see InitDataParsed.chatType\n   */\n  get chatType(): ChatType | undefined {\n    return this.initData.chatType;\n  }\n\n  /**\n   * @see InitDataParsed.chatInstance\n   */\n  get chatInstance(): string | undefined {\n    return this.initData.chatInstance;\n  }\n\n  /**\n   * @see InitDataParsed.hash\n   */\n  get hash(): string {\n    return this.initData.hash;\n  }\n\n  /**\n   * @see InitDataParsed.queryId\n   */\n  get queryId(): string | undefined {\n    return this.initData.queryId;\n  }\n\n  /**\n   * @see InitDataParsed.receiver\n   */\n  get receiver(): User | undefined {\n    return this.initData.receiver;\n  }\n\n  /**\n   * @see InitDataParsed.startParam\n   */\n  get startParam(): string | undefined {\n    return this.initData.startParam;\n  }\n\n  /**\n   * @see InitDataParsed.user\n   */\n  get user(): User | undefined {\n    return this.initData.user;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { InitData } from './InitData.js';\n\n/**\n * @returns A new initialized instance of the `InitData` class or undefined.\n * @see InitData\n */\nexport const initInitData = createComponentInitFn(\n  ({ initData }) => (initData ? new InitData(initData) : undefined),\n);\n","import { initData } from './parsers/initData.js';\nimport type { InitDataParsed } from './types.js';\n\n/**\n * Parses incoming value as init data.\n * @param value - value to parse.\n */\nexport function parseInitData(value: unknown): InitDataParsed {\n  return initData().parse(value);\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport type { InvoiceStatus } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { Version } from '@/version/types.js';\n\nimport type { InvoiceState } from './types.js';\n\n// TODO: Usage.\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/invoice\n */\nexport class Invoice extends WithSupportsAndTrackableState<InvoiceState, 'open'> {\n  constructor(\n    isOpened: boolean,\n    version: Version,\n    private readonly postEvent: PostEvent,\n  ) {\n    super({ isOpened }, version, { open: 'web_app_open_invoice' });\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * True if invoice is currently opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * Opens an invoice using its slug.\n   * @param slug - invoice slug.\n   * @throws {Error} Invoice is already opened.\n   */\n  open(slug: string): Promise<InvoiceStatus>;\n\n  /**\n   * Opens an invoice using its url. It expects passing link in full format, with hostname \"t.me\".\n   * @param url - invoice URL.\n   * @param type - value type.\n   * @throws {Error} Invoice is already opened.\n   */\n  open(url: string, type: 'url'): Promise<InvoiceStatus>;\n\n  async open(urlOrSlug: string, type?: 'url'): Promise<InvoiceStatus> {\n    if (this.isOpened) {\n      throw new Error('Invoice is already opened');\n    }\n\n    let slug: string;\n    if (!type) {\n      slug = urlOrSlug;\n    } else {\n      const { hostname, pathname } = new URL(urlOrSlug, window.location.href);\n      if (hostname !== 't.me') {\n        throw new Error(`Incorrect hostname: ${hostname}`);\n      }\n\n      // Valid examples:\n      // \"/invoice/my-slug\"\n      // \"/$my-slug\"\n      const match = pathname.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/);\n      if (!match) {\n        throw new Error('Link pathname has incorrect format. Expected to receive \"/invoice/{slug}\" or \"/${slug}\"');\n      }\n      [, , slug] = match;\n    }\n\n    this.isOpened = true;\n\n    try {\n      const result = await request({\n        method: 'web_app_open_invoice',\n        event: 'invoice_closed',\n        params: { slug },\n        postEvent: this.postEvent,\n        capture(data) {\n          return slug === data.slug;\n        },\n      });\n\n      return result.status;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Invoice } from './Invoice.js';\n\n/**\n * @returns A new initialized instance of the `Invoice` class.\n * @see Invoice\n */\nexport const initInvoice = createComponentInitFn(\n  ({ version, postEvent }) => new Invoice(false, version, postEvent),\n);\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { RGB } from '@/colors/types.js';\nimport type {\n  MainButtonEvents,\n  MainButtonParams,\n  MainButtonProps,\n  MainButtonState,\n} from '@/components/MainButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter = EventEmitter<MainButtonEvents>;\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/main-button\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/main-button\n */\nexport class MainButton extends WithStateUtils<MainButtonState> {\n  private readonly postEvent: PostEvent;\n\n  constructor({ postEvent, ...rest }: MainButtonProps) {\n    super(rest);\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * The MainButton background color.\n   */\n  get bgColor(): RGB {\n    return this.get('bgColor');\n  }\n\n  /**\n   * Sends current local state to the Telegram application.\n   */\n  private commit(): void {\n    // We should not commit changes until payload is correct. We could\n    // have some invalid values in case, button instance was created\n    // with empty values. Otherwise, an unexpected behavior could be received.\n    if (this.text === '') {\n      return;\n    }\n\n    this.postEvent('web_app_setup_main_button', {\n      is_visible: this.isVisible,\n      is_active: this.isEnabled,\n      is_progress_visible: this.isLoaderVisible,\n      text: this.text,\n      color: this.bgColor,\n      text_color: this.textColor,\n    });\n  }\n\n  /**\n   * Disables the MainButton.\n   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1\n   */\n  disable(): this {\n    this.isEnabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the MainButton.\n   */\n  enable(): this {\n    this.isEnabled = true;\n    return this;\n  }\n\n  /**\n   * Hides the MainButton.\n   */\n  hide(): this {\n    this.isVisible = false;\n    return this;\n  }\n\n  /**\n   * Hides the MainButton loading indicator.\n   */\n  hideLoader(): this {\n    this.isLoaderVisible = false;\n    return this;\n  }\n\n  private set isEnabled(isEnabled: boolean) {\n    this.setParams({ isEnabled });\n  }\n\n  /**\n   * True if the MainButton is enabled.\n   */\n  get isEnabled(): boolean {\n    return this.get('isEnabled');\n  }\n\n  private set isLoaderVisible(isLoaderVisible: boolean) {\n    this.setParams({ isLoaderVisible });\n  }\n\n  /**\n   * True if the MainButton loader is visible.\n   */\n  get isLoaderVisible(): boolean {\n    return this.get('isLoaderVisible');\n  }\n\n  private set isVisible(isVisible: boolean) {\n    this.setParams({ isVisible });\n  }\n\n  /**\n   * True if the MainButton is visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('main_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('main_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the MainButton.\n   *\n   * Note that opening the Mini App from the attachment menu hides the main button until the\n   * user interacts with the Mini App interface.\n   */\n  show(): this {\n    this.isVisible = true;\n    return this;\n  }\n\n  /**\n   * Shows a loading indicator on the Main Button.\n   */\n  showLoader(): this {\n    this.isLoaderVisible = true;\n    return this;\n  }\n\n  /**\n   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.\n   * @param text - a new text.\n   */\n  setText(text: string): this {\n    return this.setParams({ text });\n  }\n\n  /**\n   * Sets a new Main Button text color.\n   * @param textColor - new text color.\n   */\n  setTextColor(textColor: RGB): this {\n    return this.setParams({ textColor });\n  }\n\n  /**\n   * Updates current Main Button color.\n   * @param bgColor - color to set.\n   */\n  setBgColor(bgColor: RGB): this {\n    return this.setParams({ bgColor });\n  }\n\n  /**\n   * Allows setting multiple Main Button parameters.\n   * @param params - Main Button parameters.\n   */\n  setParams(params: Partial<MainButtonParams>): this {\n    this.set(params);\n    this.commit();\n    return this;\n  }\n\n  /**\n   * The MainButton text.\n   */\n  get text(): string {\n    return this.get('text');\n  }\n\n  /**\n   * The MainButton text color.\n   */\n  get textColor(): RGB {\n    return this.get('textColor');\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { MainButton } from './MainButton.js';\n\n/**\n * @returns A new initialized instance of the `MainButton` class.\n * @see MainButton\n */\nexport const initMainButton = createComponentInitFn(\n  'mainButton',\n  ({\n    postEvent,\n    themeParams,\n    state = {\n      isVisible: false,\n      isEnabled: false,\n      text: '',\n      isLoaderVisible: false,\n      textColor: themeParams.buttonTextColor || '#ffffff',\n      bgColor: themeParams.buttonColor || '#000000',\n    },\n  }) => new MainButton({ ...state, postEvent }),\n);\n","import { date } from '@/parsing/parsers/date.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { ValueParser } from '@/parsing/ValueParser/ValueParser.js';\n\nimport type { RequestedContact } from '../types.js';\n\n/**\n * Returns function which parses incoming value as a contact information.\n */\nexport function contact(): ValueParser<RequestedContact, false> {\n  return searchParams({\n    contact: json({\n      userId: {\n        type: number(),\n        from: 'user_id',\n      },\n      phoneNumber: {\n        type: string(),\n        from: 'phone_number',\n      },\n      firstName: {\n        type: string(),\n        from: 'first_name',\n      },\n      lastName: {\n        type: string().optional(),\n        from: 'last_name',\n      },\n    }),\n    authDate: {\n      type: date(),\n      from: 'auth_date',\n    },\n    hash: string(),\n  }, 'RequestedContact');\n}\n","import { supports } from '@/supports/supports.js';\nimport type {\n  MiniAppsMethodVersionedParams,\n  MiniAppsMethodWithVersionedParams,\n} from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\ntype HasCheckSupportMethodTuple = {\n  [M in MiniAppsMethodWithVersionedParams]: [M, MiniAppsMethodVersionedParams<M>]\n}[MiniAppsMethodWithVersionedParams];\n\n/**\n * Returns function, which accepts predefined method name and checks if it is supported\n * via passed schema and version.\n * @param schema - object which contains methods names and TWA methods with specified parameter\n * as a dependency.\n * @param version - platform version.\n */\nexport function createSupportsParamFn<Method extends string>(\n  version: Version,\n  schema: Record<Method, HasCheckSupportMethodTuple>,\n): SupportsFn<Method> {\n  return (method) => {\n    const [tmaMethod, param] = schema[method];\n\n    return supports(tmaMethod, param, version);\n  };\n}\n","/**\n * Awaits for specified amount of time.\n * @param duration - duration in ms to await.\n */\nexport function sleep(duration: number): Promise<void> {\n  return new Promise((res) => {\n    setTimeout(res, duration);\n  });\n}\n","import { invokeCustomMethod } from '@/bridge/invokeCustomMethod.js';\nimport { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { isColorDark } from '@/colors/isColorDark.js';\nimport { isRGB } from '@/colors/isRGB.js';\nimport { contact } from '@/components/MiniApp/parsing/contact.js';\nimport { createSupportsParamFn } from '@/supports/createSupportsParamFn.js';\nimport { createTimeoutError } from '@/timeout/createTimeoutError.js';\nimport { sleep } from '@/timeout/sleep.js';\nimport { withTimeout } from '@/timeout/withTimeout.js';\nimport type { PhoneRequestedStatus, WriteAccessRequestedStatus } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { SwitchInlineQueryChatType } from '@/bridge/methods/types/methods.js';\nimport type { RGB } from '@/colors/types.js';\nimport type {\n  MiniAppHeaderColor,\n  MiniAppProps,\n  MiniAppState,\n  RequestedContact,\n} from '@/components/MiniApp/types.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { ExecuteWithTimeout } from '@/types/methods.js';\n\n/**\n * Provides common Mini Apps functionality not covered by other system components.\n */\nexport class MiniApp extends WithSupportsAndTrackableState<\n  MiniAppState,\n  | 'requestPhoneAccess'\n  | 'requestWriteAccess'\n  | 'switchInlineQuery'\n  | 'setHeaderColor'\n  | 'setBackgroundColor'\n> {\n  private readonly botInline: boolean;\n\n  private readonly postEvent: PostEvent;\n\n  private readonly createRequestId: CreateRequestIdFn;\n\n  private requestPhoneAccessPromise: Promise<PhoneRequestedStatus> | undefined;\n\n  private requestWriteAccessPromise: Promise<WriteAccessRequestedStatus> | undefined;\n\n  constructor({ postEvent, createRequestId, version, botInline, ...rest }: MiniAppProps) {\n    super(rest, version, {\n      requestPhoneAccess: 'web_app_request_phone',\n      requestWriteAccess: 'web_app_request_write_access',\n      switchInlineQuery: 'web_app_switch_inline_query',\n      setHeaderColor: 'web_app_set_header_color',\n      setBackgroundColor: 'web_app_set_background_color',\n    });\n\n    this.createRequestId = createRequestId;\n    this.postEvent = postEvent;\n    this.botInline = botInline;\n\n    const supportsOriginal = this.supports.bind(this);\n    this.supports = (method) => {\n      if (!supportsOriginal(method)) {\n        return false;\n      }\n\n      // web_app_switch_inline_query requires a Mini App to be in inline mode, that's why we\n      // add 1 more check here.\n      return method !== 'switchInlineQuery' || botInline;\n    };\n\n    this.supportsParam = createSupportsParamFn(version, {\n      'setHeaderColor.color': ['web_app_set_header_color', 'color'],\n    });\n  }\n\n  /**\n   * Attempts to get requested contact.\n   * @param timeout - request timeout.\n   */\n  private async getRequestedContact({\n    timeout = 10000,\n  }: ExecuteWithTimeout = {}): Promise<RequestedContact> {\n    return contact().parse(\n      await invokeCustomMethod(\n        'getRequestedContact',\n        {},\n        this.createRequestId(),\n        { postEvent: this.postEvent, timeout },\n      ),\n    );\n  }\n\n  /**\n   * The Mini App background color.\n   * @example \"#ffaabb\"\n   */\n  get bgColor(): RGB {\n    return this.get('bgColor');\n  }\n\n  /**\n   * Closes the Mini App.\n   * @param returnBack - should the application be wrapped into the bottom bar.\n   */\n  close(returnBack?: boolean): void {\n    this.postEvent('web_app_close', { return_back: returnBack });\n  }\n\n  /**\n   * The Mini App header color.\n   * @example \"#ffaabb\"\n   * @example \"bg_color\"\n   */\n  get headerColor(): MiniAppHeaderColor {\n    return this.get('headerColor');\n  }\n\n  /**\n   * True if the Mini App is currently launched in bot inline mode.\n   */\n  get isBotInline(): boolean {\n    return this.botInline;\n  }\n\n  /**\n   * True if the current Mini App background color is recognized as dark.\n   */\n  get isDark(): boolean {\n    return isColorDark(this.bgColor);\n  }\n\n  /**\n   * Informs the Telegram app that the Mini App is ready to be displayed.\n   *\n   * It is recommended to call this method as early as possible, as soon as all essential\n   * interface elements loaded. Once this method called, the loading placeholder is hidden\n   * and the Mini App shown.\n   *\n   * If the method not called, the placeholder will be hidden only when the page fully loaded.\n   */\n  ready(): void {\n    this.postEvent('web_app_ready');\n  }\n\n  /**\n   * Requests current user contact information. In contrary to requestPhoneAccess, this method\n   * returns promise with contact information that rejects in case, user denied access, or request\n   * failed.\n   * @param options - additional options.\n   */\n  async requestContact({ timeout = 5000 }: ExecuteWithTimeout = {}): Promise<RequestedContact> {\n    // First of all, let's try to get the requested contact. Probably, we already requested\n    // it before.\n    try {\n      return await this.getRequestedContact();\n    } catch { /* empty */\n    }\n\n    // Then, request access to user's phone.\n    const status = await this.requestPhoneAccess();\n    if (status !== 'sent') {\n      throw new Error('Access denied.');\n    }\n\n    // Expected deadline.\n    const deadlineAt = Date.now() + timeout;\n\n    // Time to wait before executing the next request.\n    let sleepTime = 50;\n\n    // We are trying to retrieve the requested contact until deadline was reached.\n    return withTimeout(async () => {\n      while (Date.now() < deadlineAt) {\n        try {\n          return await this.getRequestedContact();\n        } catch {}\n\n        // Sleep for some time.\n        await sleep(sleepTime);\n\n        // Increase the sleep time not to kill the backend service.\n        sleepTime += 50;\n      }\n\n      throw createTimeoutError(timeout);\n    }, timeout);\n  }\n\n  /**\n   * Requests current user phone access. Method returns promise, which resolves\n   * status of the request. In case, user accepted the request, Mini App bot will receive\n   * the according notification.\n   *\n   * To obtain the retrieved information instead, utilize the `requestContact` method.\n   * @param options - additional options.\n   * @see requestContact\n   */\n  async requestPhoneAccess(options: ExecuteWithTimeout = {}): Promise<PhoneRequestedStatus> {\n    if (!this.requestPhoneAccessPromise) {\n      this.requestPhoneAccessPromise = request({\n        ...options,\n        method: 'web_app_request_phone',\n        event: 'phone_requested',\n        postEvent: this.postEvent,\n      })\n        .then(({ status }) => status)\n        .finally(() => this.requestPhoneAccessPromise = undefined);\n    }\n    return this.requestPhoneAccessPromise;\n  }\n\n  /**\n   * Requests write message access to current user.\n   * @param options - additional options.\n   */\n  async requestWriteAccess(options: ExecuteWithTimeout = {}): Promise<WriteAccessRequestedStatus> {\n    if (!this.requestWriteAccessPromise) {\n      this.requestWriteAccessPromise = request({\n        ...options,\n        method: 'web_app_request_write_access',\n        event: 'write_access_requested',\n        postEvent: this.postEvent,\n      })\n        .then(({ status }) => status)\n        .finally(() => this.requestWriteAccessPromise = undefined);\n    }\n    return this.requestWriteAccessPromise;\n  }\n\n  /**\n   * A method used to send data to the bot. When this method called, a service message sent to\n   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the\n   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).\n   *\n   * This method is only available for Mini Apps launched via a Keyboard button.\n   * @param data - data to send to bot.\n   * @throws {Error} data has incorrect size.\n   */\n  sendData(data: string): void {\n    const { size } = new Blob([data]);\n    if (!size || size > 4096) {\n      throw new Error(`Passed data has incorrect size: ${size}`);\n    }\n    this.postEvent('web_app_data_send', { data });\n  }\n\n  /**\n   * Updates current Mini App header color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8\n   * @param color - color key or RGB color.\n   */\n  setHeaderColor(color: MiniAppHeaderColor): void {\n    this.postEvent('web_app_set_header_color', isRGB(color) ? { color } : { color_key: color });\n    this.set('headerColor', color);\n  }\n\n  /**\n   * Updates current Mini App background color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8\n   * @param color - RGB color.\n   */\n  setBgColor(color: RGB): void {\n    this.postEvent('web_app_set_background_color', { color });\n    this.set('bgColor', color);\n  }\n\n  /**\n   * Checks if specified method parameter is supported by current component.\n   */\n  supportsParam: SupportsFn<'setHeaderColor.color'>;\n\n  /**\n   * Inserts the bot's username and the specified inline query in the current chat's input field.\n   * Query may be empty, in which case only the bot's username will be inserted. The client prompts\n   * the user to choose a specific chat, then opens that chat and inserts the bot's username and\n   * the specified inline query in the input field.\n   * @param text - text which should be inserted in the input after the current bot name. Max\n   * length is 256 symbols.\n   * @param chatTypes - List of chat types which could be chosen to send the message. Could be\n   * empty list.\n   */\n  switchInlineQuery(text: string, chatTypes: SwitchInlineQueryChatType[] = []): void {\n    if (!this.supports('switchInlineQuery') && !this.isBotInline) {\n      throw new Error('Method is unsupported because Mini App should be launched in inline mode.');\n    }\n    this.postEvent('web_app_switch_inline_query', { query: text, chat_types: chatTypes });\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { MiniApp } from './MiniApp.js';\n\n/**\n * @returns A new initialized instance of the `MiniApp` class.\n * @see MiniApp\n */\nexport const initMiniApp = createComponentInitFn(\n  'miniApp',\n  ({\n    themeParams,\n    botInline = false,\n    state = {\n      bgColor: themeParams.bgColor || '#ffffff',\n      headerColor: themeParams.headerBgColor || '#000000',\n    },\n    ...rest\n  }) => new MiniApp({ ...rest, ...state, botInline }),\n);\n","import type { PopupButton, PopupParams as BridgePopupParams } from '@/bridge/methods/types/popup.js';\n\nimport type { OpenPopupOptions } from './types.js';\n\n/**\n * Prepares popup parameters before sending them to native app.\n * @param params - popup parameters.\n */\nexport function preparePopupParams(params: OpenPopupOptions): BridgePopupParams {\n  const message = params.message.trim();\n  const title = (params.title || '').trim();\n  const buttons = params.buttons || [];\n  let preparedButtons: PopupButton[];\n\n  // Check title.\n  if (title.length > 64) {\n    throw new Error(`Title has incorrect size: ${title.length}`);\n  }\n\n  // Check message.\n  if (!message.length || message.length > 256) {\n    throw new Error(`Message has incorrect size: ${message.length}`);\n  }\n\n  // Check buttons.\n  if (buttons.length > 3) {\n    throw new Error(`Buttons have incorrect size: ${buttons.length}`);\n  }\n\n  // Append button in case, there are no buttons passed.\n  if (!buttons.length) {\n    preparedButtons = [{ type: 'close', id: '' }];\n  } else {\n    // Otherwise, check all the buttons.\n    preparedButtons = buttons.map((b) => {\n      const { id = '' } = b;\n\n      // Check button ID.\n      if (id.length > 64) {\n        throw new Error(`Button ID has incorrect size: ${id}`);\n      }\n\n      if (!b.type || b.type === 'default' || b.type === 'destructive') {\n        const text = b.text.trim();\n\n        if (!text.length || text.length > 64) {\n          const type = b.type || 'default';\n\n          throw new Error(`Button text with type \"${type}\" has incorrect size: ${b.text.length}`);\n        }\n\n        return { ...b, text, id };\n      }\n\n      return { ...b, id };\n    });\n  }\n  return { title, message, buttons: preparedButtons };\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { preparePopupParams } from '@/components/Popup/preparePopupParams.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { OpenPopupOptions, PopupState } from '@/components/Popup/types.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/popup\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/popup\n */\nexport class Popup extends WithSupportsAndTrackableState<PopupState, 'open'> {\n  constructor(isOpened: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isOpened }, version, { open: 'web_app_open_popup' });\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * True if the Popup is opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * A method that shows a native popup described by the `params` argument.\n   * Promise will be resolved when popup is closed. Resolved value will have\n   * an identifier of pressed button.\n   *\n   * In case, user clicked outside the popup or clicked top right popup close\n   * button, null will be returned.\n   *\n   * @param options - popup parameters.\n   * @throws {Error} Popup is already opened.\n   */\n  async open(options: OpenPopupOptions): Promise<string | null> {\n    if (this.isOpened) {\n      throw new Error('Popup is already opened.');\n    }\n\n    this.isOpened = true;\n\n    try {\n      const { button_id: buttonId = null } = await request({\n        event: 'popup_closed',\n        method: 'web_app_open_popup',\n        postEvent: this.postEvent,\n        params: preparePopupParams(options),\n      });\n      return buttonId;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Popup } from './Popup.js';\n\n/**\n * @returns A new initialized instance of the `Popup` class.\n * @see Popup\n */\nexport const initPopup = createComponentInitFn(\n  ({ postEvent, version }) => new Popup(false, version, postEvent),\n);\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { Version } from '@/version/types.js';\n\nimport { QRScannerOpenOptions, QRScannerState } from './types.js';\n\n// TODO: Usage\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/qr-scanner\n */\nexport class QRScanner extends WithSupportsAndTrackableState<QRScannerState, 'close' | 'open'> {\n  constructor(isOpened: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isOpened }, version, {\n      close: 'web_app_close_scan_qr_popup',\n      open: 'web_app_open_scan_qr_popup',\n    });\n  }\n\n  /**\n   * Closes the scanner.\n   */\n  close(): void {\n    this.postEvent('web_app_close_scan_qr_popup');\n    this.isOpened = false;\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * Returns true if the scanner is currently opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * Opens the scanner with the specified title shown to user.\n   * The method returns a promise with a scanned QR content and null if the scanner was closed.\n   * @param options - method options.\n   */\n  async open(options?: QRScannerOpenOptions): Promise<string | null>;\n  /**\n   * Opens the scanner with the specified title shown to user.\n   * The method returns a promise with a scanned QR content and null if the scanner was closed.\n   * @param text - title to display.\n   */\n  async open(text?: string): Promise<string | null>;\n  async open(textOrOptions?: QRScannerOpenOptions | string): Promise<string | null> {\n    if (this.isOpened) {\n      throw new Error('The scanner is already opened');\n    }\n\n    const { text, capture }: QRScannerOpenOptions = (\n      typeof textOrOptions === 'string'\n        ? { text: textOrOptions }\n        : textOrOptions\n    ) || {};\n    this.isOpened = true;\n\n    try {\n      const result = await request({\n        method: 'web_app_open_scan_qr_popup',\n        event: ['qr_text_received', 'scan_qr_popup_closed'],\n        postEvent: this.postEvent,\n        params: { text },\n        capture(ev) {\n          return ev.event === 'scan_qr_popup_closed' || !capture || capture(ev.payload);\n        },\n      }) || {};\n\n      const qr = result.data || null;\n      if (qr) {\n        this.close();\n      }\n      return qr;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n\n  // TODO: Streaming mode, allowing to scan several QRs until closed.\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { QRScanner } from './QRScanner.js';\n\n/**\n * @returns A new initialized instance of the `QRScanner` class.\n * @see QRScanner\n */\nexport const initQRScanner = createComponentInitFn(\n  ({ version, postEvent }) => new QRScanner(false, version, postEvent),\n);\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  SettingsButtonEvents,\n  SettingsButtonState,\n} from '@/components/SettingsButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { Version } from '@/version/types.js';\n\ntype Emitter = EventEmitter<SettingsButtonEvents>;\n\nexport class SettingsButton extends WithSupportsAndStateUtils<SettingsButtonState, 'show' | 'hide'> {\n  constructor(isVisible: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isVisible }, version, {\n      show: 'web_app_setup_settings_button',\n      hide: 'web_app_setup_settings_button',\n    });\n  }\n\n  private set isVisible(visible: boolean) {\n    this.set('isVisible', visible);\n    this.postEvent('web_app_setup_settings_button', { is_visible: visible });\n  }\n\n  /**\n   * True if the SettingsButton is visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Hides the SettingsButton.\n   */\n  hide(): void {\n    this.isVisible = false;\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('settings_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('settings_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the SettingsButton.\n   */\n  show(): void {\n    this.isVisible = true;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { SettingsButton } from './SettingsButton.js';\n\n/**\n * @returns A new initialized instance of the `SettingsButton` class.\n * @see SettingsButton\n */\nexport const initSettingsButton = createComponentInitFn(\n  'settingsButton',\n  ({\n    version,\n    postEvent,\n    state = { isVisible: false },\n  }) => new SettingsButton(state.isVisible, version, postEvent),\n);\n","import { themeParams } from '@/components/ThemeParams/parsing/themeParams.js';\n\nimport type { ThemeParamsParsed } from '../types.js';\n\n/**\n * Parses incoming value as theme parameters.\n * @param value - value to parse.\n */\nexport function parseThemeParams(value: unknown): ThemeParamsParsed {\n  return themeParams().parse(value);\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport { isColorDark } from '@/colors/isColorDark.js';\nimport type { RGB } from '@/colors/types.js';\nimport type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { parseThemeParams } from './parsing/parseThemeParams.js';\nimport type { ThemeParamsParsed, ThemeParamsState } from './types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/theming\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/theme-params\n */\nexport class ThemeParams extends WithTrackableState<ThemeParamsState> {\n  /**\n   * @since v6.10\n   */\n  get accentTextColor(): RGB | undefined {\n    return this.get('accentTextColor');\n  }\n\n  get bgColor(): RGB | undefined {\n    return this.get('bgColor');\n  }\n\n  get buttonColor(): RGB | undefined {\n    return this.get('buttonColor');\n  }\n\n  get buttonTextColor(): RGB | undefined {\n    return this.get('buttonTextColor');\n  }\n\n  get destructiveTextColor(): RGB | undefined {\n    return this.get('destructiveTextColor');\n  }\n\n  /**\n   * Returns the copy of the internal state of the current component instance.\n   */\n  getState(): ThemeParamsParsed {\n    return this.clone();\n  }\n\n  /**\n   * @since v6.10\n   */\n  get headerBgColor(): RGB | undefined {\n    return this.get('headerBgColor');\n  }\n\n  get hintColor(): RGB | undefined {\n    return this.get('hintColor');\n  }\n\n  /**\n   * @returns True in case, current color scheme is recognized as dark. This\n   * value is calculated according to theme bg color.\n   */\n  get isDark(): boolean {\n    return !this.bgColor || isColorDark(this.bgColor);\n  }\n\n  get linkColor(): RGB | undefined {\n    return this.get('linkColor');\n  }\n\n  get secondaryBgColor(): RGB | undefined {\n    return this.get('secondaryBgColor');\n  }\n\n  /**\n   * @since v6.10\n   */\n  get sectionBgColor(): RGB | undefined {\n    return this.get('sectionBgColor');\n  }\n\n  /**\n   * @since v6.10\n   */\n  get sectionHeaderTextColor(): RGB | undefined {\n    return this.get('sectionHeaderTextColor');\n  }\n\n  /**\n   * @since v7.6\n   */\n  get sectionSeparatorColor(): RGB | undefined {\n    return this.get('sectionHeaderTextColor');\n  }\n\n  /**\n   * Starts listening to the external theme changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen(): RemoveEventListenerFn {\n    return on('theme_changed', (event) => {\n      this.set(parseThemeParams(event.theme_params));\n    });\n  }\n\n  /**\n   * @since v6.10\n   */\n  get subtitleTextColor(): RGB | undefined {\n    return this.get('subtitleTextColor');\n  }\n\n  get textColor(): RGB | undefined {\n    return this.get('textColor');\n  }\n}\n","import { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\n/**\n * @returns A new initialized instance of the `ThemeParams` class.\n * @see ThemeParams\n */\nexport const initThemeParams = createComponentInitFn(\n  'themeParams',\n  ({ themeParams, state = themeParams, addCleanup }) => {\n    const tp = new ThemeParams(state);\n    addCleanup(tp.listen());\n    return tp;\n  },\n);\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { parseThemeParams } from './parsing/parseThemeParams.js';\nimport type { ThemeParamsParsed } from './types.js';\n\n/**\n * Requests current theme parameters from the Telegram application.\n * @param options - request options.\n */\nexport function requestThemeParams(options: ExecuteWithOptions = {}): Promise<ThemeParamsParsed> {\n  return request({\n    ...options,\n    method: 'web_app_request_theme',\n    event: 'theme_changed',\n  }).then(parseThemeParams);\n}\n","/**\n * Ensures, that specified value starts with the specified prefix. If it doesn't, function appends\n * prefix.\n * @param value - value to check.\n * @param prefix - prefix to add.\n */\nexport function ensurePrefix(value: string, prefix: string): string {\n  return value.startsWith(prefix) ? value : `${prefix}${value}`;\n}\n","import { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Safely creates new instance of URL with some predefined protocol and hostname.\n * @param urlOrPath - URL instance or path.\n */\nexport function createSafeURL(urlOrPath: string | Partial<URLLike>): URL {\n  return new URL(\n    typeof urlOrPath === 'string'\n      ? urlOrPath\n      : `${urlOrPath.pathname || ''}${ensurePrefix(urlOrPath.search || '', '?')}${ensurePrefix(urlOrPath.hash || '', '#')}`,\n    'http://a',\n  );\n}\n","import { captureSameReq } from '@/bridge/captureSameReq.js';\nimport { request } from '@/bridge/request.js';\nimport { WithSupports } from '@/classes/WithSupports.js';\nimport { createSupportsParamFn } from '@/supports/createSupportsParamFn.js';\nimport { supports } from '@/supports/supports.js';\nimport { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport interface UtilsOpenLinkOptions {\n  /**\n   * Attempts to use the instant view mode.\n   */\n  tryInstantView?: boolean;\n  /**\n   * Attempts to use user preferred browser.\n   */\n  tryBrowser?: boolean;\n}\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/utils\n */\nexport class Utils extends WithSupports<'readTextFromClipboard'> {\n  constructor(\n    private readonly version: Version,\n    private readonly createRequestId: CreateRequestIdFn,\n    private readonly postEvent: PostEvent,\n  ) {\n    super(version, { readTextFromClipboard: 'web_app_read_text_from_clipboard' });\n\n    this.supportsParam = createSupportsParamFn(version, {\n      'openLink.tryInstantView': ['web_app_open_link', 'try_instant_view'],\n    });\n  }\n\n  /**\n   * Opens a link.\n   *\n   * The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App or on the main button).\n   * @param url - URL to be opened.\n   * @param options - additional options.\n   */\n  openLink(url: string, options?: UtilsOpenLinkOptions): void;\n\n  /**\n   * Opens a link.\n   *\n   * The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App or on the main button).\n   * @param url - URL to be opened.\n   * @param tryInstantView - try to use the instant view.\n   * @deprecated Use the second argument as an object.\n   */\n  openLink(url: string, tryInstantView?: boolean): void\n\n  openLink(url: string, instantOrOptions?: boolean | UtilsOpenLinkOptions): void {\n    const formattedUrl = createSafeURL(url).toString();\n\n    // If the method is not supported, we are doing it in legacy way.\n    if (!supports('web_app_open_link', this.version)) {\n      window.open(formattedUrl, '_blank');\n      return;\n    }\n\n    const options: UtilsOpenLinkOptions = typeof instantOrOptions === 'boolean'\n      ? { tryInstantView: instantOrOptions }\n      : instantOrOptions || {};\n\n    // Otherwise, do it normally.\n    this.postEvent('web_app_open_link', {\n      url: formattedUrl,\n      try_browser: options.tryBrowser,\n      try_instant_view: options.tryInstantView,\n    });\n  }\n\n  /**\n   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing\n   * link in full format, with hostname \"t.me\".\n   * @param url - URL to be opened.\n   * @throws {Error} URL has not allowed hostname.\n   */\n  openTelegramLink(url: string): void {\n    const { hostname, pathname, search } = new URL(url, 'https://t.me');\n    if (hostname !== 't.me') {\n      throw new Error(`URL has not allowed hostname: ${hostname}. Only \"t.me\" is allowed`);\n    }\n\n    if (!supports('web_app_open_tg_link', this.version)) {\n      window.location.href = url;\n      return;\n    }\n\n    this.postEvent('web_app_open_tg_link', { path_full: pathname + search });\n  }\n\n  /**\n   * Reads text from clipboard and returns string or null. null is returned\n   * in cases:\n   * - Value in clipboard is not text\n   * - Access to clipboard is not allowed\n   */\n  async readTextFromClipboard(): Promise<string | null> {\n    const reqId = this.createRequestId();\n    const {\n      data = null,\n    } = await request({\n      method: 'web_app_read_text_from_clipboard',\n      event: 'clipboard_text_received',\n      postEvent: this.postEvent,\n      params: { req_id: reqId },\n      capture: captureSameReq(reqId),\n    });\n\n    return data;\n  }\n\n  /**\n   * Shares specified URL with the passed to the chats, selected by user. After being called,\n   * it closes the mini application.\n   *\n   * This method uses Telegram's Share Links.\n   * @param url - URL to share.\n   * @param text - text to append after the URL.\n   * @see https://core.telegram.org/api/links#share-links\n   * @see https://core.telegram.org/widgets/share#custom-buttons\n   */\n  shareURL(url: string, text?: string): void {\n    this.openTelegramLink(\n      `https://t.me/share/url?` + new URLSearchParams({ url, text: text || '' })\n        .toString()\n        // By default, URL search params encode spaces with \"+\".\n        // We are replacing them with \"%20\", because plus symbols are working incorrectly\n        // in Telegram.\n        .replace(/\\+/g, '%20'),\n    );\n  }\n\n  /**\n   * Checks if specified method parameter is supported by current component.\n   */\n  supportsParam: SupportsFn<'openLink.tryInstantView'>;\n}\n","import { Utils } from '@/components/Utils/Utils.js';\nimport { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\n/**\n * @returns A new initialized instance of the `Utils` class.\n * @see Utils\n */\nexport const initUtils = createComponentInitFn(\n  ({ version, postEvent, createRequestId }) => {\n    return new Utils(version, createRequestId, postEvent);\n  },\n);\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nexport interface RequestViewportResult {\n  height: number;\n  isStateStable: boolean;\n  isExpanded: boolean;\n  width: number;\n}\n\n/**\n * Requests viewport actual information from the Telegram application.\n * @param options - request options.\n */\nexport async function requestViewport(\n  options: ExecuteWithOptions = {},\n): Promise<RequestViewportResult> {\n  const {\n    is_expanded: isExpanded,\n    is_state_stable: isStateStable,\n    ...rest\n  } = await request({\n    ...options,\n    method: 'web_app_request_viewport',\n    event: 'viewport_changed',\n  });\n\n  return { ...rest, isExpanded, isStateStable };\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { RemoveEventListenerFn } from '@/events/types.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { requestViewport } from './requestViewport.js';\nimport type { ViewportProps, ViewportState } from './types.js';\n\n/**\n * Formats value to make it stay in bounds [0, +Inf).\n * @param value - value to format.\n */\nfunction truncate(value: number): number {\n  return value < 0 ? 0 : value;\n}\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/viewport\n * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/viewport\n */\nexport class Viewport extends WithTrackableState<ViewportState> {\n  private readonly postEvent: PostEvent;\n\n  constructor({ postEvent, stableHeight, height, width, isExpanded }: ViewportProps) {\n    super({\n      height: truncate(height),\n      isExpanded,\n      stableHeight: truncate(stableHeight),\n      width: truncate(width),\n    });\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * Requests viewport information from the Telegram application and updates current Viewport\n   * instance.\n   * @param options - options to request fresh data.\n   */\n  async sync(options?: ExecuteWithOptions): Promise<void> {\n    const { isStateStable, ...rest } = await requestViewport(options);\n    this.set({\n      ...rest,\n      stableHeight: isStateStable ? rest.height : this.get('stableHeight'),\n    });\n  }\n\n  /**\n   * The current height of the **visible area** of the Mini App.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the bot can do the same by calling `expand` method. As the position of\n   * the Mini App changes, the current height value of the visible area will be updated  in real\n   * time.\n   *\n   * Please note that the refresh rate of this value is not sufficient to smoothly follow the\n   * lower border of the window. It should not be used to pin interface elements to the bottom\n   * of the visible area. It's more appropriate to use the value of the `stableHeight`\n   * field for this purpose.\n   *\n   * @see stableHeight\n   */\n  get height(): number {\n    return this.get('height');\n  }\n\n  /**\n   * The height of the visible area of the Mini App in its last stable state.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the application can do the same by calling `expand` method.\n   *\n   * Unlike the value of `height`, the value of `stableHeight` does not change as the position\n   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`\n   * will be updated after all gestures and animations are completed and\n   * the Mini App reaches its final size.\n   *\n   * @see height\n   */\n  get stableHeight(): number {\n    return this.get('stableHeight');\n  }\n\n  /**\n   * Starts listening to viewport changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen(): RemoveEventListenerFn {\n    return on('viewport_changed', (event) => {\n      const {\n        height,\n        width,\n        is_expanded: isExpanded,\n        is_state_stable: isStateStable,\n      } = event;\n      const truncatedHeight = truncate(height);\n\n      this.set({\n        height: truncatedHeight,\n        isExpanded,\n        width: truncate(width),\n        ...(isStateStable ? { stableHeight: truncatedHeight } : {}),\n      });\n    });\n  }\n\n  /**\n   * True if the Mini App is expanded to the maximum available height. Otherwise, if\n   * the Mini App occupies part of the screen and can be expanded to the full height using\n   * `expand` method.\n   * @see expand\n   */\n  get isExpanded(): boolean {\n    return this.get('isExpanded');\n  }\n\n  /**\n   * Current visible area width.\n   */\n  get width(): number {\n    return this.get('width');\n  }\n\n  /**\n   * A method that expands the Mini App to the maximum available height. To find out if the Mini\n   * App is expanded to the maximum height, refer to the value of the `isExpanded`.\n   * @see isExpanded\n   */\n  expand(): void {\n    this.postEvent('web_app_expand');\n    this.set('isExpanded', true);\n  }\n\n  /**\n   * True if the current viewport height is stable and is not going to change in the next moment.\n   */\n  get isStable(): boolean {\n    return this.stableHeight === this.height;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Viewport } from './Viewport.js';\nimport { requestViewport } from '@/components/Viewport/requestViewport.js';\n\n/**\n * @returns A promise with a new initialized instance of the `Viewport` class.\n * @see Viewport\n */\nexport const initViewport = createComponentInitFn(\n  'viewport',\n  async ({ state, platform, postEvent, addCleanup }) => {\n    let isExpanded = false;\n    let height = 0;\n    let width = 0;\n    let stableHeight = 0;\n\n    // State was saved previously, we restore the Viewport from this state.\n    if (state) {\n      isExpanded = state.isExpanded;\n      height = state.height;\n      width = state.width;\n      stableHeight = state.stableHeight;\n    } else if (['macos', 'tdesktop', 'unigram', 'webk', 'weba', 'web'].includes(platform)) {\n      // If platform has a stable viewport, it means we could instantiate Viewport using\n      // the window global object properties.\n      isExpanded = true;\n      height = window.innerHeight;\n      width = window.innerWidth;\n      stableHeight = window.innerHeight;\n    } else {\n      // We were unable to retrieve data locally. In this case we are sending a request returning\n      // a viewport information.\n      const response = await requestViewport({ timeout: 1000, postEvent });\n      isExpanded = response.isExpanded;\n      height = response.height;\n      width = response.width;\n      stableHeight = response.isStateStable ? height : 0;\n    }\n\n    // Otherwise, Viewport instance will be created using zero values.\n    const viewport = new Viewport({\n      postEvent,\n      height,\n      width,\n      stableHeight,\n      isExpanded,\n    });\n\n    // Listen to the viewport external changes and actualize local instance.\n    addCleanup(viewport.listen());\n\n    return viewport;\n  },\n);\n","/**\n * Sets CSS variable globally.\n * @param name - variable name.\n * @param value - variable value.\n */\nexport function setCSSVar(name: string, value: string): void {\n  document.documentElement.style.setProperty(name, value);\n}\n","import { isRGB } from '@/colors/isRGB.js';\nimport { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport type { MiniApp } from '@/components/MiniApp/MiniApp.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetMiniAppCSSVarNameFn {\n  /**\n   * @param property - MiniApp property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: 'bg' | 'header'): string;\n}\n\n/**\n * Creates CSS variables connected with the MiniApps class instance background and header colors\n * based on the passed MiniApp and ThemeParams instances.\n *\n * Created variables by default:\n * - `--tg-bg-color`\n * - `--tg-header-color`\n *\n * Variables are being automatically updated in case, corresponding MiniApp and ThemeParams\n * properties were updated.\n *\n * @param miniApp - MiniApp instance.\n * @param themeParams - ThemeParams instance.\n * @param getVarName - function, returning complete CSS variable name for the specified\n * MiniApp property.\n * @returns Function to stop updating variables.\n */\nexport function bindMiniAppCSSVars(\n  miniApp: MiniApp,\n  themeParams: ThemeParams,\n  getVarName?: GetMiniAppCSSVarNameFn,\n): CleanupFn {\n  getVarName ||= (property) => `--tg-${property}-color`;\n\n  const headerVar = getVarName('header');\n  const bgVar = getVarName('bg');\n\n  const actualize = () => {\n    const { headerColor } = miniApp;\n\n    if (isRGB(headerColor)) {\n      setCSSVar(headerVar, headerColor);\n    } else {\n      const { bgColor, secondaryBgColor } = themeParams;\n\n      if (headerColor === 'bg_color' && bgColor) {\n        setCSSVar(headerVar, bgColor);\n      } else if (headerColor === 'secondary_bg_color' && secondaryBgColor) {\n        setCSSVar(headerVar, secondaryBgColor);\n      }\n    }\n\n    setCSSVar(bgVar, miniApp.bgColor)\n  };\n\n  const listeners = [\n    themeParams.on('change', actualize),\n    miniApp.on('change', actualize),\n  ];\n\n  actualize();\n\n  return () => listeners.forEach(off => off());\n}\n","import { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetThemeParamsCSSVarNameFn {\n  /**\n   * @param property - ThemeParams property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: string): string;\n}\n\n/**\n * Creates CSS variables connected with the passed instance of the ThemeParams class.\n *\n * By default, created CSS variables names are following the pattern \"--tg-theme-{name}\", where\n * {name} is a theme parameters key name converted from camel case to kebab case.\n *\n * Example:\n * --tg-theme-bg-color\n * --tg-theme-secondary-text-color\n *\n * Variables are being automatically updated in case, corresponding properties updated in\n * the passed ThemeParams instance.\n *\n * @param themeParams - ThemeParams instance.\n * @param getCSSVarName - function, returning complete CSS variable name for the specified\n * ThemeParams property.\n * @returns Function to stop updating variables.\n */\nexport function bindThemeParamsCSSVars(\n  themeParams: ThemeParams,\n  getCSSVarName?: GetThemeParamsCSSVarNameFn,\n): CleanupFn {\n  getCSSVarName ||= (property) => {\n    return `--tg-theme-${property.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}`;\n  };\n\n  const actualize = () => {\n    Object.entries(themeParams.getState()).forEach(([k, v]) => {\n      if (v) {\n        setCSSVar(getCSSVarName(k), v);\n      }\n    });\n  };\n\n  actualize();\n\n  return themeParams.on('change', actualize);\n}\n","import { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { Viewport } from '@/components/Viewport/Viewport.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetViewportCSSVarNameFn {\n  /**\n   * @param property - Viewport property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: 'width' | 'height' | 'stable-height'): string;\n}\n\n/**\n * Accepts Viewport instance and sets CSS variables connected with viewport\n * sizes.\n *\n * Be careful using this function as long as it can impact application\n * performance. Viewport size is changing rather often, this makes CSS\n * variables update, which leads to possible layout redraw.\n *\n * Variables:\n * - `--tg-viewport-height`\n * - `--tg-viewport-width`\n * - `--tg-viewport-stable-height`\n *\n * Variables are being automatically updated in case, corresponding properties\n * updated in passed Viewport instance.\n *\n * @param viewport - Viewport instance.\n * @param getCSSVarName - function, returning complete CSS variable name for the specified\n * Viewport property.\n * @returns Function to stop updating variables.\n */\nexport function bindViewportCSSVars(\n  viewport: Viewport,\n  getCSSVarName?: GetViewportCSSVarNameFn,\n): CleanupFn {\n  getCSSVarName ||= (property) => `--tg-viewport-${property}`;\n  const [\n    heightVar,\n    widthVar,\n    stableHeightVar,\n  ] = (['height', 'width', 'stable-height'] as const).map((prop) => getCSSVarName(prop));\n  const setHeight = () => setCSSVar(heightVar, `${viewport.height}px`);\n  const setWidth = () => setCSSVar(widthVar, `${viewport.width}px`);\n  const setStableHeight = () => setCSSVar(stableHeightVar, `${viewport.stableHeight}px`);\n\n  // TODO: Should probably add debounce or throttle.\n  const listeners = [\n    viewport.on('change:height', setHeight),\n    viewport.on('change:width', setWidth),\n    viewport.on('change:stableHeight', setStableHeight),\n  ];\n\n  setHeight();\n  setWidth();\n  setStableHeight();\n\n  return () => listeners.forEach(off => off());\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { postEvent } from '@/bridge/methods/postEvent.js';\n\ninterface CleanupFn {\n  (): void;\n}\n\n/**\n * Performs initialization process in the web version of Telegram.\n * @returns Function, which performs cleanup removing all created elements and listeners.\n * @param acceptCustomStyles - true if SDK should accept styles sent from the Telegram web\n * application. This option is only used in web versions of Telegram. Default: false.\n */\nexport function initWeb(acceptCustomStyles = true): CleanupFn {\n  const listeners: CleanupFn[] = [\n    on('reload_iframe', () => {\n      postEvent('iframe_will_reload');\n      window.location.reload();\n    }),\n  ];\n  const cleanup: CleanupFn = () => listeners.forEach((l) => l());\n\n  if (acceptCustomStyles) {\n    const style = document.createElement('style');\n    style.id = 'telegram-custom-styles';\n    document.head.appendChild(style);\n\n    listeners.push(\n      on('set_custom_style', (html) => {\n        // It is safe to use innerHTML here as long as style tag has a special behavior related\n        // to the specified content. In case, any script will be passed here, it will not be\n        // executed.\n        style.innerHTML = html;\n      }),\n      () => document.head.removeChild(style),\n    );\n  }\n\n  // Notify Telegram, iframe is ready. This will result in sending style tag html from native\n  // application which is used in catchCustomStyles function. We should call this method also\n  // to start receiving \"reload_iframe\" events from the Telegram application.\n  postEvent('iframe_ready', { reload_supported: true });\n\n  return cleanup;\n}\n","/**\n * @returns True, if current environment is server.\n */\nexport function isSSR(): boolean {\n  return typeof window === 'undefined';\n}\n","import { request } from '@/bridge/request.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\n\n/**\n * Returns true in case, current environment is Telegram Mini Apps.\n */\nexport async function isTMA(): Promise<boolean> {\n  if (hasWebviewProxy(window)) {\n    return true;\n  }\n  try {\n    await request({ method: 'web_app_request_theme', event: 'theme_changed', timeout: 100 });\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import { saveToStorage } from '@/launch-params/saveToStorage.js';\nimport { parseMessage } from '@/bridge/parseMessage.js';\nimport { isIframe } from '@/env/isIframe.js';\nimport { hasExternalNotify } from '@/env/hasExternalNotify.js';\nimport { emitMiniAppsEvent } from '@/bridge/events/event-handlers/emitMiniAppsEvent.js';\nimport { serializeThemeParams } from '@/components/ThemeParams/parsing/serializeThemeParams.js';\nimport { parseLaunchParams } from '@/launch-params/parseLaunchParams.js';\nimport type { LaunchParams } from '@/launch-params/types.js';\nimport type { MiniAppsEventPayload } from '@/bridge/events/types.js';\n\n/**\n * Mocks a Telegram application environment.\n * @param launchParamsRaw - launch parameters presented as a string or query parameters.\n */\nexport function mockTelegramEnv(launchParamsRaw: LaunchParams | string): void {\n  const lp = typeof launchParamsRaw === 'string'\n    ? parseLaunchParams(launchParamsRaw)\n    : launchParamsRaw;\n\n  // Save launch params in the storage, so retrieveLaunchParams will return them.\n  saveToStorage(lp);\n\n  function wiredPostMessage(data: unknown): void {\n    if (typeof data !== 'string') {\n      return;\n    }\n    try {\n      const { eventType } = parseMessage(data);\n\n      if (eventType === 'web_app_request_theme') {\n        emitMiniAppsEvent('theme_changed', {\n          theme_params: JSON.parse(serializeThemeParams(lp.themeParams)),\n        } satisfies MiniAppsEventPayload<'theme_changed'>);\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        emitMiniAppsEvent('viewport_changed', {\n          width: window.innerWidth,\n          height: window.innerHeight,\n          is_state_stable: true,\n          is_expanded: true,\n        } satisfies MiniAppsEventPayload<'viewport_changed'>);\n      }\n    } catch {\n    }\n  }\n\n  // Override all possible ways of calling a Mini Apps method.\n  if (isIframe()) {\n    const postMessage = window.parent.postMessage.bind(window.parent);\n    window.parent.postMessage = data => {\n      void wiredPostMessage(data);\n      postMessage(data);\n    };\n    return;\n  }\n\n  if (hasExternalNotify(window)) {\n    const notify = window.external.notify.bind(window.external);\n    window.external.notify = data => {\n      void wiredPostMessage(data);\n      notify(data);\n    };\n    return;\n  }\n\n  const proxy = (window as any).TelegramWebviewProxy;\n  (window as any).TelegramWebviewProxy = {\n    ...(proxy || {}),\n    postEvent(...args: any) {\n      void wiredPostMessage(JSON.stringify({ eventType: args[0], eventData: args[1] }));\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      proxy && proxy.postEvent(...args);\n    },\n  };\n}\n","import { SDKError } from './SDKError.js';\n\n/**\n * @returns True, if passed value is an instance of SDKError.\n * @param value - value to check.\n */\nexport function isSDKError(value: unknown): value is SDKError {\n  return value instanceof SDKError;\n}\n","import { isSDKError } from './isSDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Returns true if passed value is an SDK error of specified type.\n * @param value - value to check.\n * @param type - error type.\n */\nexport function isSDKErrorOfType(value: unknown, type: ErrorType): boolean {\n  return isSDKError(value) && value.type === type;\n}\n","import type {\n  BasicNavigatorAnyHistoryItem,\n  BasicNavigatorHistoryItem,\n} from '@/navigation/BasicNavigator/types.js';\n\n/**\n * Converts any known history item type to the local one.\n * @param item - history item presented as a string or an object.\n * @param relativePathname - relative pathname.\n */\nexport function prepareItem<Params>(\n  item: BasicNavigatorAnyHistoryItem<Params>,\n  relativePathname: string,\n): Readonly<BasicNavigatorHistoryItem<Params>> {\n  let pathname: string;\n  let params: Params | undefined;\n  let id: string | undefined;\n\n  if (typeof item === 'string') {\n    pathname = item;\n  } else {\n    pathname = item.pathname === undefined\n      ? relativePathname\n      : item.pathname;\n    params = item.params;\n    id = item.id;\n  }\n\n  return Object.freeze({\n    id: id || ((Math.random() * 2 ** 14) | 0).toString(16),\n    pathname,\n    params,\n  });\n}\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { type PostEvent, postEvent as defaultPostEvent } from '@/bridge/methods/postEvent.js';\nimport { createError } from '@/errors/createError.js';\nimport {\n  ERR_NAVIGATION_HISTORY_EMPTY,\n  ERR_NAVIGATION_INDEX_INVALID,\n} from '@/errors/errors.js';\nimport { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { prepareItem } from '@/navigation/BasicNavigator/prepareItem.js';\nimport type {\n  BasicNavigatorAnyHistoryItem,\n  BasicNavigatorEvents,\n  BasicNavigatorHistoryItem,\n} from '@/navigation/BasicNavigator/types.js';\n\ntype Emitter<Params> = EventEmitter<BasicNavigatorEvents<Params>>;\n\nexport class BasicNavigator<Params = {}> {\n  /**\n   * Navigation history.\n   */\n  readonly history: Readonly<BasicNavigatorHistoryItem<Params>>[];\n\n  private readonly ee: Emitter<Params> = new EventEmitter();\n\n  constructor(\n    /**\n     * Navigation history.\n     */\n    history: readonly BasicNavigatorAnyHistoryItem<Params>[],\n    /**\n     * Currently active history item.\n     */\n    private _index: number,\n    /**\n     * Function to call Mini Apps methods.\n     * @default Global `postEvent` function.\n     */\n    private readonly postEvent: PostEvent = defaultPostEvent,\n  ) {\n    if (history.length === 0) {\n      throw createError(ERR_NAVIGATION_HISTORY_EMPTY, 'History should not be empty.');\n    }\n\n    if (_index < 0 || _index >= history.length) {\n      throw createError(\n        ERR_NAVIGATION_INDEX_INVALID,\n        'Index should not be zero and higher or equal than history size.',\n      );\n    }\n    this.history = history.map((item) => prepareItem(item, ''));\n  }\n\n  /**\n   * True, if current navigator is currently attached.\n   */\n  private attached = false;\n\n  /**\n   * Allows this navigator to control the `BackButton` visibility state. It also tracks the\n   * `BackButton` clicks and calls the `back` method.\n   */\n  attach(): void {\n    if (!this.attached) {\n      this.attached = true;\n      this.sync();\n      on('back_button_pressed', this.back);\n    }\n  }\n\n  /**\n   * Goes to the previous history item.\n   */\n  back = (): void => this.go(-1);\n\n  /**\n   * Currently active history item.\n   */\n  get current(): Readonly<BasicNavigatorHistoryItem<Params>> {\n    return this.history[this.index];\n  }\n\n  /**\n   * Prevents current navigator from controlling the BackButton visibility state.\n   */\n  detach(): void {\n    this.attached = false;\n    off('back_button_pressed', this.back);\n  }\n\n  /**\n   * Goes to the next history item.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(delta: number, fit?: boolean): void {\n    // Compute the next index.\n    const index = this.index + delta;\n\n    // Cut the index to be in bounds [0, history.length - 1].\n    const fitIndex = Math.min(\n      Math.max(0, index),\n      this.history.length - 1,\n    );\n\n    // We perform \"go\" only in case, computed and cut indexes are equal or \"fit\" option was\n    // specified.\n    if (index === fitIndex || fit) {\n      // We are just calling setter to update the index and emit all related events.\n      this.replaceAndMove(fitIndex, this.history[fitIndex]);\n    }\n  }\n\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(index: number, fit?: boolean): void {\n    this.go(index - this.index, fit);\n  }\n\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev(): boolean {\n    return this.index > 0;\n  }\n\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext(): boolean {\n    return this.index !== this.history.length - 1;\n  }\n\n  /**\n   * Currently active history item index.\n   */\n  get index(): number {\n    return this._index;\n  }\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<Params>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<Params>['off'] = this.ee.off.bind(this.ee);\n\n  /**\n   * Adds a new history item removing all after the current one.\n   * @param item - item to add.\n   */\n  push(item: BasicNavigatorAnyHistoryItem<Params>): void {\n    if (this.hasNext) {\n      this.history.splice(this.index + 1);\n    }\n    this.replaceAndMove(this.index + 1, prepareItem(item, this.current.pathname));\n  }\n\n  /**\n   * Replaces the current history item.\n   * @param item - item to replace the current item with.\n   */\n  replace(item: BasicNavigatorAnyHistoryItem<Params>): void {\n    this.replaceAndMove(this.index, prepareItem(item, this.current.pathname));\n  }\n\n  /**\n   * Sets history item by the specified index.\n   * @param index - history item index to replace.\n   * @param historyItem - history item to set.\n   */\n  private replaceAndMove(index: number, historyItem: BasicNavigatorHistoryItem<Params>): void {\n    const delta = index - this.index;\n    if (!delta && this.current === historyItem) {\n      // Nothing changed.\n      return;\n    }\n\n    const from = this.current;\n\n    if (this.index !== index) {\n      const prevIndex = this._index;\n      this._index = index;\n\n      // If navigator is attached and back button local visibility state changed, we should\n      // notify Telegram app about it.\n      if (this.attached && prevIndex > 0 !== index > 0) {\n        this.sync();\n      }\n    }\n\n    this.history[index] = historyItem;\n    this.ee.emit('change', {\n      navigator: this,\n      from,\n      to: this.current,\n      delta,\n    });\n  }\n\n  /**\n   * Actualizes the `BackButton` visibility state.\n   */\n  private sync(): void {\n    this.postEvent('web_app_setup_back_button', { is_visible: !!this.index });\n  }\n}\n","import type { BasicNavigatorHistoryItem } from '@/navigation/BasicNavigator/types.js';\nimport type {\n  BrowserNavigatorHistoryItem,\n  BrowserNavigatorHistoryItemParams,\n} from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Converts basic navigator entry to browser navigator entry.\n */\nexport function basicItemToBrowser<State>(\n  {\n    params,\n    ...rest\n  }: BasicNavigatorHistoryItem<BrowserNavigatorHistoryItemParams<State>>,\n): BrowserNavigatorHistoryItem<State> {\n  return { ...(params || { hash: '', search: '' }), ...rest };\n}\n","import { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Extracts path part from a URL.\n * @param urlOrPath - URL instance or path.\n */\nexport function urlToPath(urlOrPath: string | Partial<URLLike>): string {\n  const isAbsolute = typeof urlOrPath === 'string'\n    ? urlOrPath.startsWith('/')\n    : !!(urlOrPath.pathname && urlOrPath.pathname.startsWith('/'));\n  const url = createSafeURL(urlOrPath);\n\n  return `${isAbsolute ? url.pathname : url.pathname.slice(1)}${url.search}${url.hash}`;\n}\n","import { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BrowserNavigatorAnyHistoryItem } from '@/navigation/BrowserNavigator/types.js';\n\ninterface PrepareItemResult<State> {\n  id?: string;\n  pathname: string;\n  params: {\n    hash: string;\n    search: string;\n    state?: State;\n  };\n}\n\n/**\n * Converts a path, presented as a string to a basic navigator appropriate form.\n * @param path - full path.\n * @param relativePath - relative path.\n * @param state - history item state.\n */\nexport function prepareItem<State>(\n  path: string,\n  relativePath: string,\n  state?: State,\n): PrepareItemResult<State>;\n\n/**\n * Converts a path, presented as an object to a basic navigator appropriate form.\n * @param item - history item data.\n * @param relativePath - relative path.\n */\nexport function prepareItem<State>(\n  item: BrowserNavigatorAnyHistoryItem<State>,\n  relativePath: string,\n): PrepareItemResult<State>;\n\nexport function prepareItem<State>(\n  itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>,\n  relativePath: string,\n  state?: State,\n): PrepareItemResult<State> {\n  let path: string;\n  let id: string | undefined;\n\n  if (typeof itemOrPath === 'string') {\n    path = itemOrPath;\n  } else {\n    path = urlToPath(itemOrPath);\n    state = itemOrPath.state;\n    id = itemOrPath.id;\n  }\n\n  const { pathname, search, hash } = new URL(path, `http://a${ensurePrefix(relativePath, '/')}`);\n  return { id, pathname, params: { hash, search, state } };\n}\n","import { onWindow } from '@/events/onWindow.js';\n\n/**\n * Performs window.history.go operation waiting for it to be completed.\n * @param delta - history change delta.\n */\nexport async function go(delta: number): Promise<boolean> {\n  if (delta === 0) {\n    return true;\n  }\n\n  // We expect popstate event to occur during some time. Yeah, this seems tricky and not stable,\n  // but it seems like we have no other way out. Waiting for Navigation API to be implemented in\n  // browsers.\n  return Promise.race<boolean>([\n    new Promise((res) => {\n      const remove = onWindow('popstate', () => {\n        remove();\n        res(true);\n      });\n\n      window.history.go(delta);\n    }),\n\n    // Usually, it takes about 1ms to emit this event, but we use some buffer.\n    new Promise((res) => {\n      setTimeout(res, 50, false);\n    }),\n  ]);\n}\n","import { go } from '@/navigation/go.js';\n\n/**\n * Drops current browser history switching browser history cursor to the first one entry.\n */\nexport async function drop(): Promise<void> {\n  if (window.history.length <= 1) {\n    return;\n  }\n\n  // Push empty state to cut states we have no access to, placed after the current one.\n  window.history.pushState(null, '');\n\n  // By this line of code we cover the most recent case, when application is opened in WebView,\n  // but not in iframe. Applications opened in WebView have simple browser history containing\n  // only entries belonging to the current web application.\n  const goPerformed = await go(1 - window.history.length);\n  if (goPerformed) {\n    return;\n  }\n\n  // Nevertheless, iframe works a bit different in context of browser history. Calling\n  // window.history.length in iframe will return browser history information related to the\n  // external web environment too (e.g. browser tab). So, iframe shares the browser history with\n  // the external application, but has no access to its history entries. Calling window.history.go\n  // pointing out to the entry belonging to the external application will have no impact, so the\n  // previous idea with go(1 - ...) will not work.\n  //\n  // This is the reason why we iteratively call go(-1) to meet the entry which is recognized as\n  // the initial one for the current iframe.\n  let shouldGoBack = await go(-1);\n  while (shouldGoBack) {\n    shouldGoBack = await go(-1);\n  }\n}\n","import { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Extracts pathname from the value.\n * @param value - source value.\n */\nexport function getPathname(value: string | Partial<URLLike>): string {\n  return createSafeURL(value).pathname;\n}\n","import { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { BasicNavigator } from '@/navigation/BasicNavigator/BasicNavigator.js';\nimport { basicItemToBrowser } from '@/navigation/BrowserNavigator/basicItemToBrowser.js';\nimport { prepareItem } from '@/navigation/BrowserNavigator/prepareItem.js';\nimport { createSafeURL } from '@/navigation/createSafeURL.js';\nimport { drop } from '@/navigation/drop.js';\nimport { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport { getPathname } from '@/navigation/getPathname.js';\nimport { go } from '@/navigation/go.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BasicNavigatorEvents } from '@/navigation/BasicNavigator/types.js';\nimport type {\n  BrowserNavigatorAnyHistoryItem,\n  BrowserNavigatorConOptions,\n  BrowserNavigatorEvents,\n  BrowserNavigatorHashMode,\n  BrowserNavigatorHistoryItem,\n  BrowserNavigatorHistoryItemParams,\n  URLLike,\n} from '@/navigation/BrowserNavigator/types.js';\n\nconst CURSOR_VOID = 0;\nconst CURSOR_BACK = 1;\nconst CURSOR_FORWARD = 2;\n\ntype Navigator<State> = BasicNavigator<BrowserNavigatorHistoryItemParams<State>>;\ntype Emitter<State> = EventEmitter<BrowserNavigatorEvents<State>>;\n\nexport class BrowserNavigator<State = {}> {\n  private readonly navigator: Navigator<State>;\n\n  private readonly ee: Emitter<State> = new EventEmitter();\n\n  readonly hashMode: BrowserNavigatorHashMode | null;\n\n  readonly base: string;\n\n  constructor(\n    /**\n     * Navigation history.\n     */\n    history: readonly BrowserNavigatorAnyHistoryItem<State>[],\n    /**\n     * Currently active history item index.\n     */\n    index: number,\n    { postEvent, hashMode = 'classic', base }: BrowserNavigatorConOptions = {},\n  ) {\n    this.navigator = new BasicNavigator(\n      history.map((item) => prepareItem(item, '/')),\n      index,\n      postEvent,\n    );\n    this.navigator.on('change', (e) => {\n      void this.onNavigatorChange(e);\n    });\n    this.hashMode = hashMode;\n    this.base = getPathname(base || '');\n  }\n\n  /**\n   * Shows whether the navigator is currently attached to the browser history.\n   */\n  private attached = false;\n\n  /**\n   * Attaches current navigator to the browser history allowing navigator to manipulate it.\n   */\n  async attach(): Promise<void> {\n    if (!this.attached) {\n      this.attached = true;\n      this.navigator.attach();\n      window.addEventListener('popstate', this.onPopState);\n      await this.syncHistory();\n    }\n  }\n\n  /**\n   * Goes back in history by 1.\n   */\n  back(): void {\n    this.navigator.back();\n  }\n\n  /**\n   * Detaches current navigator from the browser history.\n   */\n  detach() {\n    this.attached = false;\n    this.navigator.detach();\n    window.removeEventListener('popstate', this.onPopState);\n  }\n\n  /**\n   * Goes forward in history.\n   */\n  forward(): void {\n    return this.navigator.forward();\n  }\n\n  /**\n   * Current history cursor.\n   */\n  get index(): number {\n    return this.navigator.index;\n  }\n\n  /**\n   * Current history item identifier.\n   */\n  get id(): string {\n    return this.navigator.current.id;\n  }\n\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(delta: number, fit?: boolean): void {\n    return this.navigator.go(delta, fit);\n  }\n\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(index: number, fit?: boolean): void {\n    this.navigator.goTo(index, fit);\n  }\n\n  /**\n   * Current history item hash.\n   * @see URL.hash\n   * @example\n   * \"\", \"#my-hash\"\n   */\n  get hash(): string {\n    return (this.navigator.current.params || {}).hash || '';\n  }\n\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev(): boolean {\n    return this.navigator.hasPrev;\n  }\n\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext(): boolean {\n    return this.navigator.hasNext;\n  }\n\n  /**\n   * Navigation history.\n   */\n  get history(): BrowserNavigatorHistoryItem<State>[] {\n    return this.navigator.history.map(basicItemToBrowser);\n  }\n\n  /**\n   * Handles the window \"popstate\" event.\n   * @param state - event state.\n   */\n  private onPopState = ({ state }: PopStateEvent) => {\n    // In case state is null, we recognize current event as occurring whenever user clicks\n    // any anchor.\n    // TODO: Should we do it?\n    if (state === null) {\n      return this.push(this.parsePath(window.location.href));\n    }\n\n    // There is only one case when state can be CURSOR_VOID - when history contains\n    // only one element. In this case, we should return user to the current history element.\n    if (state === CURSOR_VOID) {\n      window.history.forward();\n    } else if (state === CURSOR_BACK) {\n      this.back();\n    }\n    if (state === CURSOR_FORWARD) {\n      this.forward();\n    }\n  };\n\n  /**\n   * Underlying navigator change event listener.\n   */\n  private onNavigatorChange = async ({\n    to,\n    from,\n    delta,\n  }: BasicNavigatorEvents<BrowserNavigatorHistoryItemParams<State>>['change']) => {\n    // If this navigator is attached to the browser history, we should synchronize.\n    if (this.attached) {\n      await this.syncHistory();\n    }\n    this.ee.emit('change', {\n      delta,\n      from: basicItemToBrowser(from),\n      to: basicItemToBrowser(to),\n      navigator: this,\n    });\n  };\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<State>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<State>['off'] = this.ee.off.bind(this.ee);\n\n  /**\n   * Path, including pathname, search and hash.\n   * @example Pathname only.\n   * \"/pathname\"\n   * @example Pathname + search.\n   * \"/pathname?search\"\n   * @example Pathname + hash.\n   * \"/pathname#hash\"\n   * @example Pathname + search + hash.\n   * \"/pathname?search#hash\"\n   */\n  get path(): string {\n    return urlToPath(this);\n  }\n\n  /**\n   * Current pathname. Always starts with the slash.\n   * @see URL.pathname\n   * @example\n   * \"/\", \"/abc\"\n   */\n  get pathname(): string {\n    return this.navigator.current.pathname;\n  }\n\n  /**\n   * Depending on the current navigation type, parses incoming path and returns it presented as\n   * an object. In other words, this method parses the passed path and returns object, describing\n   * how the navigator \"sees\" it.\n   *\n   * @example Hash mode is omitted.\n   * parsePath('/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   * parsePath('http://example.com/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   *\n   * @example Hash mode is enabled.\n   * parsePath('/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   */\n  parsePath(path: string | URL): URLLike {\n    let url = createSafeURL(path);\n    if (this.hashMode) {\n      url = createSafeURL(url.hash.slice(1));\n    }\n\n    return {\n      pathname: url.pathname,\n      search: url.search,\n      hash: url.hash,\n    };\n  }\n\n  /**\n   * Pushes new history item. Method replaces all entries after the current one with the one\n   * being pushed. Take a note, that passed item is always relative. In case, you want to use\n   * it as an absolute one, use the \"/\" prefix. Example: \"/absolute\", { pathname: \"/absolute\" }.\n   *\n   * To create a final path, navigator uses a method, used in the URL class constructor, resolving\n   * a path based on the current one.\n   * @param path - entry path.\n   * @param state - entry state.\n   *\n   * @example Pushing an absolute path.\n   * push(\"/absolute\"); // \"/absolute\"\n   *\n   * @example Pushing a relative path.\n   * push(\"relative\"); // \"/home/root\" -> \"/home/relative\"\n   *\n   * @example Pushing query parameters.\n   * push(\"/absolute?my-param=1\"); // \"/home/root\" -> \"/absolute?my-param=1\"\n   * push(\"relative?my-param=1\"); // \"/home/root\" -> \"/home/relative?my-param=1\"\n   * push(\"?my-param=1\"); // \"/home\" -> \"/home?my-param=1\"\n   *\n   * @example Pushing hash.\n   * push(\"#my-hash\"); // \"/home\" -> \"/home#my-hash\"\n   * push(\"relative#my-hash\"); // \"/home/root\" -> \"/home/relative#my-hash\"\n   *\n   * @example Pushing state.\n   * push(\"\", { state: 'my-state' }); \"/home/root\" -> \"/home/root\"\n   * push({ state: 'my-state' }); \"/home/root\" -> \"/home/root\"\n   */\n  push(path: string, state?: State): void;\n  push(item: BrowserNavigatorAnyHistoryItem<State>): void;\n  push(itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>, fnState?: State): void {\n    const item = prepareItem(itemOrPath, this.path);\n    const { state = fnState } = item.params;\n    this.navigator.push({ ...item, params: { ...item.params, state } });\n  }\n\n  /**\n   * Replaces the current history item. Has the same logic as the `push` method.\n   * @param path - entry path.\n   * @param state - entry state.\n   * @see push\n   */\n  replace(path: string, state?: State): void;\n  replace(item: BrowserNavigatorAnyHistoryItem<State>): void;\n  replace(itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>, fnState?: State): void {\n    const item = prepareItem(itemOrPath, this.path);\n    const { state = fnState } = item.params;\n    this.navigator.replace({ ...item, params: { ...item.params, state } });\n  }\n\n  /**\n   * Combines the navigator `base` property with the passed path data applying the navigator\n   * navigation mode.\n   * @param value - path presented as string or URLLike.\n   */\n  renderPath(value: string | URLLike): string {\n    const path = (this.base.length === 1 ? '' : this.base)\n      + ensurePrefix(urlToPath(value), '/');\n\n    return this.hashMode\n      ? ensurePrefix(path.slice(1), this.hashMode === 'classic' ? '#' : '#/')\n      : path;\n  }\n\n  /**\n   * Synchronizes current navigator state with browser history.\n   */\n  private async syncHistory(): Promise<void> {\n    // Remove history change event listener to get rid of side effects related to the possible\n    // future calls of history.go.\n    window.removeEventListener('popstate', this.onPopState);\n\n    const { state } = this;\n    const path = this.renderPath(this);\n\n    // Drop the browser history and work with the clean one.\n    await drop();\n\n    if (this.hasPrev && this.hasNext) {\n      // We have both previous and next elements. History should be:\n      // [back, *current*, forward]\n      window.history.replaceState(CURSOR_BACK, '');\n      window.history.pushState(state, '', path);\n      window.history.pushState(CURSOR_FORWARD, '');\n\n      await go(-1);\n    } else if (this.hasPrev) {\n      // We have only previous element. History should be:\n      // [back, *current*]\n      window.history.replaceState(CURSOR_BACK, '');\n      window.history.pushState(state, '', path);\n    } else if (this.hasNext) {\n      // We have only next element. History should be:\n      // [*current*, forward]\n      window.history.replaceState(state, path);\n      window.history.pushState(CURSOR_FORWARD, '');\n\n      await go(-1);\n    } else {\n      // We have no back and next elements. History should be:\n      // [void, *current*]\n      window.history.replaceState(CURSOR_VOID, '');\n      window.history.pushState(state, '', path);\n    }\n\n    window.addEventListener('popstate', this.onPopState);\n  }\n\n  /**\n   * Current query parameters.\n   * @see URL.search\n   * @example\n   * \"\", \"?\", \"?a=1\"\n   */\n  get search(): string {\n    return (this.navigator.current.params || {}).search || '';\n  }\n\n  /**\n   * Current history item state.\n   */\n  get state(): State | undefined {\n    return (this.navigator.current.params || {}).state;\n  }\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_INVALID_PATH_BASE } from '@/errors/errors.js';\nimport { BrowserNavigator } from '@/navigation/BrowserNavigator/BrowserNavigator.js';\nimport { getPathname } from '@/navigation/getPathname.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BrowserNavigatorConOptions } from '@/navigation/BrowserNavigator/types.js';\n\nexport function createBrowserNavigatorFromLocation<State>(\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  options ||= {};\n  const { href, hash } = window.location;\n\n  let path = urlToPath(\n    options.hashMode === null\n      // Hash mode is explicitly disabled. We are working with the usual location path.\n      ? href\n      // If hash mode is enabled, we should create a navigator based on the location's hash.\n      // In this case we have 2 possible situations:\n      // 1. Hash contains only launch parameters. Example:\n      // #tgWebAppData=...&tgWebAppPlatform=...&...\n      // Here we should mark the launch parameters as query parameters and have pathname \"/\" as\n      // the initial one.\n      //\n      // 2. Hash contains value, passed from above and launch parameters as query parameters.\n      // For instance, we could have such a URL:\n      // https://t.me/mybot/myapp#my-hash\n      // In this case, the Mini App will be opened with this URL:\n      // https://example.com/#my-hash?tgWebAppData=...&tgWebAppPlatform=...&...\n      : hash.includes('?') ? hash.slice(1) : `?${hash.slice(1)}`,\n  );\n\n  // If some base was specified, we should check if computed path starts with this base. In\n  // case it does, it should be removed from the path. Otherwise, an error must be thrown.\n  const base = options.base ? getPathname(options.base) : undefined;\n  if (base) {\n    if (!path.startsWith(base)) {\n      throw createError(\n        ERR_INVALID_PATH_BASE,\n        `Path \"${path}\" expected to be starting with \"${base}\"`,\n      );\n    }\n    path = path.slice(base.length);\n  }\n\n  return new BrowserNavigator<State>([path], 0, options);\n}\n","/**\n * @param value - string to take hash part from.\n * @returns String after the first met \"#\" symbol. In case, value doesn't contain hashtag, the\n * function will return null.\n *\n * @example No hash.\n * getHash('/path'); // null\n *\n * @example Has hash.\n * getHash('/path#abc'); // 'abc'\n *\n * @example Has double hash.\n * getHash('/path#abc#another'); // 'abc#another'\n */\nexport function getHash(value: string): string | null {\n  const match = value.match(/#(.+)/);\n  return match ? match[1] : null;\n}\n","import {\n  BrowserNavigatorConOptions,\n  BrowserNavigatorHistoryItem,\n} from '@/navigation/BrowserNavigator/types.js';\nimport { BrowserNavigator } from '@/navigation/BrowserNavigator/BrowserNavigator.js';\nimport { isPageReload } from '@/navigation/isPageReload.js';\nimport {\n  createBrowserNavigatorFromLocation\n} from '@/navigation/BrowserNavigator/createBrowserNavigatorFromLocation.js';\n\n\nfunction instantiate<State>(\n  sessionStorageKey: string,\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  // If page was reloaded, we assume that navigator had to previously save its state in the\n  // session storage.\n  if (isPageReload()) {\n    const stateRaw = sessionStorage.getItem(sessionStorageKey);\n    if (stateRaw) {\n      try {\n        const { index, history } = JSON.parse(stateRaw);\n        return new BrowserNavigator(\n          history as BrowserNavigatorHistoryItem<State>[],\n          index as number,\n          options\n        );\n      } catch (e) {\n        console.error('Unable to restore hash navigator state.', e);\n      }\n    }\n  }\n\n  // In case, we could not restore its state, or it is a fresh start, we can create an empty\n  // navigator. We are creating BrowserNavigator from the window.location.\n  return createBrowserNavigatorFromLocation(options);\n}\n\n/**\n * Initializes a standard Mini Apps navigator.\n * @param sessionStorageKey - session storage key, containing the navigator state.\n * @param options - additional BrowserNavigator options.\n */\nexport function initNavigator<State>(\n  sessionStorageKey: string,\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  const navigator = instantiate<State>(sessionStorageKey, options);\n\n  const saveState = () => sessionStorage.setItem(sessionStorageKey, JSON.stringify({\n    index: navigator.index,\n    history: navigator.history,\n  }));\n\n  // Whenever navigator changes its state, we save it in the session storage.\n  navigator.on('change', saveState);\n\n  // Save the initial state to make sure nothing will break when the page was reloaded.\n  saveState();\n\n  return navigator;\n}\n"],"names":["createSingleton","create","onReset","cached","reset","unsubscribe","listener","ee","miniAppsEventEmitter","count","resetMiniAppsEventEmitter","subscribe","Logger","scope","options","level","args","now","date","textColor","bgColor","commonCss","logger","debugEnabled","onEvent","name","payload","setDebug","enable","log","EventEmitter","__publicField","event","l","once","listeners","i","onWindow","type","createCleanup","fns","cleanedUp","cache","fn","clean","SDKError","message","cause","createError","ERR_METHOD_UNSUPPORTED","ERR_METHOD_PARAMETER_UNSUPPORTED","ERR_UNKNOWN_ENV","ERR_INVOKE_CUSTOM_METHOD_RESPONSE","ERR_TIMED_OUT","ERR_UNEXPECTED_TYPE","ERR_PARSE","ERR_NAVIGATION_HISTORY_EMPTY","ERR_NAVIGATION_INDEX_INVALID","ERR_NAVIGATION_ITEM_INVALID","ERR_SSR_INIT","ERR_INVALID_PATH_BASE","createTypeError","ValueParser","parser","isOptional","value","createValueParserGenerator","boolean","asString","parseBySchema","schema","getField","result","field","definition","from","definitionType","parsedValue","error","toRecord","formattedValue","json","record","number","num","string","parseMessage","v","cleanupEventHandlers","prop","emitMiniAppsEvent","eventType","eventData","defineEventHandlers","path","pointer","item","idx","arr","parsers","createMiniAppsEventEmitter","subEmitter","mainEmitter","cleanup","data","get","emitter","off","on","isRecord","compareVersions","a","b","aParts","bParts","len","aVal","bVal","versionLessOrEqual","supports","method","paramOrVersion","inVersion","hasExternalNotify","hasWebviewProxy","isIframe","INITIAL_TARGET_ORIGIN","currentTargetOrigin","setTargetOrigin","targetOrigin","postEvent","paramsOrOptions","postOptions","targetOriginFn","createPostEvent","version","params","captureSameReq","reqId","req_id","createTimeoutError","timeout","withTimeout","funcOrPromise","_","rej","request","resolve","promise","res","capture","ev","defaultPostEvent","invokeCustomMethod","requestId","classNames","values","entry","mergeClassNames","partials","acc","partial","key","className","isRGB","isRGBShort","toRGB","color","match","component","formatted","isColorDark","rgb","modifier","dec","State","state","keyOrState","keyValue","WithStateUtils","shape","createSupportsFn","WithSupportsAndStateUtils","stateShape","supportsSchema","BackButton","isVisible","visible","searchParams","paramValue","chat","user","initData","keyToLocal","keyToExternal","themeParams","rgbOptional","k","parseLaunchParams","retrieveFromUrl","urlString","retrieveFromLocation","getFirstNavigationEntry","retrieveFromPerformance","navigationEntry","formatKey","m","setStorageValue","getStorageValue","retrieveFromStorage","serializeThemeParams","serializeLaunchParams","initDataRaw","platform","showSettings","startParam","botInline","saveToStorage","retrieveLaunchParams","retrieve","lp","isPageReload","createRequestIdGenerator","createReqId","createComponentInitFn","factoryStaticOrSK","factoryDynamic","factoryOptions","addCleanup","bindChange","initBackButton","WithSupportsAndTrackableState","formatEvent","BiometryManager","rest","reason","token","response","requestBiometryInfo","initBiometryManager","WithTrackableState","ClosingBehavior","isConfirmationNeeded","initClosingBehavior","WithSupports","parseArray","ArrayParser","itemParser","array","parserTypeName","objectFromKeys","keys","CloudStorage","createRequestId","keyOrKeys","initCloudStorage","HapticFeedback","style","initHapticFeedback","InitData","canSendAfter","initInitData","parseInitData","Invoice","isOpened","urlOrSlug","slug","hostname","pathname","initInvoice","MainButton","isEnabled","isLoaderVisible","text","initMainButton","contact","createSupportsParamFn","tmaMethod","param","sleep","duration","MiniApp","supportsOriginal","returnBack","deadlineAt","sleepTime","status","size","chatTypes","initMiniApp","preparePopupParams","title","buttons","preparedButtons","id","Popup","buttonId","initPopup","QRScanner","textOrOptions","qr","initQRScanner","SettingsButton","initSettingsButton","parseThemeParams","ThemeParams","initThemeParams","tp","requestThemeParams","ensurePrefix","prefix","createSafeURL","urlOrPath","Utils","url","instantOrOptions","formattedUrl","search","initUtils","requestViewport","isExpanded","isStateStable","truncate","Viewport","stableHeight","height","width","truncatedHeight","initViewport","viewport","setCSSVar","bindMiniAppCSSVars","miniApp","getVarName","property","headerVar","bgVar","actualize","headerColor","secondaryBgColor","bindThemeParamsCSSVars","getCSSVarName","bindViewportCSSVars","heightVar","widthVar","stableHeightVar","setHeight","setWidth","setStableHeight","initWeb","acceptCustomStyles","html","isSSR","isTMA","mockTelegramEnv","launchParamsRaw","wiredPostMessage","postMessage","notify","proxy","isSDKError","isSDKErrorOfType","prepareItem","relativePathname","BasicNavigator","history","_index","delta","fit","index","fitIndex","historyItem","prevIndex","basicItemToBrowser","urlToPath","isAbsolute","itemOrPath","relativePath","hash","go","remove","drop","shouldGoBack","getPathname","CURSOR_VOID","CURSOR_BACK","CURSOR_FORWARD","BrowserNavigator","hashMode","base","to","e","fnState","createBrowserNavigatorFromLocation","href","getHash","instantiate","sessionStorageKey","stateRaw","initNavigator","navigator","saveState"],"mappings":";;;AAKgB,SAAAA,GACdC,GACAC,GAUA;AACI,MAAAC;AACJ,QAAMC,IAAQ,MAAM;AACP,IAAAD,MAAA,UAAaD,KAAWA,EAAQC,CAAM,GACxCA,IAAA;AAAA,EAAA;AAGJ,SAAA,CAAC,MAAOA,MAAW,SAAYA,IAASF,EAAOG,CAAK,IAAID,GAASC,CAAK;AAC/E;AClBO,SAASC,GAAYC,GAA2C;AACrE,QAAMC,IAAKC,KACL,EAAE,OAAAC,EAAU,IAAAF;AAClB,EAAAA,EAAG,YAAYD,CAAQ,GAGnBG,KAAS,CAACF,EAAG,SACWG;AAE9B;ACLO,SAASC,GAAUL,GAA4D;AAC/D,SAAAE,EAAA,EAAE,UAAUF,CAAQ,GAClC,MAAMD,GAAYC,CAAQ;AACnC;ACJO,MAAMM,GAAiD;AAAA,EAC5D,YACmBC,GACAC,IAAyB,IAC1C;AAFiB,SAAA,QAAAD,GACA,KAAA,UAAAC;AAAA,EAEnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,MAAMC,MAAoBC,GAAmB;AAC7C,UAAAC,wBAAU,QACVC,IAAO,KACV,eAAe,SAAS;AAAA,MACvB,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,wBAAwB;AAAA,MACxB,UAAU;AAAA,IAAA,CACX,EACA,OAAOD,CAAG,GAEP,EAAE,WAAAE,GAAW,SAAAC,MAAY,KAAK,SAC9BC,IAAY;AAElB,YAAQN,CAAK;AAAA,MACX,KAAKG,CAAI,UAAU,KAAK,KAAK;AAAA,MAC7B,GAAGG,CAAS;AAAA,MACZ;AAAA,MACA,GAAGA,CAAS,IAAIF,IAAY,SAASA,CAAS,MAAM,EAAE,GAAGC,IAAU,oBAAoBA,CAAO,KAAK,EAAE;AAAA,MAErG,GAAGJ;AAAA,IAAA;AAAA,EAEP;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAASA,GAAmB;AAErB,SAAA,MAAM,SAAS,GAAGA,CAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAOA,GAAmB;AAEnB,SAAA,MAAM,OAAO,GAAGA,CAAI;AAAA,EAC3B;AACF;AC3Da,MAAAM,IAAS,IAAIV,GAAO,OAAO;AAAA,EACtC,SAAS;AAAA,EACT,WAAW;AACb,CAAC;AAED,IAAIW,IAAe;AAEnB,MAAMC,KAAqC,CAAC,EAAE,MAAAC,GAAM,SAAAC,QAAc;AACzD,EAAAJ,EAAA,IAAI,mBAAmBI,IAAU,EAAE,MAAAD,GAAM,SAAAC,EAAQ,IAAI,EAAE,MAAAD,EAAA,CAAM;AACtE;AAOO,SAASE,GAASC,GAAuB;AAC9C,EAAIL,MAAiBK,MACJL,IAAAK,GACfA,IAASjB,GAAUa,EAAO,IAAInB,GAAYmB,EAAO;AAErD;AAMO,SAASK,MAAOb,GAAmB;AACxC,EAAIO,KAEKD,EAAA,IAAI,GAAGN,CAAI;AAEtB;AC3BO,MAAMc,EAAqB;AAAA,EAA3B;AACY,IAAAC,EAAA,uCAGT;AAEA,IAAAA,EAAA,wBAAiB;AAEjB,IAAAA,EAAA,4BAAkD,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAK1D,QAAQ;AACN,SAAK,UAAU,SACf,KAAK,qBAAqB;EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAAgB;AACX,WAAA,KAAK,iBAAiB,KAAK,mBAAmB;AAAA,EACvD;AAAA,EAeA,KAAKC,MAA6BhB,GAAmB;AACnD,SAAK,mBAAmB,QAAQ,CAACiB,MAAMA,EAAE;AAAA,MACvC,OAAAD;AAAA,MACA,MAAAhB;AAAA,IACD,CAAA,CAAC,IAEgB,KAAK,UAAU,IAAIgB,CAAK,KAAK,IAErC,QAAQ,CAAC,CAAC1B,GAAU4B,CAAI,MAAM;AAEtC,MAAA5B,EAAS,GAAGU,CAAI,GACZkB,KACG,KAAA,IAAIF,GAAO1B,CAAQ;AAAA,IAC1B,CACD;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,GACE0B,GACA1B,GACA4B,GACuB;AACvB,QAAIC,IAAY,KAAK,UAAU,IAAIH,CAAK;AACxC,WAAKG,KACH,KAAK,UAAU,IAAIH,GAAOG,IAAY,CAAE,CAAA,GAG1CA,EAAU,KAAK,CAAC7B,GAAU4B,CAAI,CAAC,GAC/B,KAAK,kBAAkB,GAEhB,MAAM,KAAK,IAAIF,GAAO1B,CAAQ;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAiC0B,GAAU1B,GAA0C;AACnF,UAAM6B,IAAY,KAAK,UAAU,IAAIH,CAAK,KAAK;AAC/C,aAASI,IAAI,GAAGA,IAAID,EAAU,QAAQC,KAAK;AACzC,UAAI9B,MAAa6B,EAAUC,CAAC,EAAE,CAAC,GAAG;AACtB,QAAAD,EAAA,OAAOC,GAAG,CAAC,GACrB,KAAK,kBAAkB;AACvB;AAAA,MACF;AAAA,EAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU9B,GAA4D;AAC/D,gBAAA,mBAAmB,KAAKA,CAAQ,GAC9B,MAAM,KAAK,YAAYA,CAAQ;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAYA,GAA2C;AACrD,aAAS8B,IAAI,GAAGA,IAAI,KAAK,mBAAmB,QAAQA,KAAK;AACvD,UAAI,KAAK,mBAAmBA,CAAC,MAAM9B,GAAU;AACtC,aAAA,mBAAmB,OAAO8B,GAAG,CAAC;AACnC;AAAA,MACF;AAAA,EAEJ;AACF;ACvHgB,SAAAC,EACdC,GACAhC,GACAQ,GACuB;AAChB,gBAAA,iBAAiBwB,GAAMhC,GAAUQ,CAAO,GACxC,MAAM,OAAO,oBAAoBwB,GAAMhC,GAAUQ,CAAO;AACjE;ACVO,SAASyB,KAAiBC,GAI/B;AACA,MAAIC,IAAY;AACV,QAAAC,IAAQF,EAAI,KAAK,CAAC;AAEjB,SAAA;AAAA,IACL,CAACG,MAAO,CAACF,KAAaC,EAAM,KAAKC,CAAE;AAAA,IACnC,MAAM;AACJ,MAAKF,MACSA,IAAA,IACNC,EAAA,QAAQ,CAASE,MAAAA,EAAO,CAAA;AAAA,IAElC;AAAA,IACAH;AAAA,EAAA;AAEJ;ACnBO,MAAMI,UAAiB,MAAM;AAAA,EAClC,YAA4BP,GAAiBQ,GAAkBC,GAAiB;AACxE,UAAAD,GAAS,EAAE,OAAAC,EAAA,CAAO,GADE,KAAA,OAAAT,GAEnB,OAAA,eAAe,MAAMO,EAAS,SAAS;AAAA,EAChD;AACF;ACDgB,SAAAG,EAAYV,GAAiBQ,GAAiBC,GAA2B;AACvF,SAAO,IAAIF,EAASP,GAAMQ,GAASC,CAAK;AAC1C;ACRO,MAAME,KAAyB,0BAKzBC,KAAmC,oCAKnCC,KAAkB,mBAKlBC,KAAoC,qCAKpCC,KAAgB,iBAKhBC,KAAsB,uBAKtBC,KAAY,aAKZC,KAA+B,6BAK/BC,KAA+B,iCAK/BC,KAA8B,+BAK9BC,KAAe,gBAKfC,KAAwB;ACnD9B,SAASC,IAA4B;AACnC,SAAAb,EAAYM,IAAqB,2BAA2B;AACrE;ACHO,MAAMQ,EAAoD;AAAA,EAC/D,YACYC,GACAC,GACA1B,GACV;AAHU,SAAA,SAAAyB,GACA,KAAA,aAAAC,GACA,KAAA,OAAA1B;AAAA,EAEZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM2B,GAAgE;AAGhE,QAAA,OAAK,cAAcA,MAAU;AAI7B,UAAA;AACK,eAAA,KAAK,OAAOA,CAAK;AAAA,eACjBlB,GAAO;AACR,cAAAC;AAAA,UACJO;AAAA,UACA,wBAAwB,KAAK,OAAO,OAAO,KAAK,IAAI,KAAK,EAAE;AAAA,UAC3DR;AAAA,QAAA;AAAA,MAEJ;AAAA,EACF;AAAA,EAEA,WAAwD;AACtD,gBAAK,aAAa,IACX;AAAA,EACT;AACF;AChCgB,SAAAmB,EACdH,GACAzB,GACyB;AACzB,SAAO,MAAM,IAAIwB,EAAYC,GAAQ,IAAOzB,CAAI;AAClD;ACRa,MAAA6B,IAAyCD,EAA2B,CAACD,MAAU;AACtF,MAAA,OAAOA,KAAU;AACZ,WAAAA;AAEH,QAAAG,IAAW,OAAOH,CAAK;AAEzB,MAAAG,MAAa,OAAOA,MAAa;AAC5B,WAAA;AAGL,MAAAA,MAAa,OAAOA,MAAa;AAC5B,WAAA;AAGT,QAAMP,EAAgB;AACxB,GAAG,SAAS;ACXI,SAAAQ,GACdC,GACAC,GACG;AACH,QAAMC,IAAS,CAAA;AAEf,aAAWC,KAASH,GAAQ;AACpB,UAAAI,IAAaJ,EAAOG,CAAK;AAC/B,QAAI,CAACC;AACH;AAGE,QAAAC,GACAZ;AAGJ,QAAI,OAAOW,KAAe,cAAc,WAAWA;AAE1C,MAAAC,IAAAF,GACPV,IAAS,OAAOW,KAAe,aAAaA,IAAaA,EAAW,MAAM,KAAKA,CAAU;AAAA,SACpF;AACC,YAAA,EAAE,MAAME,EAAmB,IAAAF;AAEjC,MAAAC,IAAOD,EAAW,QAAQD,GAC1BV,IAAS,OAAOa,KAAmB,aAC/BA,IACAA,EAAe,MAAM,KAAKA,CAAc;AAAA,IAC9C;AAEI,QAAA;AACF,YAAMC,IAAcd,EAAOQ,EAASI,CAAI,CAAC;AACzC,MAAIE,MAAgB,WACjBL,EAAeC,CAAK,IAAII;AAAA,aAEpBC,GAAO;AACd,YAAM9B,EAAYO,IAAW,0BAA0BkB,CAAK,KAAKK,CAAK;AAAA,IACxE;AAAA,EACF;AAEO,SAAAN;AACT;AC3CO,SAASO,GAASd,GAAyC;AAChE,MAAIe,IAAsBf;AASxB,MANE,OAAOe,KAAmB,aACXA,IAAA,KAAK,MAAMA,CAAc,IAK1C,OAAOA,KAAmB,YACvBA,MAAmB,QACnB,MAAM,QAAQA,CAAc;AAE/B,UAAMnB,EAAgB;AAGjB,SAAAmB;AACT;AChBgB,SAAAC,EAAQX,GAAmBhC,GAAsC;AACxE,SAAA,IAAIwB,EAAY,CAACG,MAAU;AAC1B,UAAAiB,IAASH,GAASd,CAAK;AAC7B,WAAOI,GAAcC,GAAQ,CAACG,MAAUS,EAAOT,CAAK,CAAC;AAAA,EAAA,GACpD,IAAOnC,CAAI;AAChB;ACRa,MAAA6C,IAAuCjB,EAA2B,CAACD,MAAU;AACpF,MAAA,OAAOA,KAAU;AACZ,WAAAA;AAGL,MAAA,OAAOA,KAAU,UAAU;AACvB,UAAAmB,IAAM,OAAOnB,CAAK;AAExB,QAAI,CAAC,OAAO,MAAMmB,CAAG;AACZ,aAAAA;AAAA,EAEX;AAEA,QAAMvB,EAAgB;AACxB,GAAG,QAAQ,GCdEwB,IAAuCnB,EAA2B,CAACD,MAAU;AACxF,MAAI,OAAOA,KAAU,YAAY,OAAOA,KAAU;AAChD,WAAOA,EAAM;AAEf,QAAMJ,EAAgB;AACxB,GAAG,QAAQ;ACSJ,SAASyB,GAAarB,GAAiC;AAC5D,SAAOgB,EAAK;AAAA,IACV,WAAWI,EAAO;AAAA,IAClB,WAAW,CAACE,MAAMA;AAAA,EAAA,CACnB,EAAE,MAAMtB,CAAK;AAChB;ACvBO,SAASuB,KAA6B;AAC3C,GAAC,kCAAkC,qBAAqB,UAAU,EAAE,QAAQ,CAACC,MAAS;AACpF,WAAO,OAAOA,CAAoB;AAAA,EAAA,CACnC;AACH;ACCgB,SAAAC,EAAkBC,GAAmBC,GAA0B;AACtE,SAAA,cAAc,IAAI,aAAa,WAAW;AAAA,IAC/C,MAAM,KAAK,UAAU,EAAE,WAAAD,GAAW,WAAAC,GAAW;AAAA;AAAA,IAE7C,QAAQ,OAAO;AAAA,EAChB,CAAA,CAAC;AACJ;ACPO,SAASC,KAAsB;AAIpC;AAAA,IACE,CAAC,gCAAgC;AAAA;AAAA,IACjC,CAAC,qBAAqB,cAAc;AAAA;AAAA,IACpC,CAAC,YAAY,WAAW,cAAc;AAAA;AAAA,EAAA,EACtC,QAAQ,CAACC,MAAS;AAElB,QAAIC,IAAU;AAEd,IAAAD,EAAK,QAAQ,CAACE,GAAMC,GAAKC,MAAQ;AAE3B,UAAAD,MAAQC,EAAI,SAAS,GAAG;AAC1B,QAAAH,EAAQC,CAAI,IAAIN;AAChB;AAAA,MACF;AAEI,MAAEM,KAAQD,MACJA,EAAAC,CAAI,IAAI,KAElBD,IAAUA,EAAQC,CAAI;AAAA,IAAA,CACvB;AAAA,EAAA,CACF;AACH;ACVA,MAAMG,KAIF;AAAA,EACF,yBAAyBlB,EAAK;AAAA,IAC5B,QAAQI,EAAO;AAAA,IACf,MAAM,CAACpB,MAAWA,MAAU,OAAOA,IAAQoB,EAAA,EAAS,SAAA,EAAW,MAAMpB,CAAK;AAAA,EAAA,CAC3E;AAAA,EACD,uBAAuBgB,EAAK;AAAA,IAC1B,QAAQI,EAAO;AAAA,IACf,QAAQ,CAACpB,MAAUA;AAAA,IACnB,OAAOoB,EAAO,EAAE,SAAS;AAAA,EAAA,CAC1B;AAAA,EACD,cAAc;AAAA,IACZ,MAAMpB,GAAO;AACX,aAAOgB,EAAK;AAAA,QACV,WAAW,CAAChB,MACVA,KAAU,OACN,SACAoB,IAAS,MAAMpB,CAAK;AAAA,MAE3B,CAAA,EAAE,MAAMA,KAAS,CAAA,CAAE;AAAA,IACtB;AAAA,EACF;AAAA,EACA,kBAAkBgB,EAAK;AAAA,IACrB,QAAQE,EAAO;AAAA,IACf,OAAO,CAAClB,MACNA,KAAU,OACN,OAAO,aACPkB,IAAS,MAAMlB,CAAK;AAAA,IAE1B,iBAAiBE,EAAQ;AAAA,IACzB,aAAaA,EAAQ;AAAA,EAAA,CACtB;AACH;AAKO,SAASiC,KASd;AAEM,QAAAC,IAAa,IAAIvE,KAGjBwE,IAAc,IAAIxE;AAExB,EAAAwE,EAAY,UAAU,CAAStE,MAAA;AAClB,IAAAqE,EAAA,KAAK,SAAS,EAAE,MAAMrE,EAAM,OAAO,SAASA,EAAM,KAAK,CAAC,EAAG,CAAA;AAAA,EAAA,CACvE,GAGmB6D;AAGd,QAAA,CAAA,EAAGU,CAAO,IAAIhE;AAAA;AAAA,IAElBiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMAnD,EAAS,UAAU,MAAM;AACvB,MAAAiE,EAAY,KAAK,oBAAoB;AAAA,QACnC,OAAO,OAAO;AAAA,QACd,QAAQ,OAAO;AAAA,QACf,iBAAiB;AAAA,QACjB,aAAa;AAAA,MAAA,CACd;AAAA,IAAA,CACF;AAAA;AAAA;AAAA,IAGDjE,EAAS,WAAW,CAACL,MAAU;AAEzB,UAAAA,EAAM,WAAW,OAAO;AAC1B;AAIE,UAAAc;AACA,UAAA;AACQ,QAAAA,IAAAwC,GAAatD,EAAM,IAAI;AAAA,MAAA,QAC3B;AAEN;AAAA,MACF;AAEM,YAAA,EAAE,WAAA2D,GAAW,WAAAC,EAAc,IAAA9C,GAC3BiB,IAASoC,GAAQR,CAAiC;AAEpD,UAAA;AACF,cAAMa,IAAOzC,IAASA,EAAO,MAAM6B,CAAS,IAAIA;AACpC,QAAAU,EAAA,KAAK,GAAIE,IAAO,CAACb,GAAWa,CAAI,IAAI,CAACb,CAAS,CAAgB;AAAA,eACnE5C,GAAO;AACP,QAAAzB,EAAA;AAAA,UACL,qCAAqCqE,CAAS;AAAA;AAAA;AAAA,UAC9C7C;AAAA,UACAC;AAAA,QAAA;AAAA,MAEJ;AAAA,IAAA,CACD;AAAA;AAAA,IAED,MAAMsD,EAAW,MAAM;AAAA,IACvB,MAAMC,EAAY,MAAM;AAAA,EAAA;AAG1B,SAAO,CAAC;AAAA,IACN,IAAIA,EAAY,GAAG,KAAKA,CAAW;AAAA,IACnC,KAAKA,EAAY,IAAI,KAAKA,CAAW;AAAA,IACrC,UAAUhG,GAAU;AACX,aAAA+F,EAAW,GAAG,SAAS/F,CAAQ;AAAA,IACxC;AAAA,IACA,YAAYA,GAAU;AACT,MAAA+F,EAAA,IAAI,SAAS/F,CAAQ;AAAA,IAClC;AAAA,IACA,IAAI,QAAQ;AACH,aAAAgG,EAAY,QAAQD,EAAW;AAAA,IACxC;AAAA,KACCE,CAAO;AACZ;AClJA,MAAM,CAACE,IAAK/F,EAAyB,IAAIV;AAAA,EACvC,CAACI,MAAU;AACT,UAAM,CAACsG,GAASH,CAAO,IAAIH,GAA2B,GAGhDO,IAAMD,EAAQ,IAAI,KAAKA,CAAO;AAC5B,WAAAA,EAAA,MAAM,CAAC1E,GAAO1B,MAAa;AAC3B,YAAA,EAAE,OAAAG,EAAU,IAAAiG;AAClB,MAAAC,EAAI3E,GAAO1B,CAAQ,GAGfG,KAAS,CAACiG,EAAQ,SACdtG;IACR,GAGK,CAACsG,GAASH,CAAO;AAAA,EAC1B;AAAA,EACA,CAAC,CAAG,EAAAA,CAAO,MAAMA,EAAQ;AAC3B;AAKO,SAAS/F,IAA6C;AACpD,SAAAiG,GAAA,EAAM,CAAC;AAChB;ACvBgB,SAAAE,EACd3E,GACA1B,GACM;AACe,EAAAE,IAAE,IAAIwB,GAAO1B,CAAQ;AAC5C;ACAgB,SAAAsG,EACd5E,GACA1B,GACA4B,GACuB;AACvB,SAAO1B,EAAqB,EAAE,GAAGwB,GAAO1B,GAAU4B,CAAI;AACxD;ACfO,SAAS2E,EAAS5C,GAAkD;AAClE,SAAA,OAAOA,KAAU,YAAYA,MAAU,QAAQ,CAAC,MAAM,QAAQA,CAAK;AAC5E;ACGgB,SAAA6C,GAAgBC,GAAYC,GAAoB;AAExD,QAAAC,IAASF,EAAE,MAAM,GAAG,GACpBG,IAASF,EAAE,MAAM,GAAG,GAGpBG,IAAM,KAAK,IAAIF,EAAO,QAAQC,EAAO,MAAM;AAIjD,WAAS,IAAI,GAAG,IAAIC,GAAK,KAAK,GAAG;AAC/B,UAAMC,IAAO,SAASH,EAAO,CAAC,KAAK,KAAK,EAAE,GACpCI,IAAO,SAASH,EAAO,CAAC,KAAK,KAAK,EAAE;AAE1C,QAAIE,MAASC;AAGN,aAAAD,IAAOC,IAAO,IAAI;AAAA,EAC3B;AACO,SAAA;AACT;AChBA,SAASC,EAAmBP,GAAYC,GAAqB;AACpD,SAAAF,GAAgBC,GAAGC,CAAC,KAAK;AAClC;AAqBgB,SAAAO,EACdC,GACAC,GACAC,GACS;AAEL,MAAA,OAAOA,KAAc,UAAU;AACjC,QAAIF,MAAW,qBAAqB;AAClC,UAAIC,MAAmB;AACd,eAAAH,EAAmB,OAAOI,CAAS;AAE5C,UAAID,MAAmB;AACd,eAAAH,EAAmB,OAAOI,CAAS;AAAA,IAE9C;AAEA,QAAIF,MAAW,8BACTC,MAAmB;AACd,aAAAH,EAAmB,OAAOI,CAAS;AAI1C,QAAAF,MAAW,mBAAmBC,MAAmB;AAC5C,aAAAH,EAAmB,OAAOI,CAAS;AAAA,EAE9C;AAEA,UAAQF,GAAQ;AAAA,IACd,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACI,aAAAF,EAAmB,OAAOG,CAAc;AAAA,IACjD,KAAK;AACI,aAAAH,EAAmB,OAAOG,CAAc;AAAA,IACjD,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACI,aAAAH,EAAmB,OAAOG,CAAc;AAAA,IACjD,KAAK;AACI,aAAAH,EAAmB,OAAOG,CAAc;AAAA,IACjD,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACI,aAAAH,EAAmB,OAAOG,CAAc;AAAA,IACjD,KAAK;AACI,aAAAH,EAAmB,QAAQG,CAAc;AAAA,IAClD,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACI,aAAAH,EAAmB,OAAOG,CAAc;AAAA,IACjD;AACS,aAAA;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MAAA,EACA,SAASD,CAAM;AAAA,EACrB;AACF;ACnGO,SAASG,GAAoC1D,GAKjD;AACD,SAAO,cAAcA,KAChB4C,EAAS5C,EAAM,QAAQ,KACvB,YAAYA,EAAM,YAClB,OAAOA,EAAM,SAAS,UAAW;AACxC;ACVO,SAAS2D,GAA8B3D,GAK3C;AACD,SAAO,0BAA0BA,KAC5B4C,EAAS5C,EAAM,oBAAoB,KACnC,eAAeA,EAAM,wBACrB,OAAOA,EAAM,qBAAqB,aAAc;AACvD;ACbO,SAAS4D,KAAoB;AAC9B,MAAA;AACK,WAAA,OAAO,SAAS,OAAO;AAAA,EAAA,QACxB;AACC,WAAA;AAAA,EACT;AACF;ACVA,MAAMC,KAAwB;AAE9B,IAAIC,KAAsBD;AAWnB,SAASE,GAAgB/D,GAAqB;AAC7B,EAAA8D,KAAA9D;AACxB;AAYO,SAASgE,KAAuB;AAC9B,SAAAF;AACT;ACwCgB,SAAAG,EACdvC,GACAwC,GACArH,GACM;AACN,MAAIsH,IAAgC,CAAA,GAChCxC;AAuBJ,MArBI,CAACuC,KAAmB,CAACrH,IAEvBsH,IAAc,CAAA,IACLD,KAAmBrH,KAEdsH,IAAAtH,GACF8E,IAAAuC,KACHA,MAEL,kBAAkBA,IACNC,IAAAD,IAEFvC,IAAAuC,IAIZtG,GAAA,kBAAkB+D,IAClB,EAAE,OAAOD,GAAW,MAAMC,MAC1B,EAAE,OAAOD,EAAW,CAAA,GAGpBkC;AACF,WAAO,OAAO,OAAO;AAAA,MACnB,KAAK,UAAU,EAAE,WAAAlC,GAAW,WAAAC,GAAW;AAAA,MACvCwC,EAAY,gBAAgBC,GAAe;AAAA,IAAA;AAK3C,MAAAV,GAAkB,MAAM,GAAG;AACtB,WAAA,SAAS,OAAO,KAAK,UAAU,EAAE,WAAAhC,GAAW,WAAAC,EAAW,CAAA,CAAC;AAC/D;AAAA,EACF;AAGI,MAAAgC,GAAgB,MAAM,GAAG;AAC3B,WAAO,qBAAqB,UAAUjC,GAAW,KAAK,UAAUC,CAAS,CAAC;AAC1E;AAAA,EACF;AAGM,QAAA5C;AAAA,IACJG;AAAA,IACA;AAAA,EAAA;AAEJ;ACxGO,SAASmF,GAAgBC,GAA6B;AACpD,SAAA,CAACf,GAAagB,MAAgB;AAGnC,QAAI,CAACjB,EAASC,GAAQe,CAAO;AAC3B,YAAMvF,EAAYC,IAAwB,WAAWuE,CAAM,yCAAyCe,CAAO,EAAE;AAM/G,QACE1B,EAAS2B,CAAM,KACZhB,MAAW,8BACX,WAAWgB,KACX,CAACjB,EAASC,GAAQ,SAASe,CAAO;AAE/B,YAAAvF;AAAA,QACJE;AAAA,QACA,yBAAyBsE,CAAM,gDAAgDe,CAAO;AAAA,MAAA;AAInF,WAAAL,EAAUV,GAAQgB,CAAM;AAAA,EAAA;AAEnC;ACpCO,SAASC,GAAeC,GAAiC;AAC9D,SAAO,CAAC,EAAE,QAAAC,QAAaA,MAAWD;AACpC;ACDO,SAASE,GAAmBC,GAA2B;AAC5D,SAAO7F,EAAYK,IAAe,oBAAoBwF,CAAO,IAAI;AACnE;ACHgB,SAAAC,GACdC,GACAF,GACY;AACZ,SAAO,QAAQ,KAAK;AAAA,IAClB,OAAOE,KAAkB,aAAaA,EAAA,IAAkBA;AAAA,IACxD,IAAI,QAAe,CAACC,GAAGC,MAAQ;AAC7B,iBAAW,MAAM;AACX,QAAAA,EAAAL,GAAmBC,CAAO,CAAC;AAAA,SAC9BA,CAAO;AAAA,IAAA,CACX;AAAA,EAAA,CACF;AACH;ACgEA,eAAsBK,EACpBpI,GAG2B;AACvB,MAAAqI;AACJ,QAAMC,IAAU,IAAI,QAA0B,CAAAC,MAAOF,IAAUE,CAAG,GAE5D,EAAE,OAAArH,GAAO,SAAAsH,GAAS,SAAAT,EAAA,IAAY/H,GAC9B,CAAA,EAAGyF,CAAO,IAAIhE;AAAA;AAAA,KAEjB,MAAM,QAAQP,CAAK,IAAIA,IAAQ,CAACA,CAAK,GAAG,IAAI,CAACuH,MAIrC3C,EAAG2C,GAAI,CAAC7H,MAAY;AACzB,OAAI,CAAC4H,MACH,MAAM,QAAQtH,CAAK,IACdsH,EAAwD;AAAA,QACzD,OAAOC;AAAA,QACP,SAAA7H;AAAA,MAAA,CACD,IACE4H,EAAqD5H,CAAO,OAEjEyH,EAAQzH,CAAO;AAAA,IACjB,CACD,CACF;AAAA,EAAA;AAGC,MAAA;AACF,YAACZ,EAAQ,aAAa0I,GAAkB1I,EAAQ,QAAgBA,EAAgB,MAAM,GAC/E,OAAO+H,IAAUC,GAAYM,GAASP,CAAO,IAAIO;AAAA,EAAA,UACxD;AAEQ,IAAA7C;EACV;AACF;AChFA,eAAsBkD,EACpBjC,GACAgB,GACAkB,GACA5I,IAA8B,CAAA,GACZ;AACZ,QAAA;AAAA,IACJ,QAAA0D;AAAA,IACA,OAAAM;AAAA,EACF,IAAI,MAAMoE,EAAQ;AAAA,IAChB,GAAGpI;AAAA,IACH,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,MACN,QAAA0G;AAAA,MACA,QAAAgB;AAAA,MACA,QAAQkB;AAAA,IACV;AAAA,IACA,SAASjB,GAAeiB,CAAS;AAAA,EAAA,CAClC;AAED,MAAI5E;AACI,UAAA9B,EAAYI,IAAmC0B,CAAK;AAGrD,SAAAN;AACT;ACrDO,SAASmF,KAAcC,GAAuB;AAC5C,SAAAA,EACJ,IAAI,CAAC3F,MAAU;AACV,QAAA,OAAOA,KAAU;AACZ,aAAAA;AAGL,QAAA4C,EAAS5C,CAAK;AAChB,aAAO0F,EAAW,OAAO,QAAQ1F,CAAK,EAAE,IAAI,CAAC4F,MAAUA,EAAM,CAAC,KAAKA,EAAM,CAAC,CAAC,CAAC;AAG1E,QAAA,MAAM,QAAQ5F,CAAK;AAEd,aAAA0F,EAAW,GAAG1F,CAAK;AAAA,EAE7B,CAAA,EACA,OAAO,OAAO,EACd,KAAK,GAAG;AACb;ACVO,SAAS6F,MAAoCC,GAAiC;AACnF,SAAOA,EAAS,OAA2B,CAACC,GAAKC,OAC1CpD,EAASoD,CAAO,KAId,OAAA,QAAQA,CAAO,EAAE,QAAQ,CAAC,CAACC,GAAKjG,CAAK,MAAM;AAChD,UAAMkG,IAAYR,EAAYK,EAAYE,CAAG,GAAGjG,CAAK;AAErD,IAAIkG,EAAU,WACXH,EAAYE,CAAG,IAAIC;AAAA,EACtB,CACD,GAEMH,IACN,CAAwB,CAAA;AAC7B;AC/BO,SAASI,EAAMnG,GAA6B;AAC1C,SAAA,iBAAiB,KAAKA,CAAK;AACpC;ACFO,SAASoG,GAAWpG,GAAkC;AACpD,SAAA,iBAAiB,KAAKA,CAAK;AACpC;ACKO,SAASqG,GAAMrG,GAAoB;AAExC,QAAMrB,IAAQqB,EAAM,QAAQ,OAAO,EAAE,EAAE;AAGnC,MAAAmG,EAAMxH,CAAK;AACN,WAAAA;AAIL,MAAAyH,GAAWzH,CAAK,GAAG;AACrB,QAAI2H,IAAa;AACjB,aAASnI,IAAI,GAAGA,IAAI,GAAGA,KAAK;AAC1B,MAAAmI,KAAS3H,EAAM,IAAIR,CAAC,EAAE,OAAO,CAAC;AAEzB,WAAAmI;AAAA,EACT;AAGA,QAAMC,IAAQ5H,EAAM,MAAM,wCAAwC,KAC7DA,EAAM,MAAM,iDAAiD;AAIlE,MAAI,CAAC4H;AACH,UAAM,IAAI,MAAM,UAAUvG,CAAK,8CAA8C;AAK/E,SAAOuG,EAAM,MAAM,CAAC,EAAE,OAAO,CAACR,GAAKS,MAAc;AAC/C,UAAMC,IAAY,SAASD,GAAW,EAAE,EAAE,SAAS,EAAE;AACrD,WAAOT,KAAOU,EAAU,WAAW,IAAI,MAAM,MAAMA;AAAA,KAClD,GAAG;AACR;ACxCO,SAASC,GAAYJ,GAAwB;AAE5C,QAAAK,IAAMN,GAAMC,CAAK;AAIvB,SAAO,KAAK;AAAA,IACV,CAAC,OAAO,OAAO,KAAK,EAAE,OAAe,CAACP,GAAKa,GAAU5E,MAAQ;AAE3D,YAAM6E,IAAM,SAASF,EAAI,MAAM,IAAI3E,IAAM,GAAG,KAAKA,IAAM,KAAK,CAAC,GAAG,EAAE;AAC3D,aAAA+D,IAAMc,IAAMA,IAAMD;AAAA,OACxB,CAAC;AAAA,EACF,IAAA;AACN;ACdO,MAAME,GAA4B;AAAA,EAGvC,YAImBC,GACjB;AAPe,IAAAjJ,EAAA,YAAqB,IAAID;AA8D1C;AAAA;AAAA;AAAA,IAAAC,EAAA,YAA2B,KAAK,GAAG,GAAG,KAAK,KAAK,EAAE;AAKlD;AAAA;AAAA;AAAA,IAAAA,EAAA,aAA6B,KAAK,GAAG,IAAI,KAAK,KAAK,EAAE;AA7DlC,SAAA,QAAAiJ;AAAA,EAEnB;AAAA;AAAA;AAAA;AAAA,EAKA,QAAe;AACN,WAAA,EAAE,GAAG,KAAK;EACnB;AAAA,EAaA,IAAIC,GAAgDC,GAAqC;AAiBvF,IAhBkB,OACf,QAAQ,OAAOD,KAAe,WAAW,EAAE,CAACA,CAAU,GAAGC,MAAaD,CAAU,EAChF,OAAO,CAACjB,GAAK,CAACE,GAAKjG,CAAK,MAEnB,KAAK,MAAMiG,CAAkB,MAAMjG,KAASA,MAAU,SACjD+F,KAIJ,KAAA,MAAME,CAAkB,IAAIjG,GAEhC,KAAK,GAAW,KAAK,UAAUiG,CAAG,IAAIjG,CAAK,GAErC,KACN,EAAK,KAIP,KAAK,GAAW,KAAK,UAAU,KAAK,KAAK;AAAA,EAE9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAiCiG,GAAkB;AAC1C,WAAA,KAAK,MAAMA,CAAG;AAAA,EACvB;AAWF;ACzEO,MAAMiB,EAAqC;AAAA,EAGhD,YAAYC,GAAc;AAFhB,IAAArJ,EAAA;AAYA;AAAA;AAAA;AAAA,IAAAA,EAAA;AAKA;AAAA;AAAA;AAAA,IAAAA,EAAA;AAKA;AAAA;AAAA;AAAA,IAAAA,EAAA;AAnBH,SAAA,QAAQ,IAAIgJ,GAAMK,CAAK,GAC5B,KAAK,MAAM,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,GACzC,KAAK,MAAM,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,GACzC,KAAK,QAAQ,KAAK,MAAM,MAAM,KAAK,KAAK,KAAK;AAAA,EAC/C;AAgBF;ACbgB,SAAAC,GACd9C,GACAjE,GACoB;AACpB,SAAO,CAACkD,MAAWD,EAASjD,EAAOkD,CAAM,GAAGe,CAAO;AACrD;ACZO,MAAM+C,UACLH,EAA2B;AAAA,EACjC,YAIEI,GAIAhD,GAIAiD,GACA;AACA,UAAMD,CAAU;AAOlB;AAAA;AAAA;AAAA,IAAAxJ,EAAA;AANO,SAAA,WAAWsJ,GAAiB9C,GAASiD,CAAc;AAAA,EAC1D;AAMF;AChBO,MAAMC,WAAmBH,EAA4D;AAAA,EAC1F,YAAYI,GAAoBnD,GAAmCL,GAAsB;AACjF,UAAA,EAAE,WAAAwD,EAAU,GAAGnD,GAAS;AAAA,MAC5B,MAAM;AAAA,MACN,MAAM;AAAA,IAAA,CACP;AA2BH;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAxG,EAAA,YAAoB,CAACC,GAAO1B,MAC1B0B,MAAU,UACN4E,EAAG,uBAAuBtG,CAAQ,IAElC,KAAK,MAAM,GAAG0B,GAAO1B,CAAe;AAQ1C;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAyB,EAAA,aAAsB,CAACC,GAAO1B,MAC5B0B,MAAU,UACN2E,EAAI,uBAAuBrG,CAAQ,IAEnC,KAAK,MAAM,IAAI0B,GAAO1B,CAAe;AA/CwB,SAAA,YAAA4H;AAAA,EAKnE;AAAA,EAEA,IAAY,UAAUyD,GAAkB;AACjC,SAAA,IAAI,aAAaA,CAAO,GAC7B,KAAK,UAAU,6BAA6B,EAAE,YAAYA,EAAS,CAAA;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAqB;AAChB,WAAA,KAAK,IAAI,WAAW;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,OAAa;AACX,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EA6BA,OAAa;AACX,SAAK,YAAY;AAAA,EACnB;AACF;AChEO,MAAMzK,KAAmCgD,EAA2B,CAACD,MAC1EA,aAAiB,OACbA,IACA,IAAI,KAAKkB,IAAS,MAAMlB,CAAK,IAAI,GAAI,GACxC,MAAM;ACDO,SAAA2H,EAAgBtH,GAAmBhC,GAAsC;AAChF,SAAA,IAAIwB,EAAY,CAACG,MAAU;AAChC,QAAI,OAAOA,KAAU,YAAY,EAAEA,aAAiB;AAClD,YAAMJ,EAAgB;AAGxB,UAAM2E,IAAS,OAAOvE,KAAU,WAAW,IAAI,gBAAgBA,CAAK,IAAIA;AAEjE,WAAAI,GAAcC,GAAQ,CAACG,MAAU;AAChC,YAAAoH,IAAarD,EAAO,IAAI/D,CAAK;AAC5B,aAAAoH,MAAe,OAAO,SAAYA;AAAA,IAAA,CAC1C;AAAA,EAAA,GACA,IAAOvJ,CAAI;AAChB;ACjBO,MAAMwJ,KAAO7G,EAAW;AAAA,EAC7B,IAAIE,EAAO;AAAA,EACX,MAAME,EAAO;AAAA,EACb,OAAOA,EAAO;AAAA,EACd,UAAU;AAAA,IACR,MAAMA,EAAO,EAAE,SAAS;AAAA,IACxB,MAAM;AAAA,EACR;AAAA,EACA,UAAUA,EAAO,EAAE,SAAS;AAC9B,GAAG,MAAM,EACN,SAAS,GCTC0G,KAAO9G,EAAW;AAAA,EAC7B,uBAAuB;AAAA,IACrB,MAAMd,EAAQ,EAAE,SAAS;AAAA,IACzB,MAAM;AAAA,EACR;AAAA,EACA,iBAAiB;AAAA,IACf,MAAMA,EAAQ,EAAE,SAAS;AAAA,IACzB,MAAM;AAAA,EACR;AAAA,EACA,WAAW;AAAA,IACT,MAAMkB,EAAO;AAAA,IACb,MAAM;AAAA,EACR;AAAA,EACA,IAAIF,EAAO;AAAA,EACX,OAAO;AAAA,IACL,MAAMhB,EAAQ,EAAE,SAAS;AAAA,IACzB,MAAM;AAAA,EACR;AAAA,EACA,WAAW;AAAA,IACT,MAAMA,EAAQ,EAAE,SAAS;AAAA,IACzB,MAAM;AAAA,EACR;AAAA,EACA,cAAc;AAAA,IACZ,MAAMkB,EAAO,EAAE,SAAS;AAAA,IACxB,MAAM;AAAA,EACR;AAAA,EACA,UAAU;AAAA,IACR,MAAMA,EAAO,EAAE,SAAS;AAAA,IACxB,MAAM;AAAA,EACR;AAAA,EACA,UAAU;AAAA,IACR,MAAMA,EAAO,EAAE,SAAS;AAAA,IACxB,MAAM;AAAA,EACR;AAAA,EACA,UAAUA,EAAO,EAAE,SAAS;AAC9B,GAAG,MAAM,EACN,SAAS;AC9BL,SAAS2G,KAA+C;AAC7D,SAAOJ,EAA6B;AAAA,IAClC,UAAU;AAAA,MACR,MAAM1K,GAAK;AAAA,MACX,MAAM;AAAA,IACR;AAAA,IACA,cAAc;AAAA,MACZ,MAAMiE,EAAO,EAAE,SAAS;AAAA,MACxB,MAAM;AAAA,IACR;AAAA,IACA,MAAA2G;AAAA,IACA,cAAc;AAAA,MACZ,MAAMzG,EAAO,EAAE,SAAS;AAAA,MACxB,MAAM;AAAA,IACR;AAAA,IACA,UAAU;AAAA,MACR,MAAMA,EAAO,EAAE,SAAS;AAAA,MACxB,MAAM;AAAA,IACR;AAAA,IACA,MAAMA,EAAO;AAAA,IACb,SAAS;AAAA,MACP,MAAMA,EAAO,EAAE,SAAS;AAAA,MACxB,MAAM;AAAA,IACR;AAAA,IACA,UAAU0G;AAAA,IACV,YAAY;AAAA,MACV,MAAM1G,EAAO,EAAE,SAAS;AAAA,MACxB,MAAM;AAAA,IACR;AAAA,IACA,MAAA0G;AAAA,KACC,UAAU;AACf;AClCa,MAAAnB,KAAiC1G,EAA2B,CAACD,MAAUqG,GAAMjF,EAAO,EAAE,MAAMpB,CAAK,CAAC,GAAG,KAAK;ACNhH,SAASgI,GAAW/B,GAAqB;AACvC,SAAAA,EAAI,QAAQ,WAAW,CAACM,MAAUA,EAAM,CAAC,EAAE,YAAA,CAAa;AACjE;AAOO,SAAS0B,GAAchC,GAAqB;AAC1C,SAAAA,EAAI,QAAQ,UAAU,CAACM,MAAU,IAAIA,EAAM,aAAa,EAAE;AACnE;ACRO,MAAM2B,KAAuDjI;AAAA,EAClE,CAACD,MAAU;AACH,UAAAmI,IAAcxB,KAAM;AAE1B,WAAO,OACJ,QAAQ7F,GAASd,CAAK,CAAC,EACvB,OAA0B,CAAC+F,GAAK,CAACqC,GAAG9G,CAAC,OACpCyE,EAAIiC,GAAWI,CAAC,CAAC,IAAID,EAAY,MAAM7G,CAAC,GACjCyE,IACN,CAAE,CAAA;AAAA,EACT;AAAA,EACA;AACF;ACPO,SAASsC,EAAkBrI,GAA8B;AAC9D,SAAO2H,EAAa;AAAA,IAClB,WAAW;AAAA,MACT,MAAMzH,EAAQ,EAAE,SAAS;AAAA,MACzB,MAAM;AAAA,IACR;AAAA,IACA,UAAU;AAAA,MACR,MAAM6H,GAAS,EAAE,SAAS;AAAA,MAC1B,MAAM;AAAA,IACR;AAAA,IACA,aAAa;AAAA,MACX,MAAM3G,EAAO,EAAE,SAAS;AAAA,MACxB,MAAM;AAAA,IACR;AAAA,IACA,UAAU;AAAA,MACR,MAAMA,EAAO;AAAA,MACb,MAAM;AAAA,IACR;AAAA,IACA,cAAc;AAAA,MACZ,MAAMlB,EAAQ,EAAE,SAAS;AAAA,MACzB,MAAM;AAAA,IACR;AAAA,IACA,YAAY;AAAA,MACV,MAAMkB,EAAO,EAAE,SAAS;AAAA,MACxB,MAAM;AAAA,IACR;AAAA,IACA,aAAa;AAAA,MACX,MAAM8G,GAAY;AAAA,MAClB,MAAM;AAAA,IACR;AAAA,IACA,SAAS;AAAA,MACP,MAAM9G,EAAO;AAAA,MACb,MAAM;AAAA,IACR;AAAA,EAAA,CACD,EAAE,MAAMpB,CAAK;AAChB;ACvCO,SAASsI,GAAgBC,GAAiC;AACxD,SAAAF;AAAA,IACLE,EAEG,QAAQ,eAAe,EAAE,EAEzB,QAAQ,SAAS,GAAG;AAAA,EAAA;AAE3B;ACTO,SAASC,KAAqC;AAC5C,SAAAF,GAAgB,OAAO,SAAS,IAAI;AAC7C;ACJO,SAASG,KAAmE;AACjF,SAAO,YAAY,iBAAiB,YAAY,EAAE,CAAC;AACrD;ACEO,SAASC,KAAwC;AACtD,QAAMC,IAAkBF;AACxB,MAAI,CAACE;AACG,UAAA,IAAI,MAAM,uCAAuC;AAGlD,SAAAL,GAAgBK,EAAgB,IAAI;AAC7C;ACsBA,SAASC,GAAU3C,GAAyB;AACnC,SAAA,UAAUA,EAAI,QAAQ,UAAU,CAAC4C,MAAM,IAAIA,EAAE,YAAa,CAAA,EAAE,CAAC;AACtE;AAOgB,SAAAC,GAAsC7C,GAAQjG,GAA8B;AAC1F,iBAAe,QAAQ4I,GAAU3C,CAAG,GAAG,KAAK,UAAUjG,CAAK,CAAC;AAC9D;AAMO,SAAS+I,GAAsC9C,GAAqC;AACzF,QAAMjG,IAAQ,eAAe,QAAQ4I,GAAU3C,CAAG,CAAC;AAC/C,MAAA;AACF,WAAOjG,IAAQ,KAAK,MAAMA,CAAK,IAAuB;AAAA,EAAA,QAChD;AAAA,EAAc;AACxB;ACpDO,SAASgJ,KAAoC;AAClD,SAAOX,EAAkBU,GAAgB,cAAc,KAAK,EAAE;AAChE;ACJO,SAASE,GAAqBf,GAAwC;AAC3E,SAAO,KAAK;AAAA,IACV,OAAO;AAAA,MACL,OACG,QAAQA,CAAW,EACnB,IAAI,CAAC,CAACjC,GAAKjG,CAAK,MAAM,CAACiI,GAAchC,CAAG,GAAGjG,CAAK,CAAC;AAAA,IACtD;AAAA,EAAA;AAEJ;ACNO,SAASkJ,GAAsBlJ,GAA6B;AAC3D,QAAA;AAAA,IACJ,aAAAmJ;AAAA,IACA,aAAAjB;AAAA,IACA,UAAAkB;AAAA,IACA,SAAA9E;AAAA,IACA,cAAA+E;AAAA,IACA,YAAAC;AAAA,IACA,WAAAC;AAAA,EACE,IAAAvJ,GAEEuE,IAAS,IAAI;AAEZ,SAAAA,EAAA,IAAI,oBAAoB6E,CAAQ,GACvC7E,EAAO,IAAI,uBAAuB0E,GAAqBf,CAAW,CAAC,GAC5D3D,EAAA,IAAI,mBAAmBD,CAAO,GAEjC6E,KACK5E,EAAA,IAAI,gBAAgB4E,CAAW,GAGpCG,KACK/E,EAAA,IAAI,sBAAsB+E,CAAU,GAGzC,OAAOD,KAAiB,aAC1B9E,EAAO,IAAI,wBAAwB8E,IAAe,MAAM,GAAG,GAGzD,OAAOE,KAAc,aACvBhF,EAAO,IAAI,qBAAqBgF,IAAY,MAAM,GAAG,GAGhDhF,EAAO;AAChB;ACjCO,SAASiF,GAAcxJ,GAA2B;AACvC,EAAA8I,GAAA,gBAAgBI,GAAsBlJ,CAAK,CAAC;AAC9D;ACDO,SAASyJ,KAAqC;AAGnD,aAAWC,KAAY;AAAA;AAAA;AAAA,IAGrBlB;AAAA;AAAA,IAEAE;AAAA;AAAA,IAEAM;AAAA,EAAA;AAEI,QAAA;AACF,YAAMW,IAAKD;AACX,aAAAF,GAAcG,CAAE,GACTA;AAAA,YACG;AAAA,IAEZ;AAGI,QAAA,IAAI,MAAM,6DAA6D;AAC/E;AC1BO,SAASC,KAAwB;AACtC,QAAMhE,IAAQ6C;AACd,SAAO,CAAC,EAAE7C,KAASA,EAAM,SAAS;AACpC;ACJO,SAASiE,KAA8C;AAC5D,MAAIpE,IAAY;AACT,SAAA,OAAOA,KAAa,GAAG,SAAS;AACzC;ACSA,MAAM,CAACqE,EAAW,IAAI/N,GAAgB8N,EAAwB;AAuB9C,SAAAE,EAIdC,GACAC,GACsD;AACtD,SAAO,MAAM;AACX,UAAMN,IAAKF,MACLS,IAAiB;AAAA,MACrB,GAAGP;AAAA,MACH,WAAWtF,GAAgBsF,EAAG,OAAO;AAAA,MACrC,iBAAiBG,GAAY;AAAA,IAAA;AAK3B,QAAA,OAAOE,KAAsB;AAC/B,aAAOA,EAAkBE,CAAc;AAKzC,UAAM,CAACC,GAAY7H,GAAS9D,CAAS,IAAIF,EAAc,GAEjDiC,IAAS0J,EAAgB;AAAA,MAC7B,GAAGC;AAAA;AAAA;AAAA;AAAA,MAIH,OAAON,GAAiB,IAAAb,GAAgBiB,CAAiB,IAAI;AAAA,MAC7D,YAAAG;AAAA,IAAA,CACD,GAEKC,IAAa,CAACpK,OACbxB,KACH2L;AAAA,MACEnK,EAAM,GAAG,UAAU,CAAC+G,OAAU;AAC5B,QAAA+B,GAAgBkB,GAAmBjD,EAAK;AAAA,MAAA,CACzC;AAAA,IAAA,GAGE/G;AAGF,WAAA;AAAA,MACLO,aAAkB,UAAUA,EAAO,KAAK6J,CAAU,IAAIA,EAAW7J,CAAM;AAAA,MACvE+B;AAAA,IAAA;AAAA,EACF;AAEJ;AClFa,MAAA+H,KAAiBN,EAAsB,cAAc,CAAC;AAAA,EACjE,WAAA9F;AAAA,EACA,SAAAK;AAAA,EACA,OAAAyC,IAAQ,EAAE,WAAW,GAAM;AAC7B,MAAM,IAAIS,GAAWT,EAAM,WAAWzC,GAASL,CAAS,CAAC;ACNlD,MAAMqG,UACHjD,EAAsD;AAAA,EADzD;AAAA;AAKL;AAAA;AAAA;AAAA,IAAAvJ,EAAA,YAAgC,KAAK,MAAM,GAAG,KAAK,KAAK,KAAK;AAK7D;AAAA;AAAA;AAAA,IAAAA,EAAA,aAAkC,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK;AAAA;AAClE;ACiBO,SAASyM,GACdxM,GAC0B;AACpB,QAAAwE,IAAOxE,EAAM,YAAYA,IAAQ;AAAA,IACrC,WAAW;AAAA,IACX,WAAW;AAAA,IACX,aAAa;AAAA,IACb,kBAAkB;AAAA,IAClB,gBAAgB;AAAA,IAChB,MAAM;AAAA,EAAA;AAGD,SAAA;AAAA,IACL,WAAW;AAAA,IACX,MAAMwE,EAAK;AAAA,IACX,UAAUA,EAAK;AAAA,IACf,YAAYA,EAAK;AAAA,IACjB,iBAAiBA,EAAK;AAAA,IACtB,eAAeA,EAAK;AAAA,EAAA;AAExB;ACzCO,MAAMiI,WAAwBF,EAKnC;AAAA,EAOA,YAAY,EAAE,WAAArG,GAAW,SAAAK,GAAS,GAAGmG,KAA8B;AACjE,UAAMA,GAAMnG,GAAS;AAAA,MACnB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,aAAa;AAAA,IAAA,CACd;AAZc,IAAAxG,EAAA;AAET,IAAAA,EAAA;AAEA,IAAAA,EAAA;AASN,SAAK,YAAYmG;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAqB;AAChB,WAAA,KAAK,IAAI,WAAW;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,gBAAyB;AACpB,WAAA,KAAK,IAAI,eAAe;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,kBAA2B;AACtB,WAAA,KAAK,IAAI,iBAAiB;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,aAAa;AAAA,IACjB,QAAAyG;AAAA,IACA,GAAGD;AAAA,EAAA,GAC+D;AAC9D,WAAC,KAAK,gBACR,KAAK,cAAcxF,EAAQ;AAAA,MACzB,GAAGwF;AAAA,MACH,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,WAAW,KAAK;AAAA,MAChB,QAAQ;AAAA;AAAA,QAEN,SAASC,KAAU,IAAI,KAAK;AAAA,MAC9B;AAAA,IACD,CAAA,EACE,KAAK,CAAC,EAAE,OAAAC,EAAY,MAAAA,CAAK,EACzB,QAAQ,MAAM,KAAK,cAAc,MAAS,IAExC,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAmB;AACd,WAAA,KAAK,IAAI,UAAU;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,eAAqB;AACnB,SAAK,UAAU,gCAAgC;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,EAAE,QAAAD,GAAQ,GAAGD,EAAK,IAAyC,CAAA,GAAsB;AACzF,WAAC,KAAK,kBACR,KAAK,gBAAgBxF,EAAQ;AAAA,MAC3B,GAAGwF;AAAA,MACH,WAAW,KAAK;AAAA,MAChB,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ,EAAE,QAAQC,KAAU,GAAG;AAAA,IAAA,CAChC,EACE,KAAK,CAACE,MAAa;AAEZ,YAAAnE,IAAY8D,GAAYK,CAAQ;AACtC,kBAAK,IAAInE,CAAS,GAEXA,EAAU;AAAA,IAAA,CAClB,EACA,QAAQ,MAAM,KAAK,gBAAgB,MAAS,IAE1C,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,eAAyC;AACpC,WAAA,KAAK,IAAI,cAAc;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAAsB;AACjB,WAAA,KAAK,IAAI,YAAY;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAAY,EAAE,OAAAkE,GAAO,GAAGF,EAAK,IAAuC,CAAA,GAAsB;AACvF,WAAA,CAAC,WAAW,SAAS,EAAE;AAAA,OAE1B,MAAMxF,EAAQ;AAAA,QACZ,GAAGwF;AAAA,QACH,WAAW,KAAK;AAAA,QAChB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,QAAQ,EAAE,OAAOE,KAAS,GAAG;AAAA,MAC9B,CAAA,GACD;AAAA,IAAA;AAAA,EAEN;AACF;ACrJA,eAAsBE,GACpBhO,GACmC;AAC5B,SAAA0N;AAAA,IACL,MAAMtF,EAAQ;AAAA,MACZ,GAAIpI,KAAW,CAAC;AAAA,MAChB,QAAQ;AAAA,MACR,OAAO;AAAA,IAAA,CACR;AAAA,EAAA;AAEL;ACVO,MAAMiO,KAAsBf;AAAA,EACjC;AAAA,EACA,OAAO,EAAE,WAAA9F,GAAW,SAAAK,GAAS,OAAAyC,QACpB,IAAIyD,GAAgB;AAAA,IACzB,GAAIzD,KAASzD,EAAS,6BAA6BgB,CAAO,IACtDyC,KAAS,MAAM8D,GAAoB,EAAE,SAAS,IAAM,CAAA,IACpD;AAAA,MACA,WAAW;AAAA,MACX,eAAe;AAAA,MACf,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,UAAU;AAAA,IACZ;AAAA,IACF,SAAAvG;AAAA,IACA,WAAAL;AAAA,EAAA,CACD;AAEL;ACrBO,MAAM8G,WACH7D,EAA2B;AAAA,EAD9B;AAAA;AAKL;AAAA;AAAA;AAAA,IAAApJ,EAAA,YAAgC,KAAK,MAAM,GAAG,KAAK,KAAK,KAAK;AAK7D;AAAA;AAAA;AAAA,IAAAA,EAAA,aAAkC,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK;AAAA;AAClE;ACTO,MAAMkN,WAAwBD,GAAyC;AAAA,EAC5E,YAAYE,GAAgDhH,GAAsB;AAC1E,UAAA,EAAE,sBAAAgH,GAAsB,GAD4B,KAAA,YAAAhH;AAAA,EAE5D;AAAA,EAEA,IAAY,qBAAqBjE,GAAgB;AAC1C,SAAA,IAAI,wBAAwBA,CAAK,GACtC,KAAK,UAAU,kCAAkC,EAAE,mBAAmBA,EAAO,CAAA;AAAA,EAC/E;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,uBAAgC;AAC3B,WAAA,KAAK,IAAI,sBAAsB;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA,EAKA,sBAA4B;AAC1B,SAAK,uBAAuB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,qBAA2B;AACzB,SAAK,uBAAuB;AAAA,EAC9B;AACF;AC/BO,MAAMkL,KAAsBnB;AAAA,EACjC;AAAA,EACA,CAAC;AAAA,IACC,WAAA9F;AAAA,IACA,OAAA8C,IAAQ,EAAE,sBAAsB,GAAM;AAAA,EAClC,MAAA,IAAIiE,GAAgBjE,EAAM,sBAAsB9C,CAAS;AACjE;ACTO,MAAMkH,GAA4C;AAAA,EACvD,YAIE7G,GAIAiD,GACA;AAOF;AAAA;AAAA;AAAA,IAAAzJ,EAAA;AANO,SAAA,WAAWsJ,GAAiB9C,GAASiD,CAAc;AAAA,EAC1D;AAMF;ACbA,SAAS6D,GAAWpL,GAA2B;AACzC,MAAA,MAAM,QAAQA,CAAK;AACd,WAAAA;AAGL,MAAA,OAAOA,KAAU;AACf,QAAA;AACI,YAAAgB,IAAO,KAAK,MAAMhB,CAAK;AAEzB,UAAA,MAAM,QAAQgB,CAAI;AACb,eAAAA;AAAA,IACT,QACM;AAAA,IAAC;AAEX,QAAMpB,EAAgB;AACxB;AAEO,MAAMyL,WACHxL,EAAmC;AAAA,EAG3C,YACEyL,GACAvL,GACA1B,GACA;AACM,UAAA+M,IAAYrL,GAAY1B,CAAI;AAP5B,IAAAP,EAAA;AASD,SAAA,aAAa,OAAOwN,KAAe,aACpCA,IACAA,EAAW,MAAM,KAAKA,CAAU;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQS,MAAMtL,GAAgE;AACvE,UAAAiC,IAAM,MAAM,MAAMjC,CAAK;AAC7B,WAAOiC,MAAQ,SAAYA,IAAMA,EAAI,IAAI,KAAK,UAAU;AAAA,EAC1D;AAAA,EAEA,GAASqJ,GAA0E;AAC5E,gBAAA,aAAa,OAAOA,KAAe,aACpCA,IACAA,EAAW,MAAM,KAAKA,CAAU,GAE7B;AAAA,EACT;AACF;ACvDO,SAASC,GAAMC,GAAsD;AAC1E,SAAO,IAAIH,GAAY,CAACrL,MAAUA,GAAO,IAAOwL,CAAc;AAChE;ACEA,SAASC,GAAoCC,GAAW1L,GAAwB;AACvE,SAAA,OAAO,YAAY0L,EAAK,IAAI,CAACtD,MAAM,CAACA,GAAGpI,CAAK,CAAC,CAAC;AACvD;AAOO,MAAM2L,WAAqBR,GAAmD;AAAA,EACnF,YACE7G,GACiBsH,GACA3H,GACjB;AACA,UAAMK,GAAS;AAAA,MACb,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,SAAS;AAAA,MACT,KAAK;AAAA,IAAA,CACN,GARgB,KAAA,kBAAAsH,GACA,KAAA,YAAA3H;AAAA,EAQnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,OAAO4H,GAA8BhP,IAA8B,IAAmB;AAC1F,UAAM6O,IAAO,MAAM,QAAQG,CAAS,IAAIA,IAAY,CAACA,CAAS;AAC9D,IAAIH,EAAK,UACD,MAAAlG;AAAA,MACJ;AAAA,MACA,EAAE,MAAAkG,EAAK;AAAA,MACP,KAAK,gBAAgB;AAAA,MACrB,EAAE,GAAG7O,GAAS,WAAW,KAAK,UAAU;AAAA,IAAA;AAAA,EAG9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,QAAQA,IAA8B,IAAuB;AACjE,WAAO0O,GAAM,EAAE,GAAGnK,EAAA,CAAQ,EAAE;AAAA,MAC1B,MAAMoE;AAAA,QACJ;AAAA,QACA,CAAC;AAAA,QACD,KAAK,gBAAgB;AAAA,QACrB,EAAE,GAAG3I,GAAS,WAAW,KAAK,UAAU;AAAA,MAC1C;AAAA,IAAA;AAAA,EAEJ;AAAA,EAmBA,MAAM,IACJgP,GACAhP,IAA8B,IACY;AAC1C,UAAM6O,IAAO,MAAM,QAAQG,CAAS,IAAIA,IAAY,CAACA,CAAS;AAC1D,QAAA,CAACH,EAAK;AACD,aAAAD,GAAeC,GAAM,EAAE;AAGhC,UAAMnJ,IAAO,MAAMiD;AAAA,MACjB;AAAA,MACA,EAAE,MAAAkG,EAAK;AAAA,MACP,KAAK,gBAAgB;AAAA,MACrB,EAAE,GAAG7O,GAAS,WAAW,KAAK,UAAU;AAAA,IAAA,GAEpC0D,IAASS,EAAKyK,GAAeC,GAAMtK,GAAQ,GAAG,kBAAkB,EAAE,MAAMmB,CAAI;AAElF,WAAO,MAAM,QAAQsJ,CAAS,IAAItL,IAASA,EAAOsL,CAAS;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,IAAI5F,GAAajG,GAAenD,IAA8B,CAAA,GAAmB;AAC/E,UAAA2I;AAAA,MACJ;AAAA,MACA,EAAE,KAAAS,GAAK,OAAAjG,EAAM;AAAA,MACb,KAAK,gBAAgB;AAAA,MACrB,EAAE,GAAGnD,GAAS,WAAW,KAAK,UAAU;AAAA,IAAA;AAAA,EAE5C;AACF;AC5GO,MAAMiP,KAAmB/B;AAAA,EAC9B,CAAC,EAAE,iBAAA6B,GAAiB,WAAA3H,GAAW,SAAAK,QACtB,IAAIqH,GAAarH,GAASsH,GAAiB3H,CAAS;AAE/D;ACAO,MAAM8H,WACHZ,GAA6E;AAAA,EACrF,YAAY7G,GAAmCL,GAAsB;AACnE,UAAMK,GAAS;AAAA,MACb,gBAAgB;AAAA,MAChB,sBAAsB;AAAA,MACtB,kBAAkB;AAAA,IAAA,CACnB,GAL4C,KAAA,YAAAL;AAAA,EAM/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe+H,GAAwC;AACrD,SAAK,UAAU,mCAAmC;AAAA,MAChD,MAAM;AAAA,MACN,cAAcA;AAAA,IAAA,CACf;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB3N,GAA4C;AAC/D,SAAK,UAAU,mCAAmC;AAAA,MAChD,MAAM;AAAA,MACN,mBAAmBA;AAAA,IAAA,CACpB;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAyB;AACvB,SAAK,UAAU,mCAAmC,EAAE,MAAM,mBAAoB,CAAA;AAAA,EAChF;AACF;ACjDO,MAAM4N,KAAqBlC;AAAA,EAChC,CAAC,EAAE,SAAAzF,GAAS,WAAAL,EAAA,MAAgB,IAAI8H,GAAezH,GAASL,CAAS;AACnE;ACCO,MAAMiI,GAAS;AAAA,EACpB,YAA6BnE,GAA0B;AAA1B,SAAA,WAAAA;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAiB;AACnB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,eAAmC;AACrC,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,mBAAqC;AACjC,UAAA,EAAE,cAAAoE,EAAiB,IAAA;AAElB,WAAAA,IACH,IAAI,KAAK,KAAK,SAAS,QAAQ,IAAIA,IAAe,GAAI,IACtD;AAAA,EACN;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAyB;AAC3B,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAiC;AACnC,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,eAAmC;AACrC,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAe;AACjB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAA8B;AAChC,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAA6B;AAC/B,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAAiC;AACnC,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAyB;AAC3B,WAAO,KAAK,SAAS;AAAA,EACvB;AACF;ACxFO,MAAMC,KAAerC;AAAA,EAC1B,CAAC,EAAE,UAAAhC,EAAS,MAAOA,IAAW,IAAImE,GAASnE,CAAQ,IAAI;AACzD;ACHO,SAASsE,GAAcrM,GAAgC;AACrD,SAAA+H,GAAW,EAAA,MAAM/H,CAAK;AAC/B;ACIO,MAAMsM,WAAgBhC,EAAoD;AAAA,EAC/E,YACEiC,GACAjI,GACiBL,GACjB;AACA,UAAM,EAAE,UAAAsI,KAAYjI,GAAS,EAAE,MAAM,wBAAwB,GAF5C,KAAA,YAAAL;AAAA,EAGnB;AAAA,EAEA,IAAY,SAASjE,GAAO;AACrB,SAAA,IAAI,YAAYA,CAAK;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAoB;AACf,WAAA,KAAK,IAAI,UAAU;AAAA,EAC5B;AAAA,EAiBA,MAAM,KAAKwM,GAAmBnO,GAAsC;AAClE,QAAI,KAAK;AACD,YAAA,IAAI,MAAM,2BAA2B;AAGzC,QAAAoO;AACJ,QAAI,CAACpO;AACI,MAAAoO,IAAAD;AAAA,SACF;AACC,YAAA,EAAE,UAAAE,GAAU,UAAAC,EAAS,IAAI,IAAI,IAAIH,GAAW,OAAO,SAAS,IAAI;AACtE,UAAIE,MAAa;AACf,cAAM,IAAI,MAAM,uBAAuBA,CAAQ,EAAE;AAM7C,YAAAnG,IAAQoG,EAAS,MAAM,sCAAsC;AACnE,UAAI,CAACpG;AACG,cAAA,IAAI,MAAM,yFAAyF;AAE1G,OAAI,EAAA,EAAAkG,CAAI,IAAIlG;AAAA,IACf;AAEA,SAAK,WAAW;AAEZ,QAAA;AAWF,cAVe,MAAMtB,EAAQ;AAAA,QAC3B,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,QAAQ,EAAE,MAAAwH,EAAK;AAAA,QACf,WAAW,KAAK;AAAA,QAChB,QAAQlK,GAAM;AACZ,iBAAOkK,MAASlK,EAAK;AAAA,QACvB;AAAA,MAAA,CACD,GAEa;AAAA,IAAA,UACd;AACA,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AACF;AClFO,MAAMqK,KAAc7C;AAAA,EACzB,CAAC,EAAE,SAAAzF,GAAS,WAAAL,QAAgB,IAAIqI,GAAQ,IAAOhI,GAASL,CAAS;AACnE;ACSO,MAAM4I,WAAmB3F,EAAgC;AAAA,EAG9D,YAAY,EAAE,WAAAjD,GAAW,GAAGwG,KAAyB;AACnD,UAAMA,CAAI;AAHK,IAAA3M,EAAA;AA0GjB;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,EAAA,YAAoB,CAACC,GAAO1B,MAC1B0B,MAAU,UACN4E,EAAG,uBAAuBtG,CAAQ,IAElC,KAAK,MAAM,GAAG0B,GAAO1B,CAAe;AAQ1C;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAyB,EAAA,aAAsB,CAACC,GAAO1B,MAC5B0B,MAAU,UACN2E,EAAI,uBAAuBrG,CAAQ,IAEnC,KAAK,MAAM,IAAI0B,GAAO1B,CAAe;AAtHzC,SAAK,YAAY4H;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAe;AACV,WAAA,KAAK,IAAI,SAAS;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKQ,SAAe;AAIjB,IAAA,KAAK,SAAS,MAIlB,KAAK,UAAU,6BAA6B;AAAA,MAC1C,YAAY,KAAK;AAAA,MACjB,WAAW,KAAK;AAAA,MAChB,qBAAqB,KAAK;AAAA,MAC1B,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,YAAY,KAAK;AAAA,IAAA,CAClB;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAgB;AACd,gBAAK,YAAY,IACV;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,SAAe;AACb,gBAAK,YAAY,IACV;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,OAAa;AACX,gBAAK,YAAY,IACV;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAmB;AACjB,gBAAK,kBAAkB,IAChB;AAAA,EACT;AAAA,EAEA,IAAY,UAAU6I,GAAoB;AACnC,SAAA,UAAU,EAAE,WAAAA,EAAA,CAAW;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAqB;AAChB,WAAA,KAAK,IAAI,WAAW;AAAA,EAC7B;AAAA,EAEA,IAAY,gBAAgBC,GAA0B;AAC/C,SAAA,UAAU,EAAE,iBAAAA,EAAA,CAAiB;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,kBAA2B;AACtB,WAAA,KAAK,IAAI,iBAAiB;AAAA,EACnC;AAAA,EAEA,IAAY,UAAUtF,GAAoB;AACnC,SAAA,UAAU,EAAE,WAAAA,EAAA,CAAW;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAqB;AAChB,WAAA,KAAK,IAAI,WAAW;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,OAAa;AACX,gBAAK,YAAY,IACV;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAmB;AACjB,gBAAK,kBAAkB,IAChB;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQuF,GAAoB;AAC1B,WAAO,KAAK,UAAU,EAAE,MAAAA,EAAM,CAAA;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa9P,GAAsB;AACjC,WAAO,KAAK,UAAU,EAAE,WAAAA,EAAW,CAAA;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAWC,GAAoB;AAC7B,WAAO,KAAK,UAAU,EAAE,SAAAA,EAAS,CAAA;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAUoH,GAAyC;AACjD,gBAAK,IAAIA,CAAM,GACf,KAAK,OAAO,GACL;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAe;AACV,WAAA,KAAK,IAAI,MAAM;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAiB;AACZ,WAAA,KAAK,IAAI,WAAW;AAAA,EAC7B;AACF;AC3MO,MAAM0I,KAAiBlD;AAAA,EAC5B;AAAA,EACA,CAAC;AAAA,IACC,WAAA9F;AAAA,IACA,aAAAiE;AAAA,IACA,OAAAnB,IAAQ;AAAA,MACN,WAAW;AAAA,MACX,WAAW;AAAA,MACX,MAAM;AAAA,MACN,iBAAiB;AAAA,MACjB,WAAWmB,EAAY,mBAAmB;AAAA,MAC1C,SAASA,EAAY,eAAe;AAAA,IACtC;AAAA,QACI,IAAI2E,GAAW,EAAE,GAAG9F,GAAO,WAAA9C,GAAW;AAC9C;ACVO,SAASiJ,KAAgD;AAC9D,SAAOvF,EAAa;AAAA,IAClB,SAAS3G,EAAK;AAAA,MACZ,QAAQ;AAAA,QACN,MAAME,EAAO;AAAA,QACb,MAAM;AAAA,MACR;AAAA,MACA,aAAa;AAAA,QACX,MAAME,EAAO;AAAA,QACb,MAAM;AAAA,MACR;AAAA,MACA,WAAW;AAAA,QACT,MAAMA,EAAO;AAAA,QACb,MAAM;AAAA,MACR;AAAA,MACA,UAAU;AAAA,QACR,MAAMA,EAAO,EAAE,SAAS;AAAA,QACxB,MAAM;AAAA,MACR;AAAA,IAAA,CACD;AAAA,IACD,UAAU;AAAA,MACR,MAAMnE,GAAK;AAAA,MACX,MAAM;AAAA,IACR;AAAA,IACA,MAAMmE,EAAO;AAAA,KACZ,kBAAkB;AACvB;ACnBgB,SAAA+L,GACd7I,GACAjE,GACoB;AACpB,SAAO,CAACkD,MAAW;AACjB,UAAM,CAAC6J,GAAWC,CAAK,IAAIhN,EAAOkD,CAAM;AAEjC,WAAAD,EAAS8J,GAAWC,GAAO/I,CAAO;AAAA,EAAA;AAE7C;ACxBO,SAASgJ,GAAMC,GAAiC;AAC9C,SAAA,IAAI,QAAQ,CAACnI,MAAQ;AAC1B,eAAWA,GAAKmI,CAAQ;AAAA,EAAA,CACzB;AACH;ACmBO,MAAMC,WAAgBlD,EAO3B;AAAA,EAWA,YAAY,EAAE,WAAArG,GAAW,iBAAA2H,GAAiB,SAAAtH,GAAS,WAAAiF,GAAW,GAAGkB,KAAsB;AACrF,UAAMA,GAAMnG,GAAS;AAAA,MACnB,oBAAoB;AAAA,MACpB,oBAAoB;AAAA,MACpB,mBAAmB;AAAA,MACnB,gBAAgB;AAAA,MAChB,oBAAoB;AAAA,IAAA,CACrB;AAjBc,IAAAxG,EAAA;AAEA,IAAAA,EAAA;AAEA,IAAAA,EAAA;AAET,IAAAA,EAAA;AAEA,IAAAA,EAAA;AAqOR;AAAA;AAAA;AAAA,IAAAA,EAAA;AA1NE,SAAK,kBAAkB8N,GACvB,KAAK,YAAY3H,GACjB,KAAK,YAAYsF;AAEjB,UAAMkE,IAAmB,KAAK,SAAS,KAAK,IAAI;AAC3C,SAAA,WAAW,CAAClK,MACVkK,EAAiBlK,CAAM,IAMrBA,MAAW,uBAAuBgG,IALhC,IAQN,KAAA,gBAAgB4D,GAAsB7I,GAAS;AAAA,MAClD,wBAAwB,CAAC,4BAA4B,OAAO;AAAA,IAAA,CAC7D;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,oBAAoB;AAAA,IAChC,SAAAM,IAAU;AAAA,EACZ,IAAwB,IAA+B;AACrD,WAAOsI,GAAU,EAAA;AAAA,MACf,MAAM1H;AAAA,QACJ;AAAA,QACA,CAAC;AAAA,QACD,KAAK,gBAAgB;AAAA,QACrB,EAAE,WAAW,KAAK,WAAW,SAAAZ,EAAQ;AAAA,MACvC;AAAA,IAAA;AAAA,EAEJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,UAAe;AACV,WAAA,KAAK,IAAI,SAAS;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM8I,GAA4B;AAChC,SAAK,UAAU,iBAAiB,EAAE,aAAaA,EAAY,CAAA;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAkC;AAC7B,WAAA,KAAK,IAAI,aAAa;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,cAAuB;AACzB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,SAAkB;AACb,WAAAhH,GAAY,KAAK,OAAO;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAc;AACZ,SAAK,UAAU,eAAe;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,eAAe,EAAE,SAAA9B,IAAU,IAAK,IAAwB,CAAA,GAA+B;AAGvF,QAAA;AACK,aAAA,MAAM,KAAK;IAAoB,QAChC;AAAA,IACR;AAIA,QADe,MAAM,KAAK,yBACX;AACP,YAAA,IAAI,MAAM,gBAAgB;AAI5B,UAAA+I,IAAa,KAAK,IAAA,IAAQ/I;AAGhC,QAAIgJ,IAAY;AAGhB,WAAO/I,GAAY,YAAY;AACtB,aAAA,KAAK,IAAI,IAAI8I,KAAY;AAC1B,YAAA;AACK,iBAAA,MAAM,KAAK;QAAoB,QAChC;AAAA,QAAC;AAGT,cAAML,GAAMM,CAAS,GAGRA,KAAA;AAAA,MACf;AAEA,YAAMjJ,GAAmBC,CAAO;AAAA,OAC/BA,CAAO;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAM,mBAAmB/H,IAA8B,IAAmC;AACpF,WAAC,KAAK,8BACR,KAAK,4BAA4BoI,EAAQ;AAAA,MACvC,GAAGpI;AAAA,MACH,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,WAAW,KAAK;AAAA,IACjB,CAAA,EACE,KAAK,CAAC,EAAE,QAAAgR,EAAa,MAAAA,CAAM,EAC3B,QAAQ,MAAM,KAAK,4BAA4B,MAAS,IAEtD,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,mBAAmBhR,IAA8B,IAAyC;AAC1F,WAAC,KAAK,8BACR,KAAK,4BAA4BoI,EAAQ;AAAA,MACvC,GAAGpI;AAAA,MACH,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,WAAW,KAAK;AAAA,IACjB,CAAA,EACE,KAAK,CAAC,EAAE,QAAAgR,EAAa,MAAAA,CAAM,EAC3B,QAAQ,MAAM,KAAK,4BAA4B,MAAS,IAEtD,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,SAAStL,GAAoB;AAC3B,UAAM,EAAE,MAAAuL,EAAK,IAAI,IAAI,KAAK,CAACvL,CAAI,CAAC;AAC5B,QAAA,CAACuL,KAAQA,IAAO;AAClB,YAAM,IAAI,MAAM,mCAAmCA,CAAI,EAAE;AAE3D,SAAK,UAAU,qBAAqB,EAAE,MAAAvL,EAAM,CAAA;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe+D,GAAiC;AACzC,SAAA,UAAU,4BAA4BH,EAAMG,CAAK,IAAI,EAAE,OAAAA,MAAU,EAAE,WAAWA,EAAO,CAAA,GACrF,KAAA,IAAI,eAAeA,CAAK;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAWA,GAAkB;AAC3B,SAAK,UAAU,gCAAgC,EAAE,OAAAA,EAAO,CAAA,GACnD,KAAA,IAAI,WAAWA,CAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,kBAAkB0G,GAAce,IAAyC,IAAU;AACjF,QAAI,CAAC,KAAK,SAAS,mBAAmB,KAAK,CAAC,KAAK;AACzC,YAAA,IAAI,MAAM,2EAA2E;AAE7F,SAAK,UAAU,+BAA+B,EAAE,OAAOf,GAAM,YAAYe,GAAW;AAAA,EACtF;AACF;AC1RO,MAAMC,KAAcjE;AAAA,EACzB;AAAA,EACA,CAAC;AAAA,IACC,aAAA7B;AAAA,IACA,WAAAqB,IAAY;AAAA,IACZ,OAAAxC,IAAQ;AAAA,MACN,SAASmB,EAAY,WAAW;AAAA,MAChC,aAAaA,EAAY,iBAAiB;AAAA,IAC5C;AAAA,IACA,GAAGuC;AAAA,EAAA,MACC,IAAI+C,GAAQ,EAAE,GAAG/C,GAAM,GAAG1D,GAAO,WAAAwC,GAAW;AACpD;ACXO,SAAS0E,GAAmB1J,GAA6C;AACxE,QAAA1F,IAAU0F,EAAO,QAAQ,KAAK,GAC9B2J,KAAS3J,EAAO,SAAS,IAAI,KAAK,GAClC4J,IAAU5J,EAAO,WAAW;AAC9B,MAAA6J;AAGA,MAAAF,EAAM,SAAS;AACjB,UAAM,IAAI,MAAM,6BAA6BA,EAAM,MAAM,EAAE;AAI7D,MAAI,CAACrP,EAAQ,UAAUA,EAAQ,SAAS;AACtC,UAAM,IAAI,MAAM,+BAA+BA,EAAQ,MAAM,EAAE;AAI7D,MAAAsP,EAAQ,SAAS;AACnB,UAAM,IAAI,MAAM,gCAAgCA,EAAQ,MAAM,EAAE;AAI9D,SAACA,EAAQ,SAIOC,IAAAD,EAAQ,IAAI,CAACpL,MAAM;AAC7B,UAAA,EAAE,IAAAsL,IAAK,GAAO,IAAAtL;AAGhB,QAAAsL,EAAG,SAAS;AACd,YAAM,IAAI,MAAM,iCAAiCA,CAAE,EAAE;AAGnD,QAAA,CAACtL,EAAE,QAAQA,EAAE,SAAS,aAAaA,EAAE,SAAS,eAAe;AACzD,YAAAiK,IAAOjK,EAAE,KAAK,KAAK;AAEzB,UAAI,CAACiK,EAAK,UAAUA,EAAK,SAAS,IAAI;AAC9B,cAAA3O,IAAO0E,EAAE,QAAQ;AAEjB,cAAA,IAAI,MAAM,0BAA0B1E,CAAI,yBAAyB0E,EAAE,KAAK,MAAM,EAAE;AAAA,MACxF;AAEA,aAAO,EAAE,GAAGA,GAAG,MAAAiK,GAAM,IAAAqB,EAAG;AAAA,IAC1B;AAEO,WAAA,EAAE,GAAGtL,GAAG,IAAAsL;EAAG,CACnB,IAxBDD,IAAkB,CAAC,EAAE,MAAM,SAAS,IAAI,IAAI,GA0BvC,EAAE,OAAAF,GAAO,SAAArP,GAAS,SAASuP,EAAgB;AACpD;AC/CO,MAAME,WAAchE,EAAkD;AAAA,EAC3E,YAAYiC,GAAmBjI,GAAmCL,GAAsB;AACtF,UAAM,EAAE,UAAAsI,KAAYjI,GAAS,EAAE,MAAM,sBAAsB,GADK,KAAA,YAAAL;AAAA,EAElE;AAAA,EAEA,IAAY,SAASjE,GAAO;AACrB,SAAA,IAAI,YAAYA,CAAK;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAoB;AACf,WAAA,KAAK,IAAI,UAAU;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,KAAKnD,GAAmD;AAC5D,QAAI,KAAK;AACD,YAAA,IAAI,MAAM,0BAA0B;AAG5C,SAAK,WAAW;AAEZ,QAAA;AACF,YAAM,EAAE,WAAW0R,IAAW,KAAK,IAAI,MAAMtJ,EAAQ;AAAA,QACnD,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,WAAW,KAAK;AAAA,QAChB,QAAQgJ,GAAmBpR,CAAO;AAAA,MAAA,CACnC;AACM,aAAA0R;AAAA,IAAA,UACP;AACA,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AACF;ACjDO,MAAMC,KAAYzE;AAAA,EACvB,CAAC,EAAE,WAAA9F,GAAW,SAAAK,QAAc,IAAIgK,GAAM,IAAOhK,GAASL,CAAS;AACjE;ACEO,MAAMwK,WAAkBnE,EAAgE;AAAA,EAC7F,YAAYiC,GAAmBjI,GAAmCL,GAAsB;AAChF,UAAA,EAAE,UAAAsI,EAAS,GAAGjI,GAAS;AAAA,MAC3B,OAAO;AAAA,MACP,MAAM;AAAA,IAAA,CACP,GAJ+D,KAAA,YAAAL;AAAA,EAKlE;AAAA;AAAA;AAAA;AAAA,EAKA,QAAc;AACZ,SAAK,UAAU,6BAA6B,GAC5C,KAAK,WAAW;AAAA,EAClB;AAAA,EAEA,IAAY,SAASjE,GAAO;AACrB,SAAA,IAAI,YAAYA,CAAK;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAoB;AACf,WAAA,KAAK,IAAI,UAAU;AAAA,EAC5B;AAAA,EAcA,MAAM,KAAK0O,GAAuE;AAChF,QAAI,KAAK;AACD,YAAA,IAAI,MAAM,+BAA+B;AAGjD,UAAM,EAAE,MAAA1B,GAAM,SAAA3H,EAAQ,KACpB,OAAOqJ,KAAkB,WACrB,EAAE,MAAMA,MACRA,MACD,CAAA;AACL,SAAK,WAAW;AAEZ,QAAA;AAWI,YAAAC,KAVS,MAAM1J,EAAQ;AAAA,QAC3B,QAAQ;AAAA,QACR,OAAO,CAAC,oBAAoB,sBAAsB;AAAA,QAClD,WAAW,KAAK;AAAA,QAChB,QAAQ,EAAE,MAAA+H,EAAK;AAAA,QACf,QAAQ1H,GAAI;AACV,iBAAOA,EAAG,UAAU,0BAA0B,CAACD,KAAWA,EAAQC,EAAG,OAAO;AAAA,QAC9E;AAAA,MACD,CAAA,KAAK,CAAA,GAEY,QAAQ;AAC1B,aAAIqJ,KACF,KAAK,MAAM,GAENA;AAAA,IAAA,UACP;AACA,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AAAA;AAGF;AC7EO,MAAMC,KAAgB7E;AAAA,EAC3B,CAAC,EAAE,SAAAzF,GAAS,WAAAL,QAAgB,IAAIwK,GAAU,IAAOnK,GAASL,CAAS;AACrE;ACGO,MAAM4K,WAAuBxH,EAAgE;AAAA,EAClG,YAAYI,GAAoBnD,GAAmCL,GAAsB;AACjF,UAAA,EAAE,WAAAwD,EAAU,GAAGnD,GAAS;AAAA,MAC5B,MAAM;AAAA,MACN,MAAM;AAAA,IAAA,CACP;AA2BH;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAxG,EAAA,YAAoB,CAACC,GAAO1B,MAC1B0B,MAAU,UACN4E,EAAG,2BAA2BtG,CAAQ,IAEtC,KAAK,MAAM,GAAG0B,GAAO1B,CAAe;AAQ1C;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAyB,EAAA,aAAsB,CAACC,GAAO1B,MAC5B0B,MAAU,UACN2E,EAAI,2BAA2BrG,CAAQ,IAEvC,KAAK,MAAM,IAAI0B,GAAO1B,CAAe;AA/CwB,SAAA,YAAA4H;AAAA,EAKnE;AAAA,EAEA,IAAY,UAAUyD,GAAkB;AACjC,SAAA,IAAI,aAAaA,CAAO,GAC7B,KAAK,UAAU,iCAAiC,EAAE,YAAYA,EAAS,CAAA;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAqB;AAChB,WAAA,KAAK,IAAI,WAAW;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,OAAa;AACX,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EA6BA,OAAa;AACX,SAAK,YAAY;AAAA,EACnB;AACF;AC9DO,MAAMoH,KAAqB/E;AAAA,EAChC;AAAA,EACA,CAAC;AAAA,IACC,SAAAzF;AAAA,IACA,WAAAL;AAAA,IACA,OAAA8C,IAAQ,EAAE,WAAW,GAAM;AAAA,QACvB,IAAI8H,GAAe9H,EAAM,WAAWzC,GAASL,CAAS;AAC9D;ACPO,SAAS8K,GAAiB/O,GAAmC;AAC3D,SAAAkI,GAAc,EAAA,MAAMlI,CAAK;AAClC;ACGO,MAAMgP,WAAoBjE,GAAqC;AAAA;AAAA;AAAA;AAAA,EAIpE,IAAI,kBAAmC;AAC9B,WAAA,KAAK,IAAI,iBAAiB;AAAA,EACnC;AAAA,EAEA,IAAI,UAA2B;AACtB,WAAA,KAAK,IAAI,SAAS;AAAA,EAC3B;AAAA,EAEA,IAAI,cAA+B;AAC1B,WAAA,KAAK,IAAI,aAAa;AAAA,EAC/B;AAAA,EAEA,IAAI,kBAAmC;AAC9B,WAAA,KAAK,IAAI,iBAAiB;AAAA,EACnC;AAAA,EAEA,IAAI,uBAAwC;AACnC,WAAA,KAAK,IAAI,sBAAsB;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA,EAKA,WAA8B;AAC5B,WAAO,KAAK;EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,gBAAiC;AAC5B,WAAA,KAAK,IAAI,eAAe;AAAA,EACjC;AAAA,EAEA,IAAI,YAA6B;AACxB,WAAA,KAAK,IAAI,WAAW;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAkB;AACpB,WAAO,CAAC,KAAK,WAAWrE,GAAY,KAAK,OAAO;AAAA,EAClD;AAAA,EAEA,IAAI,YAA6B;AACxB,WAAA,KAAK,IAAI,WAAW;AAAA,EAC7B;AAAA,EAEA,IAAI,mBAAoC;AAC/B,WAAA,KAAK,IAAI,kBAAkB;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,iBAAkC;AAC7B,WAAA,KAAK,IAAI,gBAAgB;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,yBAA0C;AACrC,WAAA,KAAK,IAAI,wBAAwB;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,wBAAyC;AACpC,WAAA,KAAK,IAAI,wBAAwB;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAgC;AACvB,WAAA/D,EAAG,iBAAiB,CAAC5E,MAAU;AACpC,WAAK,IAAIgR,GAAiBhR,EAAM,YAAY,CAAC;AAAA,IAAA,CAC9C;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAqC;AAChC,WAAA,KAAK,IAAI,mBAAmB;AAAA,EACrC;AAAA,EAEA,IAAI,YAA6B;AACxB,WAAA,KAAK,IAAI,WAAW;AAAA,EAC7B;AACF;ACzGO,MAAMkR,KAAkBlF;AAAA,EAC7B;AAAA,EACA,CAAC,EAAE,aAAA7B,GAAa,OAAAnB,IAAQmB,GAAa,YAAAiC,QAAiB;AAC9C,UAAA+E,IAAK,IAAIF,GAAYjI,CAAK;AACrB,WAAAoD,EAAA+E,EAAG,QAAQ,GACfA;AAAA,EACT;AACF;ACJgB,SAAAC,GAAmBtS,IAA8B,IAAgC;AAC/F,SAAOoI,EAAQ;AAAA,IACb,GAAGpI;AAAA,IACH,QAAQ;AAAA,IACR,OAAO;AAAA,EAAA,CACR,EAAE,KAAKkS,EAAgB;AAC1B;ACVgB,SAAAK,EAAapP,GAAeqP,GAAwB;AAC3D,SAAArP,EAAM,WAAWqP,CAAM,IAAIrP,IAAQ,GAAGqP,CAAM,GAAGrP,CAAK;AAC7D;ACDO,SAASsP,EAAcC,GAA2C;AACvE,SAAO,IAAI;AAAA,IACT,OAAOA,KAAc,WACjBA,IACA,GAAGA,EAAU,YAAY,EAAE,GAAGH,EAAaG,EAAU,UAAU,IAAI,GAAG,CAAC,GAAGH,EAAaG,EAAU,QAAQ,IAAI,GAAG,CAAC;AAAA,IACrH;AAAA,EAAA;AAEJ;ACWO,MAAMC,WAAcrE,GAAsC;AAAA,EAC/D,YACmB7G,GACAsH,GACA3H,GACjB;AACA,UAAMK,GAAS,EAAE,uBAAuB,mCAAoC,CAAA;AAsH9E;AAAA;AAAA;AAAA,IAAAxG,EAAA;AA1HmB,SAAA,UAAAwG,GACA,KAAA,kBAAAsH,GACA,KAAA,YAAA3H,GAIZ,KAAA,gBAAgBkJ,GAAsB7I,GAAS;AAAA,MAClD,2BAA2B,CAAC,qBAAqB,kBAAkB;AAAA,IAAA,CACpE;AAAA,EACH;AAAA,EA2BA,SAASmL,GAAaC,GAAyD;AAC7E,UAAMC,IAAeL,EAAcG,CAAG,EAAE,SAAS;AAGjD,QAAI,CAACnM,EAAS,qBAAqB,KAAK,OAAO,GAAG;AACzC,aAAA,KAAKqM,GAAc,QAAQ;AAClC;AAAA,IACF;AAEM,UAAA9S,IAAgC,OAAO6S,KAAqB,YAC9D,EAAE,gBAAgBA,EAAA,IAClBA,KAAoB;AAGxB,SAAK,UAAU,qBAAqB;AAAA,MAClC,KAAKC;AAAA,MACL,aAAa9S,EAAQ;AAAA,MACrB,kBAAkBA,EAAQ;AAAA,IAAA,CAC3B;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB4S,GAAmB;AAC5B,UAAA,EAAE,UAAA/C,GAAU,UAAAC,GAAU,QAAAiD,EAAA,IAAW,IAAI,IAAIH,GAAK,cAAc;AAClE,QAAI/C,MAAa;AACf,YAAM,IAAI,MAAM,iCAAiCA,CAAQ,0BAA0B;AAGrF,QAAI,CAACpJ,EAAS,wBAAwB,KAAK,OAAO,GAAG;AACnD,aAAO,SAAS,OAAOmM;AACvB;AAAA,IACF;AAEA,SAAK,UAAU,wBAAwB,EAAE,WAAW9C,IAAWiD,GAAQ;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,wBAAgD;AAC9C,UAAAnL,IAAQ,KAAK,mBACb;AAAA,MACJ,MAAAlC,IAAO;AAAA,IACT,IAAI,MAAM0C,EAAQ;AAAA,MAChB,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,WAAW,KAAK;AAAA,MAChB,QAAQ,EAAE,QAAQR,EAAM;AAAA,MACxB,SAASD,GAAeC,CAAK;AAAA,IAAA,CAC9B;AAEM,WAAAlC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,SAASkN,GAAazC,GAAqB;AACpC,SAAA;AAAA,MACH,4BAA4B,IAAI,gBAAgB,EAAE,KAAAyC,GAAK,MAAMzC,KAAQ,GAAG,CAAC,EACtE,SAAA,EAIA,QAAQ,OAAO,KAAK;AAAA,IAAA;AAAA,EAE3B;AAMF;AC/IO,MAAM6C,KAAY9F;AAAA,EACvB,CAAC,EAAE,SAAAzF,GAAS,WAAAL,GAAW,iBAAA2H,QACd,IAAI4D,GAAMlL,GAASsH,GAAiB3H,CAAS;AAExD;ACGsB,eAAA6L,GACpBjT,IAA8B,IACE;AAC1B,QAAA;AAAA,IACJ,aAAakT;AAAA,IACb,iBAAiBC;AAAA,IACjB,GAAGvF;AAAA,EACL,IAAI,MAAMxF,EAAQ;AAAA,IAChB,GAAGpI;AAAA,IACH,QAAQ;AAAA,IACR,OAAO;AAAA,EAAA,CACR;AAED,SAAO,EAAE,GAAG4N,GAAM,YAAAsF,GAAY,eAAAC,EAAc;AAC9C;ACfA,SAASC,EAASjQ,GAAuB;AAChC,SAAAA,IAAQ,IAAI,IAAIA;AACzB;AAMO,MAAMkQ,WAAiBnF,GAAkC;AAAA,EAG9D,YAAY,EAAE,WAAA9G,GAAW,cAAAkM,GAAc,QAAAC,GAAQ,OAAAC,GAAO,YAAAN,KAA6B;AAC3E,UAAA;AAAA,MACJ,QAAQE,EAASG,CAAM;AAAA,MACvB,YAAAL;AAAA,MACA,cAAcE,EAASE,CAAY;AAAA,MACnC,OAAOF,EAASI,CAAK;AAAA,IAAA,CACtB;AARc,IAAAvS,EAAA;AASf,SAAK,YAAYmG;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAKpH,GAA6C;AACtD,UAAM,EAAE,eAAAmT,GAAe,GAAGvF,EAAS,IAAA,MAAMqF,GAAgBjT,CAAO;AAChE,SAAK,IAAI;AAAA,MACP,GAAG4N;AAAA,MACH,cAAcuF,IAAgBvF,EAAK,SAAS,KAAK,IAAI,cAAc;AAAA,IAAA,CACpE;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,IAAI,SAAiB;AACZ,WAAA,KAAK,IAAI,QAAQ;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,IAAI,eAAuB;AAClB,WAAA,KAAK,IAAI,cAAc;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAgC;AACvB,WAAA9H,EAAG,oBAAoB,CAAC5E,MAAU;AACjC,YAAA;AAAA,QACJ,QAAAqS;AAAA,QACA,OAAAC;AAAA,QACA,aAAaN;AAAA,QACb,iBAAiBC;AAAA,MACf,IAAAjS,GACEuS,IAAkBL,EAASG,CAAM;AAEvC,WAAK,IAAI;AAAA,QACP,QAAQE;AAAA,QACR,YAAAP;AAAA,QACA,OAAOE,EAASI,CAAK;AAAA,QACrB,GAAIL,IAAgB,EAAE,cAAcM,MAAoB,CAAC;AAAA,MAAA,CAC1D;AAAA,IAAA,CACF;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,aAAsB;AACjB,WAAA,KAAK,IAAI,YAAY;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAAgB;AACX,WAAA,KAAK,IAAI,OAAO;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAe;AACb,SAAK,UAAU,gBAAgB,GAC1B,KAAA,IAAI,cAAc,EAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAoB;AACf,WAAA,KAAK,iBAAiB,KAAK;AAAA,EACpC;AACF;ACpIO,MAAMC,KAAexG;AAAA,EAC1B;AAAA,EACA,OAAO,EAAE,OAAAhD,GAAO,UAAAqC,GAAU,WAAAnF,GAAW,YAAAkG,QAAiB;AACpD,QAAI4F,IAAa,IACbK,IAAS,GACTC,IAAQ,GACRF,IAAe;AAGnB,QAAIpJ;AACF,MAAAgJ,IAAahJ,EAAM,YACnBqJ,IAASrJ,EAAM,QACfsJ,IAAQtJ,EAAM,OACdoJ,IAAepJ,EAAM;AAAA,aACZ,CAAC,SAAS,YAAY,WAAW,QAAQ,QAAQ,KAAK,EAAE,SAASqC,CAAQ;AAGrE,MAAA2G,IAAA,IACbK,IAAS,OAAO,aAChBC,IAAQ,OAAO,YACfF,IAAe,OAAO;AAAA,SACjB;AAGL,YAAMvF,IAAW,MAAMkF,GAAgB,EAAE,SAAS,KAAM,WAAA7L,GAAW;AACnE,MAAA8L,IAAanF,EAAS,YACtBwF,IAASxF,EAAS,QAClByF,IAAQzF,EAAS,OACFuF,IAAAvF,EAAS,gBAAgBwF,IAAS;AAAA,IACnD;AAGM,UAAAI,IAAW,IAAIN,GAAS;AAAA,MAC5B,WAAAjM;AAAA,MACA,QAAAmM;AAAA,MACA,OAAAC;AAAA,MACA,cAAAF;AAAA,MACA,YAAAJ;AAAA,IAAA,CACD;AAGU,WAAA5F,EAAAqG,EAAS,QAAQ,GAErBA;AAAA,EACT;AACF;ACjDgB,SAAAC,EAAUjT,GAAcwC,GAAqB;AAC3D,WAAS,gBAAgB,MAAM,YAAYxC,GAAMwC,CAAK;AACxD;ACwBgB,SAAA0Q,GACdC,GACAzI,GACA0I,GACW;AACI,EAAAA,UAAA,CAACC,MAAa,QAAQA,CAAQ;AAEvC,QAAAC,IAAYF,EAAW,QAAQ,GAC/BG,IAAQH,EAAW,IAAI,GAEvBI,IAAY,MAAM;AAChB,UAAA,EAAE,aAAAC,EAAgB,IAAAN;AAEpB,QAAAxK,EAAM8K,CAAW;AACnB,MAAAR,EAAUK,GAAWG,CAAW;AAAA,SAC3B;AACC,YAAA,EAAE,SAAA9T,GAAS,kBAAA+T,EAAqB,IAAAhJ;AAElC,MAAA+I,MAAgB,cAAc9T,IAChCsT,EAAUK,GAAW3T,CAAO,IACnB8T,MAAgB,wBAAwBC,KACjDT,EAAUK,GAAWI,CAAgB;AAAA,IAEzC;AAEU,IAAAT,EAAAM,GAAOJ,EAAQ,OAAO;AAAA,EAAA,GAG5BzS,IAAY;AAAA,IAChBgK,EAAY,GAAG,UAAU8I,CAAS;AAAA,IAClCL,EAAQ,GAAG,UAAUK,CAAS;AAAA,EAAA;AAGtB,SAAAA,KAEH,MAAM9S,EAAU,QAAQ,CAAAwE,MAAOA,EAAK,CAAA;AAC7C;ACrCgB,SAAAyO,GACdjJ,GACAkJ,GACW;AACX,EAAAA,UAAkB,CAACP,MACV,cAAcA,EAAS,QAAQ,UAAU,CAAChI,MAAM,IAAIA,EAAE,YAAa,CAAA,EAAE,CAAC;AAG/E,QAAMmI,IAAY,MAAM;AACf,WAAA,QAAQ9I,EAAY,SAAU,CAAA,EAAE,QAAQ,CAAC,CAACE,GAAG9G,CAAC,MAAM;AACzD,MAAIA,KACQmP,EAAAW,EAAchJ,CAAC,GAAG9G,CAAC;AAAA,IAC/B,CACD;AAAA,EAAA;AAGO,SAAA0P,KAEH9I,EAAY,GAAG,UAAU8I,CAAS;AAC3C;AChBgB,SAAAK,GACdb,GACAY,GACW;AACO,EAAAA,UAAA,CAACP,MAAa,iBAAiBA,CAAQ;AACnD,QAAA;AAAA,IACJS;AAAA,IACAC;AAAA,IACAC;AAAA,EAAA,IACG,CAAC,UAAU,SAAS,eAAe,EAAY,IAAI,CAAChQ,MAAS4P,EAAc5P,CAAI,CAAC,GAC/EiQ,IAAY,MAAMhB,EAAUa,GAAW,GAAGd,EAAS,MAAM,IAAI,GAC7DkB,IAAW,MAAMjB,EAAUc,GAAU,GAAGf,EAAS,KAAK,IAAI,GAC1DmB,IAAkB,MAAMlB,EAAUe,GAAiB,GAAGhB,EAAS,YAAY,IAAI,GAG/EtS,IAAY;AAAA,IAChBsS,EAAS,GAAG,iBAAiBiB,CAAS;AAAA,IACtCjB,EAAS,GAAG,gBAAgBkB,CAAQ;AAAA,IACpClB,EAAS,GAAG,uBAAuBmB,CAAe;AAAA,EAAA;AAG1C,SAAAF,KACDC,KACOC,KAET,MAAMzT,EAAU,QAAQ,CAAAwE,MAAOA,EAAK,CAAA;AAC7C;AC9CgB,SAAAkP,GAAQC,IAAqB,IAAiB;AAC5D,QAAM3T,IAAyB;AAAA,IAC7ByE,EAAG,iBAAiB,MAAM;AACxB,MAAAsB,EAAU,oBAAoB,GAC9B,OAAO,SAAS;IAAO,CACxB;AAAA,EAAA,GAEG3B,IAAqB,MAAMpE,EAAU,QAAQ,CAACF,MAAMA,GAAG;AAE7D,MAAI6T,GAAoB;AAChB,UAAA7F,IAAQ,SAAS,cAAc,OAAO;AAC5C,IAAAA,EAAM,KAAK,0BACF,SAAA,KAAK,YAAYA,CAAK,GAErB9N,EAAA;AAAA,MACRyE,EAAG,oBAAoB,CAACmP,MAAS;AAI/B,QAAA9F,EAAM,YAAY8F;AAAA,MAAA,CACnB;AAAA,MACD,MAAM,SAAS,KAAK,YAAY9F,CAAK;AAAA,IAAA;AAAA,EAEzC;AAKA,SAAA/H,EAAU,gBAAgB,EAAE,kBAAkB,GAAM,CAAA,GAE7C3B;AACT;ACzCO,SAASyP,KAAiB;AAC/B,SAAO,OAAO,SAAW;AAC3B;ACCA,eAAsBC,KAA0B;AAC1C,MAAArO,GAAgB,MAAM;AACjB,WAAA;AAEL,MAAA;AACI,iBAAAsB,EAAQ,EAAE,QAAQ,yBAAyB,OAAO,iBAAiB,SAAS,KAAK,GAChF;AAAA,EAAA,QACD;AACC,WAAA;AAAA,EACT;AACF;ACFO,SAASgN,GAAgBC,GAA8C;AAC5E,QAAMvI,IAAK,OAAOuI,KAAoB,WAClC7J,EAAkB6J,CAAe,IACjCA;AAGJ,EAAA1I,GAAcG,CAAE;AAEhB,WAASwI,EAAiB5P,GAAqB;AACzC,QAAA,OAAOA,KAAS;AAGhB,UAAA;AACF,cAAM,EAAE,WAAAb,EAAA,IAAcL,GAAakB,CAAI;AAEvC,QAAIb,MAAc,2BAChBD,EAAkB,iBAAiB;AAAA,UACjC,cAAc,KAAK,MAAMwH,GAAqBU,EAAG,WAAW,CAAC;AAAA,QAAA,CACd,GAG/CjI,MAAc,8BAChBD,EAAkB,oBAAoB;AAAA,UACpC,OAAO,OAAO;AAAA,UACd,QAAQ,OAAO;AAAA,UACf,iBAAiB;AAAA,UACjB,aAAa;AAAA,QAAA,CACqC;AAAA,MACtD,QACM;AAAA,MACR;AAAA,EACF;AAGA,MAAImC,MAAY;AACd,UAAMwO,IAAc,OAAO,OAAO,YAAY,KAAK,OAAO,MAAM;AACzD,WAAA,OAAO,cAAc,CAAQ7P,MAAA;AAClC,MAAK4P,EAAiB5P,CAAI,GAC1B6P,EAAY7P,CAAI;AAAA,IAAA;AAElB;AAAA,EACF;AAEI,MAAAmB,GAAkB,MAAM,GAAG;AAC7B,UAAM2O,IAAS,OAAO,SAAS,OAAO,KAAK,OAAO,QAAQ;AACnD,WAAA,SAAS,SAAS,CAAQ9P,MAAA;AAC/B,MAAK4P,EAAiB5P,CAAI,GAC1B8P,EAAO9P,CAAI;AAAA,IAAA;AAEb;AAAA,EACF;AAEA,QAAM+P,IAAS,OAAe;AAC7B,SAAe,uBAAuB;AAAA,IACrC,GAAIA,KAAS,CAAC;AAAA,IACd,aAAavV,GAAW;AACtB,MAAKoV,EAAiB,KAAK,UAAU,EAAE,WAAWpV,EAAK,CAAC,GAAG,WAAWA,EAAK,CAAC,EAAA,CAAG,CAAC,GAEvEuV,KAAAA,EAAM,UAAU,GAAGvV,CAAI;AAAA,IAClC;AAAA,EAAA;AAEJ;ACrEO,SAASwV,GAAWvS,GAAmC;AAC5D,SAAOA,aAAiBpB;AAC1B;ACAgB,SAAA4T,GAAiBxS,GAAgB3B,GAA0B;AACzE,SAAOkU,GAAWvS,CAAK,KAAKA,EAAM,SAAS3B;AAC7C;ACAgB,SAAAoU,EACd1Q,GACA2Q,GAC6C;AACzC,MAAA/F,GACApI,GACA8J;AAEA,SAAA,OAAOtM,KAAS,WACP4K,IAAA5K,KAEX4K,IAAW5K,EAAK,aAAa,SACzB2Q,IACA3Q,EAAK,UACTwC,IAASxC,EAAK,QACdsM,IAAKtM,EAAK,KAGL,OAAO,OAAO;AAAA,IACnB,IAAIsM,MAAQ,KAAK,OAAA,IAAW,KAAK,KAAM,GAAG,SAAS,EAAE;AAAA,IACrD,UAAA1B;AAAA,IACA,QAAApI;AAAA,EAAA,CACD;AACH;ACfO,MAAMoO,GAA4B;AAAA,EAQvC,YAIEC,GAIQC,GAKS5O,IAAuBsB,GACxC;AAlBO;AAAA;AAAA;AAAA,IAAAzH,EAAA;AAEQ,IAAAA,EAAA,YAAsB,IAAID;AAiCnC;AAAA;AAAA;AAAA,IAAAC,EAAA,kBAAW;AAiBnB;AAAA;AAAA;AAAA,IAAAA,EAAA,cAAO,MAAY,KAAK,GAAG,EAAE;AAqF7B;AAAA;AAAA;AAAA,IAAAA,EAAA,YAA4B,KAAK,GAAG,GAAG,KAAK,KAAK,EAAE;AAKnD;AAAA;AAAA;AAAA,IAAAA,EAAA,aAA8B,KAAK,GAAG,IAAI,KAAK,KAAK,EAAE;AA3HhD,QAPI,KAAA,SAAA+U,GAKS,KAAA,YAAA5O,GAEb2O,EAAQ,WAAW;AACf,YAAA7T,EAAYQ,IAA8B,8BAA8B;AAGhF,QAAIsT,IAAS,KAAKA,KAAUD,EAAQ;AAC5B,YAAA7T;AAAA,QACJS;AAAA,QACA;AAAA,MAAA;AAGC,SAAA,UAAUoT,EAAQ,IAAI,CAAC7Q,MAAS0Q,EAAY1Q,GAAM,EAAE,CAAC;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,SAAe;AACT,IAAC,KAAK,aACR,KAAK,WAAW,IAChB,KAAK,KAAK,GACPY,EAAA,uBAAuB,KAAK,IAAI;AAAA,EAEvC;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,UAAuD;AAClD,WAAA,KAAK,QAAQ,KAAK,KAAK;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA,EAKA,SAAe;AACb,SAAK,WAAW,IACZD,EAAA,uBAAuB,KAAK,IAAI;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,UAAgB;AACd,SAAK,GAAG,CAAC;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,GAAGoQ,GAAeC,GAAqB;AAE/B,UAAAC,IAAQ,KAAK,QAAQF,GAGrBG,IAAW,KAAK;AAAA,MACpB,KAAK,IAAI,GAAGD,CAAK;AAAA,MACjB,KAAK,QAAQ,SAAS;AAAA,IAAA;AAKpB,KAAAA,MAAUC,KAAYF,MAExB,KAAK,eAAeE,GAAU,KAAK,QAAQA,CAAQ,CAAC;AAAA,EAExD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,KAAKD,GAAeD,GAAqB;AACvC,SAAK,GAAGC,IAAQ,KAAK,OAAOD,CAAG;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAmB;AACrB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAmB;AACrB,WAAO,KAAK,UAAU,KAAK,QAAQ,SAAS;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAAgB;AAClB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,KAAKhR,GAAkD;AACrD,IAAI,KAAK,WACP,KAAK,QAAQ,OAAO,KAAK,QAAQ,CAAC,GAE/B,KAAA,eAAe,KAAK,QAAQ,GAAG0Q,EAAY1Q,GAAM,KAAK,QAAQ,QAAQ,CAAC;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQA,GAAkD;AACnD,SAAA,eAAe,KAAK,OAAO0Q,EAAY1Q,GAAM,KAAK,QAAQ,QAAQ,CAAC;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,eAAeiR,GAAeE,GAAsD;AACpF,UAAAJ,IAAQE,IAAQ,KAAK;AAC3B,QAAI,CAACF,KAAS,KAAK,YAAYI;AAE7B;AAGF,UAAMxS,IAAO,KAAK;AAEd,QAAA,KAAK,UAAUsS,GAAO;AACxB,YAAMG,IAAY,KAAK;AACvB,WAAK,SAASH,GAIV,KAAK,YAAYG,IAAY,KAAMH,IAAQ,KAC7C,KAAK,KAAK;AAAA,IAEd;AAEK,SAAA,QAAQA,CAAK,IAAIE,GACjB,KAAA,GAAG,KAAK,UAAU;AAAA,MACrB,WAAW;AAAA,MACX,MAAAxS;AAAA,MACA,IAAI,KAAK;AAAA,MACT,OAAAoS;AAAA,IAAA,CACD;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKQ,OAAa;AACd,SAAA,UAAU,6BAA6B,EAAE,YAAY,CAAC,CAAC,KAAK,OAAO;AAAA,EAC1E;AACF;ACxNO,SAASM,EACd;AAAA,EACE,QAAA7O;AAAA,EACA,GAAGkG;AACL,GACoC;AAC7B,SAAA,EAAE,GAAIlG,KAAU,EAAE,MAAM,IAAI,QAAQ,GAAA,GAAO,GAAGkG;AACvD;ACTO,SAAS4I,EAAU9D,GAA8C;AACtE,QAAM+D,IAAa,OAAO/D,KAAc,WACpCA,EAAU,WAAW,GAAG,IACxB,CAAC,EAAEA,EAAU,YAAYA,EAAU,SAAS,WAAW,GAAG,IACxDE,IAAMH,EAAcC,CAAS;AAEnC,SAAO,GAAG+D,IAAa7D,EAAI,WAAWA,EAAI,SAAS,MAAM,CAAC,CAAC,GAAGA,EAAI,MAAM,GAAGA,EAAI,IAAI;AACrF;ACsBgB,SAAAgD,EACdc,GACAC,GACAzM,GAC0B;AACtB,MAAAlF,GACAwM;AAEA,EAAA,OAAOkF,KAAe,WACjB1R,IAAA0R,KAEP1R,IAAOwR,EAAUE,CAAU,GAC3BxM,IAAQwM,EAAW,OACnBlF,IAAKkF,EAAW;AAGlB,QAAM,EAAE,UAAA5G,GAAU,QAAAiD,GAAQ,MAAA6D,EAAS,IAAA,IAAI,IAAI5R,GAAM,WAAWuN,EAAaoE,GAAc,GAAG,CAAC,EAAE;AACtF,SAAA,EAAE,IAAAnF,GAAI,UAAA1B,GAAU,QAAQ,EAAE,MAAA8G,GAAM,QAAA7D,GAAQ,OAAA7I;AACjD;AChDA,eAAsB2M,EAAGZ,GAAiC;AACxD,SAAIA,MAAU,IACL,KAMF,QAAQ,KAAc;AAAA,IAC3B,IAAI,QAAQ,CAAC1N,MAAQ;AACb,YAAAuO,IAASvV,EAAS,YAAY,MAAM;AACjC,QAAAuV,KACPvO,EAAI,EAAI;AAAA,MAAA,CACT;AAEM,aAAA,QAAQ,GAAG0N,CAAK;AAAA,IAAA,CACxB;AAAA;AAAA,IAGD,IAAI,QAAQ,CAAC1N,MAAQ;AACR,iBAAAA,GAAK,IAAI,EAAK;AAAA,IAAA,CAC1B;AAAA,EAAA,CACF;AACH;ACxBA,eAAsBwO,KAAsB;AAY1C,MAXI,OAAO,QAAQ,UAAU,MAKtB,OAAA,QAAQ,UAAU,MAAM,EAAE,GAKb,MAAMF,EAAG,IAAI,OAAO,QAAQ,MAAM;AAEpD;AAYE,MAAAG,IAAe,MAAMH,EAAG,EAAE;AAC9B,SAAOG;AACU,IAAAA,IAAA,MAAMH,EAAG,EAAE;AAE9B;AC3BO,SAASI,GAAY9T,GAA0C;AAC7D,SAAAsP,EAActP,CAAK,EAAE;AAC9B;ACYA,MAAM+T,KAAc,GACdC,IAAc,GACdC,IAAiB;AAKhB,MAAMC,GAA6B;AAAA,EASxC,YAIEtB,GAIAI,GACA,EAAE,WAAA/O,GAAW,UAAAkQ,IAAW,WAAW,MAAAC,EAAqC,IAAA,IACxE;AAlBe,IAAAtW,EAAA;AAEA,IAAAA,EAAA,YAAqB,IAAID;AAEjC,IAAAC,EAAA;AAEA,IAAAA,EAAA;AA4BD;AAAA;AAAA;AAAA,IAAAA,EAAA,kBAAW;AA6GX;AAAA;AAAA;AAAA;AAAA,IAAAA,EAAA,oBAAa,CAAC,EAAE,OAAAiJ,QAA2B;AAIjD,UAAIA,MAAU;AACZ,eAAO,KAAK,KAAK,KAAK,UAAU,OAAO,SAAS,IAAI,CAAC;AAKvD,MAAIA,MAAUgN,KACZ,OAAO,QAAQ,YACNhN,MAAUiN,KACnB,KAAK,KAAK,GAERjN,MAAUkN,KACZ,KAAK,QAAQ;AAAA,IACf;AAMM;AAAA;AAAA;AAAA,IAAAnW,EAAA,2BAAoB,OAAO;AAAA,MACjC,IAAAuW;AAAA,MACA,MAAA3T;AAAA,MACA,OAAAoS;AAAA,IAAA,MAC8E;AAE9E,MAAI,KAAK,YACP,MAAM,KAAK,eAER,KAAA,GAAG,KAAK,UAAU;AAAA,QACrB,OAAAA;AAAA,QACA,MAAMM,EAAmB1S,CAAI;AAAA,QAC7B,IAAI0S,EAAmBiB,CAAE;AAAA,QACzB,WAAW;AAAA,MAAA,CACZ;AAAA,IAAA;AAMH;AAAA;AAAA;AAAA,IAAAvW,EAAA,YAA2B,KAAK,GAAG,GAAG,KAAK,KAAK,EAAE;AAKlD;AAAA;AAAA;AAAA,IAAAA,EAAA,aAA6B,KAAK,GAAG,IAAI,KAAK,KAAK,EAAE;AA5KnD,SAAK,YAAY,IAAI6U;AAAA,MACnBC,EAAQ,IAAI,CAAC7Q,MAAS0Q,EAAY1Q,GAAM,GAAG,CAAC;AAAA,MAC5CiR;AAAA,MACA/O;AAAA,IAAA,GAEF,KAAK,UAAU,GAAG,UAAU,CAACqQ,MAAM;AAC5B,MAAA,KAAK,kBAAkBA,CAAC;AAAA,IAAA,CAC9B,GACD,KAAK,WAAWH,GACX,KAAA,OAAOL,GAAYM,KAAQ,EAAE;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,SAAwB;AACxB,IAAC,KAAK,aACR,KAAK,WAAW,IAChB,KAAK,UAAU,UACR,OAAA,iBAAiB,YAAY,KAAK,UAAU,GACnD,MAAM,KAAK;EAEf;AAAA;AAAA;AAAA;AAAA,EAKA,OAAa;AACX,SAAK,UAAU;EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,SAAK,WAAW,IAChB,KAAK,UAAU,UACR,OAAA,oBAAoB,YAAY,KAAK,UAAU;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,UAAgB;AACP,WAAA,KAAK,UAAU;EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAAgB;AAClB,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,KAAa;AACR,WAAA,KAAK,UAAU,QAAQ;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,GAAGtB,GAAeC,GAAqB;AACrC,WAAO,KAAK,UAAU,GAAGD,GAAOC,CAAG;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,KAAKC,GAAeD,GAAqB;AAClC,SAAA,UAAU,KAAKC,GAAOD,CAAG;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,OAAe;AACjB,YAAQ,KAAK,UAAU,QAAQ,UAAU,IAAI,QAAQ;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAmB;AACrB,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAmB;AACrB,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,UAAgD;AAClD,WAAO,KAAK,UAAU,QAAQ,IAAIK,CAAkB;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmEA,IAAI,OAAe;AACjB,WAAOC,EAAU,IAAI;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,WAAmB;AACd,WAAA,KAAK,UAAU,QAAQ;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,UAAUxR,GAA6B;AACjC,QAAA4N,IAAMH,EAAczN,CAAI;AAC5B,WAAI,KAAK,aACP4N,IAAMH,EAAcG,EAAI,KAAK,MAAM,CAAC,CAAC,IAGhC;AAAA,MACL,UAAUA,EAAI;AAAA,MACd,QAAQA,EAAI;AAAA,MACZ,MAAMA,EAAI;AAAA,IAAA;AAAA,EAEd;AAAA,EAiCA,KAAK8D,GAA4DgB,GAAuB;AACtF,UAAMxS,IAAO0Q,EAAYc,GAAY,KAAK,IAAI,GACxC,EAAE,OAAAxM,IAAQwN,MAAYxS,EAAK;AACjC,SAAK,UAAU,KAAK,EAAE,GAAGA,GAAM,QAAQ,EAAE,GAAGA,EAAK,QAAQ,OAAAgF,EAAM,EAAG,CAAA;AAAA,EACpE;AAAA,EAUA,QAAQwM,GAA4DgB,GAAuB;AACzF,UAAMxS,IAAO0Q,EAAYc,GAAY,KAAK,IAAI,GACxC,EAAE,OAAAxM,IAAQwN,MAAYxS,EAAK;AACjC,SAAK,UAAU,QAAQ,EAAE,GAAGA,GAAM,QAAQ,EAAE,GAAGA,EAAK,QAAQ,OAAAgF,EAAM,EAAG,CAAA;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW/G,GAAiC;AAC1C,UAAM6B,KAAQ,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,QAC7CuN,EAAaiE,EAAUrT,CAAK,GAAG,GAAG;AAEtC,WAAO,KAAK,WACRoP,EAAavN,EAAK,MAAM,CAAC,GAAG,KAAK,aAAa,YAAY,MAAM,IAAI,IACpEA;AAAA,EACN;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,cAA6B;AAGlC,WAAA,oBAAoB,YAAY,KAAK,UAAU;AAEhD,UAAA,EAAE,OAAAkF,EAAU,IAAA,MACZlF,IAAO,KAAK,WAAW,IAAI;AAGjC,UAAM+R,GAAK,GAEP,KAAK,WAAW,KAAK,WAGhB,OAAA,QAAQ,aAAaI,GAAa,EAAE,GAC3C,OAAO,QAAQ,UAAUjN,GAAO,IAAIlF,CAAI,GACjC,OAAA,QAAQ,UAAUoS,GAAgB,EAAE,GAE3C,MAAMP,EAAG,EAAE,KACF,KAAK,WAGP,OAAA,QAAQ,aAAaM,GAAa,EAAE,GAC3C,OAAO,QAAQ,UAAUjN,GAAO,IAAIlF,CAAI,KAC/B,KAAK,WAGP,OAAA,QAAQ,aAAakF,GAAOlF,CAAI,GAChC,OAAA,QAAQ,UAAUoS,GAAgB,EAAE,GAE3C,MAAMP,EAAG,EAAE,MAIJ,OAAA,QAAQ,aAAaK,IAAa,EAAE,GAC3C,OAAO,QAAQ,UAAUhN,GAAO,IAAIlF,CAAI,IAGnC,OAAA,iBAAiB,YAAY,KAAK,UAAU;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,SAAiB;AACnB,YAAQ,KAAK,UAAU,QAAQ,UAAU,IAAI,UAAU;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAA2B;AAC7B,YAAQ,KAAK,UAAU,QAAQ,UAAU,CAAI,GAAA;AAAA,EAC/C;AACF;AC3YO,SAAS2S,GACd3X,GACyB;AACzB,EAAAA,UAAY,CAAA;AACZ,QAAM,EAAE,MAAA4X,GAAM,MAAAhB,MAAS,OAAO;AAE9B,MAAI5R,IAAOwR;AAAA,IACTxW,EAAQ,aAAa,OAEjB4X,IAaAhB,EAAK,SAAS,GAAG,IAAIA,EAAK,MAAM,CAAC,IAAI,IAAIA,EAAK,MAAM,CAAC,CAAC;AAAA,EAAA;AAK5D,QAAMW,IAAOvX,EAAQ,OAAOiX,GAAYjX,EAAQ,IAAI,IAAI;AACxD,MAAIuX,GAAM;AACR,QAAI,CAACvS,EAAK,WAAWuS,CAAI;AACjB,YAAArV;AAAA,QACJY;AAAA,QACA,SAASkC,CAAI,mCAAmCuS,CAAI;AAAA,MAAA;AAGjD,IAAAvS,IAAAA,EAAK,MAAMuS,EAAK,MAAM;AAAA,EAC/B;AAEA,SAAO,IAAIF,GAAwB,CAACrS,CAAI,GAAG,GAAGhF,CAAO;AACvD;AChCO,SAAS6X,GAAQ1U,GAA8B;AAC9C,QAAAuG,IAAQvG,EAAM,MAAM,OAAO;AAC1B,SAAAuG,IAAQA,EAAM,CAAC,IAAI;AAC5B;ACNA,SAASoO,GACPC,GACA/X,GACyB;AAGzB,MAAI+M,MAAgB;AACZ,UAAAiL,IAAW,eAAe,QAAQD,CAAiB;AACzD,QAAIC;AACE,UAAA;AACF,cAAM,EAAE,OAAA7B,GAAO,SAAAJ,EAAA,IAAY,KAAK,MAAMiC,CAAQ;AAC9C,eAAO,IAAIX;AAAA,UACTtB;AAAA,UACAI;AAAA,UACAnW;AAAA,QAAA;AAAA,eAEKyX,GAAG;AACF,gBAAA,MAAM,2CAA2CA,CAAC;AAAA,MAC5D;AAAA,EAEJ;AAIA,SAAOE,GAAmC3X,CAAO;AACnD;AAOgB,SAAAiY,GACdF,GACA/X,GACyB;AACnB,QAAAkY,IAAYJ,GAAmBC,GAAmB/X,CAAO,GAEzDmY,IAAY,MAAM,eAAe,QAAQJ,GAAmB,KAAK,UAAU;AAAA,IAC/E,OAAOG,EAAU;AAAA,IACjB,SAASA,EAAU;AAAA,EACpB,CAAA,CAAC;AAGQ,SAAAA,EAAA,GAAG,UAAUC,CAAS,GAGtBA,KAEHD;AACT;"}