import { WithStateUtils } from '../../classes/WithStateUtils.js';
import { RGB } from '../../colors/types.js';
import { MainButtonEvents, MainButtonParams, MainButtonProps, MainButtonState } from './types.js';
import { EventEmitter } from '../../events/event-emitter/EventEmitter.js';

type Emitter = EventEmitter<MainButtonEvents>;
/**
 * @see Usage: https://docs.telegram-mini-apps.com/platform/main-button
 * @see API: https://docs.telegram-mini-apps.com/packages/tma-js-sdk/components/main-button
 */
export declare class MainButton extends WithStateUtils<MainButtonState> {
    private readonly postEvent;
    constructor({ postEvent, ...rest }: MainButtonProps);
    /**
     * The MainButton background color.
     */
    get bgColor(): RGB;
    /**
     * Sends current local state to the Telegram application.
     */
    private commit;
    /**
     * Disables the MainButton.
     * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1
     */
    disable(): this;
    /**
     * Enables the MainButton.
     */
    enable(): this;
    /**
     * Hides the MainButton.
     */
    hide(): this;
    /**
     * Hides the MainButton loading indicator.
     */
    hideLoader(): this;
    private set isEnabled(value);
    /**
     * True if the MainButton is enabled.
     */
    get isEnabled(): boolean;
    private set isLoaderVisible(value);
    /**
     * True if the MainButton loader is visible.
     */
    get isLoaderVisible(): boolean;
    private set isVisible(value);
    /**
     * True if the MainButton is visible.
     */
    get isVisible(): boolean;
    /**
     * Adds a new event listener.
     * @param event - event to listen.
     * @param listener - listener to add.
     */
    on: Emitter['on'];
    /**
     * Removes the event listener.
     * @param event - event to listen.
     * @param listener - listener to remove.
     */
    off: Emitter['off'];
    /**
     * Shows the MainButton.
     *
     * Note that opening the Mini App from the attachment menu hides the main button until the
     * user interacts with the Mini App interface.
     */
    show(): this;
    /**
     * Shows a loading indicator on the Main Button.
     */
    showLoader(): this;
    /**
     * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.
     * @param text - a new text.
     */
    setText(text: string): this;
    /**
     * Sets a new Main Button text color.
     * @param textColor - new text color.
     */
    setTextColor(textColor: RGB): this;
    /**
     * Updates current Main Button color.
     * @param bgColor - color to set.
     */
    setBgColor(bgColor: RGB): this;
    /**
     * Allows setting multiple Main Button parameters.
     * @param params - Main Button parameters.
     */
    setParams(params: Partial<MainButtonParams>): this;
    /**
     * The MainButton text.
     */
    get text(): string;
    /**
     * The MainButton text color.
     */
    get textColor(): RGB;
}
export {};
