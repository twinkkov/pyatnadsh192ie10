import { WithSupportsAndStateUtils } from '../../classes/WithSupportsAndStateUtils.js';
import { PostEvent } from '../../bridge/methods/postEvent.js';
import { SettingsButtonEvents, SettingsButtonState } from './types.js';
import { EventEmitter } from '../../events/event-emitter/EventEmitter.js';
import { Version } from '../../version/types.js';

type Emitter = EventEmitter<SettingsButtonEvents>;
export declare class SettingsButton extends WithSupportsAndStateUtils<SettingsButtonState, 'show' | 'hide'> {
    private readonly postEvent;
    constructor(isVisible: boolean, version: Version, postEvent: PostEvent);
    private set isVisible(value);
    /**
     * True if the SettingsButton is visible.
     */
    get isVisible(): boolean;
    /**
     * Hides the SettingsButton.
     */
    hide(): void;
    /**
     * Adds a new event listener.
     * @param event - event to listen.
     * @param listener - listener to add.
     */
    on: Emitter['on'];
    /**
     * Removes the event listener.
     * @param event - event to listen.
     * @param listener - listener to remove.
     */
    off: Emitter['off'];
    /**
     * Shows the SettingsButton.
     */
    show(): void;
}
export {};
